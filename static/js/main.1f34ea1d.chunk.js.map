{"version":3,"sources":["gql/GraphProvider.tsx","components/buttons/UnstyledButton.tsx","layout/AppHeader.tsx","components/spells/list/List.tsx","pages/home/HomePage.tsx","layout/PageHeader.tsx","generated/graphql.tsx","pages/spellbooks/SpellbooksPage.tsx","layout/PageLoading.tsx","gql/SpellRepository.tsx","pages/spells/SpellPage.tsx","pages/spells/InfiniteSpellList.tsx","components/Drawer.tsx","pages/spells/SpellsListFilter.tsx","pages/spells/SpellsPage.tsx","pages/Routes.tsx","layout/AppThemeProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","GraphProvider","children","ApolloProvider","UnstyledButton","styled","button","LogoLink","Link","themeGet","BackBtn","AppHeader","history","useHistory","showBtn","useLocation","pathname","Box","bg","pl","pr","pt","pb","justifyContent","display","alignItems","fontWeight","onClick","goBack","StyledOcticon","icon","ChevronLeftIcon","size","to","RepoIcon","mr","ListItem","li","List","ul","HomePageLink","HomePage","flexDirection","as","p","PageHeader","boxShadow","Title","title","Heading","fontSize","Action","label","ActionButton","SearchIcon","SortFindManyAbilityScoreInput","SortFindManyAlignmentInput","SortFindManyBackgroundInput","SortFindManyClassInput","SortFindManyConditionInput","SortFindManyDamageTypeInput","SortFindManyEquipmentCategoryInput","SortFindManyEquipmentInput","SortFindManyFeatInput","SortFindManyFeatureInput","SortFindManyLanguageInput","SortFindManyLevelInput","SortFindManyMagicItemInput","SortFindManyMagicSchoolInput","SortFindManyMonsterInput","SortFindManyProficiencyInput","SortFindManyRaceInput","SortFindManyRuleInput","SortFindManyRuleSectionInput","SortFindManySkillInput","SortFindManySpellInput","SortFindManySubclassInput","SortFindManySubraceInput","SortFindManyTraitInput","SortFindManyWeaponPropertyInput","SortFindOneAbilityScoreInput","SortFindOneAlignmentInput","SortFindOneBackgroundInput","SortFindOneClassInput","SortFindOneConditionInput","SortFindOneDamageTypeInput","SortFindOneEquipmentCategoryInput","SortFindOneEquipmentInput","SortFindOneFeatInput","SortFindOneFeatureInput","SortFindOneLanguageInput","SortFindOneLevelInput","SortFindOneMagicItemInput","SortFindOneMagicSchoolInput","SortFindOneMonsterInput","SortFindOneProficiencyInput","SortFindOneRaceInput","SortFindOneRuleInput","SortFindOneRuleSectionInput","SortFindOneSkillInput","SortFindOneSpellInput","SortFindOneSubclassInput","SortFindOneSubraceInput","SortFindOneTraitInput","SortFindOneWeaponPropertyInput","SpellbooksPage","StackIcon","PageLoading","m","Spinner","defaultOptions","GetSpellsDocument","gql","GetSpellByNameDocument","mapApolloSpell","apolloSpell","castingTime","casting_time","toString","classes","map","c","name","components","concentration","desc","d","duration","level","higherLevelDesc","higher_level","material","ritual","school","range","uriSafeName","encodeURIComponent","useGetSpells","baseOptions","options","Apollo","useGetSpellsQuery","data","error","isLoading","loading","spells","s","useGetSpellByName","useGetSpellByNameQuery","variables","undefined","spell","renderPart","value","Text","SpellPage","encodedSpellName","useParams","spellName","decodeURIComponent","useEffect","console","notFound","BookmarkFillIcon","mt","ml","mb","Flash","variant","AlertIcon","toLowerCase","join","idx","length","Card","Row","index","style","SpellListContainer","div","InfiniteSpellList","containerRef","useRef","useResizeDetector","targetRef","width","height","ref","itemCount","itemData","itemSize","DrawerContent","isOpen","Screen","Drawer","handleClose","TitleBar","CloseButton","ClassGrid","SpellLevelGrid","ClassCell","SpellLevelCell","SpellsListFilter","overflow","XIcon","SpellsPage","useState","nameFilter","setNameFilter","isFilterDrawerOpen","setIsFilterDrawerOpen","lowerFilter","filter","includes","hideDrawer","flex","TextInput","sx","placeholder","onChange","e","target","Routes","overflowY","path","AppThemeProvider","ThemeProvider","colorMode","nightScheme","Base","BaseStyles","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEMA,EAAS,IAAIC,IAAa,CAC5BC,IAAK,kCACLC,MAAO,IAAIC,MAOFC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SAAiCM,K,+CCVxBE,EAAiBC,IAAOC,OAAV,+MCIrBC,EAAWF,YAAOG,IAAPH,CAAH,mGAGDI,YAAS,qBAGhBC,EAAUL,YAAOD,EAAPC,CAAH,0JAIAI,YAAS,sBAKTE,EAAY,WACrB,IAAMC,EAAUC,cAGVC,EAAgC,MAFrBC,cAEQC,SAEzB,OACI,eAACC,EAAA,EAAD,CACIC,GAAG,UACHC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,eAAe,SACfC,QAAQ,OACRC,WAAW,SACXC,WAAY,IAThB,UAWKZ,GACG,eAACJ,EAAD,CAASiB,QAAS,kBAAMf,EAAQgB,UAAhC,UACI,cAACC,EAAA,EAAD,CAAeC,KAAMC,IAAiBC,KAAM,KAC5C,2CAGR,eAACzB,EAAD,CAAU0B,GAAG,IAAb,UACI,cAACJ,EAAA,EAAD,CAAeC,KAAMI,IAAUF,KAAM,GAAIG,GAAI,IAC7C,wDC5CHC,EAAW/B,IAAOgC,GAAV,mGAEc5B,YAAS,wBAI/B6B,EAAOjC,IAAOkC,GAAV,oFCJXC,EAAenC,YAAOY,IAAPZ,CAAH,6KAWLoC,EAAW,kBACpB,cAACxB,EAAA,EAAD,CAAKO,QAAQ,OAAOkB,cAAc,SAAlC,SACI,eAACJ,EAAD,WACI,cAACF,EAAD,UACI,cAACI,EAAD,CAAcG,GAAInC,IAAMyB,GAAG,cAAcW,EAAG,EAA5C,0BAIJ,cAACR,EAAD,UACI,cAACI,EAAD,CAAcG,GAAInC,IAAMyB,GAAG,UAAUW,EAAG,EAAxC,sC,SChBHC,EAAa,SAAC,GAAD,IAAG3C,EAAH,EAAGA,SAAH,OACtB,cAACe,EAAA,EAAD,CACIC,GAAG,eACH4B,UAAU,eACVtB,QAAQ,OACRD,eAAe,gBAJnB,SAMKrB,KAST2C,EAAWE,MAAQ,gBAAGjB,EAAH,EAAGA,KAAMkB,EAAT,EAASA,MAAT,OACf,eAACC,EAAA,EAAD,CAASC,SAAU,EAAGxB,WAAY,IAAKkB,EAAG,EAA1C,UACKd,GAAQ,cAACD,EAAA,EAAD,CAAeC,KAAMA,EAAME,KAAM,GAAIG,GAAI,IAClD,+BAAOa,QAUfH,EAAWM,OAAS,gBAAGrB,EAAH,EAAGA,KAAMsB,EAAT,EAASA,MAAOzB,EAAhB,EAAgBA,QAAhB,OAChB,cAAC0B,GAAD,CAAc1B,QAASA,EAAvB,SACKG,GACG,cAACD,EAAA,EAAD,CACIC,KAAMwB,IACNtB,KAAM,GACNG,GAAI,EACJ,aAAYiB,OAM5B,I,ICiraYG,EAeAC,EAeAC,EAyCAC,EA6BAC,EAaAC,EAaAC,EAWAC,EAuFAC,EAaAC,EA+CAC,EAmBAC,EAuHAC,EAmBAC,GAaAC,GAiEAC,GAaAC,GAmCAC,GAaAC,GAaAC,GAmBAC,GAWAC,GAuBAC,GAuBAC,GAqDAC,GAaAC,GAeAC,GAeAC,GAyCAC,GA6BAC,GAaAC,GAaAC,GAWAC,GAuFAC,GAaAC,GA+CAC,GAmBAC,GAuHAC,GAmBAC,GAaAC,GAiEAC,GAaAC,GAmCAC,GAaAC,GAaAC,GAmBAC,GAWAC,GAuBAC,GAuBAC,GAqDAC,GDlmdNnD,GAAehD,YAAOD,EAAPC,CAAH,sGAGUI,YAAS,yBElDxBgG,GAAiB,WAC1B,OACI,qCACI,cAAC,EAAD,UACI,cAAC,EAAW1D,MAAZ,CAAkBjB,KAAM4E,IAAW1D,MAAM,iBAE7C,cAAC/B,EAAA,EAAD,CAAKO,QAAQ,OAAOkB,cAAc,e,8BCRjCiE,GAAc,kBACvB,eAAC1F,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACdjB,WAAW,SACXF,eAAe,SACfqF,EAAG,EALP,UAOI,cAAC3F,EAAA,EAAD,CAAK2F,EAAG,EAAR,SACI,cAAC3D,EAAA,EAAD,CAASC,SAAU,EAAnB,6BAEJ,cAAC2D,GAAA,EAAD,Q,6BFDFC,I,OAAiB,K,SAwtaXvD,K,mBAAAA,E,qBAAAA,E,4BAAAA,E,8BAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAeAC,K,mCAAAA,E,qCAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAeAC,K,mCAAAA,E,qCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,qCAAAA,E,mCAAAA,E,qCAAAA,E,mCAAAA,E,qCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,qCAAAA,E,uCAAAA,E,iCAAAA,E,mCAAAA,E,qBAAAA,E,uBAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,4DAAAA,E,8DAAAA,E,wDAAAA,E,0DAAAA,E,wDAAAA,E,0DAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAyCAC,K,kCAAAA,E,oCAAAA,E,wBAAAA,E,0BAAAA,E,qBAAAA,E,uBAAAA,E,6FAAAA,E,+FAAAA,E,yFAAAA,E,2FAAAA,E,mBAAAA,E,qBAAAA,E,+CAAAA,E,iDAAAA,E,wFAAAA,E,0FAAAA,E,sFAAAA,E,wFAAAA,E,oFAAAA,E,sFAAAA,E,uBAAAA,E,yBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cA6BAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAaAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAaAC,K,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAWAC,K,sCAAAA,E,wCAAAA,E,0CAAAA,E,4CAAAA,E,mDAAAA,E,qDAAAA,E,mDAAAA,E,qDAAAA,E,2BAAAA,E,6BAAAA,E,sCAAAA,E,wCAAAA,E,qCAAAA,E,uCAAAA,E,6BAAAA,E,+BAAAA,E,8CAAAA,E,gDAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,mBAAAA,E,qBAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,gDAAAA,E,kDAAAA,E,8CAAAA,E,gDAAAA,E,4CAAAA,E,8CAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,2BAAAA,E,6BAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,qCAAAA,E,yBAAAA,E,2BAAAA,E,uCAAAA,E,yCAAAA,E,+BAAAA,E,iCAAAA,E,kDAAAA,E,oDAAAA,E,gCAAAA,E,kCAAAA,E,0CAAAA,E,4CAAAA,E,8CAAAA,E,gDAAAA,E,oCAAAA,E,sCAAAA,E,kEAAAA,E,oEAAAA,E,8EAAAA,E,gFAAAA,E,4EAAAA,E,8EAAAA,E,0EAAAA,E,4EAAAA,E,iBAAAA,E,mBAAAA,E,0CAAAA,E,4CAAAA,E,wCAAAA,E,0CAAAA,E,kCAAAA,E,oCAAAA,E,uBAAAA,E,yBAAAA,E,gBAAAA,E,mBAAAA,M,cAuFAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAaAC,K,qCAAAA,E,uCAAAA,E,iCAAAA,E,mCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,2FAAAA,E,6FAAAA,E,uFAAAA,E,yFAAAA,E,6FAAAA,E,+FAAAA,E,yFAAAA,E,2FAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,uCAAAA,E,yCAAAA,E,qCAAAA,E,uCAAAA,E,mCAAAA,E,qCAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cA+CAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,0CAAAA,E,4CAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAmBAC,K,mDAAAA,E,qDAAAA,E,iEAAAA,E,mEAAAA,E,kFAAAA,E,oFAAAA,E,2DAAAA,E,6DAAAA,E,kFAAAA,E,oFAAAA,E,8EAAAA,E,gFAAAA,E,sFAAAA,E,wFAAAA,E,wEAAAA,E,0EAAAA,E,iEAAAA,E,mEAAAA,E,qEAAAA,E,uEAAAA,E,qEAAAA,E,uEAAAA,E,uEAAAA,E,yEAAAA,E,yEAAAA,E,2EAAAA,E,yDAAAA,E,2DAAAA,E,gFAAAA,E,kFAAAA,E,gFAAAA,E,kFAAAA,E,gFAAAA,E,kFAAAA,E,oFAAAA,E,sFAAAA,E,oFAAAA,E,sFAAAA,E,qEAAAA,E,uEAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,2DAAAA,E,6DAAAA,E,wEAAAA,E,0EAAAA,E,oFAAAA,E,sFAAAA,E,oFAAAA,E,sFAAAA,E,qEAAAA,E,uEAAAA,E,mEAAAA,E,qEAAAA,E,2EAAAA,E,6EAAAA,E,kEAAAA,E,oEAAAA,E,uEAAAA,E,yEAAAA,E,oEAAAA,E,sEAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,E,uBAAAA,E,8BAAAA,E,gCAAAA,E,gEAAAA,E,kEAAAA,E,4DAAAA,E,8DAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,8GAAAA,E,gHAAAA,E,iEAAAA,E,mEAAAA,E,uCAAAA,E,yCAAAA,E,qCAAAA,E,uCAAAA,E,mCAAAA,E,qCAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAuHAC,K,mBAAAA,E,qBAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,M,cAmBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,6BAAAA,E,+BAAAA,E,gCAAAA,E,kCAAAA,E,0CAAAA,E,4CAAAA,E,2BAAAA,E,6BAAAA,E,mCAAAA,E,qCAAAA,E,6BAAAA,E,+BAAAA,E,0BAAAA,E,4BAAAA,E,8BAAAA,E,gCAAAA,E,qBAAAA,E,uBAAAA,E,mCAAAA,E,qCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,6CAAAA,E,+CAAAA,E,6CAAAA,E,+CAAAA,E,4DAAAA,E,8DAAAA,E,+CAAAA,E,iDAAAA,E,2CAAAA,E,6CAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,6BAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,2BAAAA,E,6BAAAA,E,yBAAAA,E,2BAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,uBAAAA,E,yBAAAA,E,eAAAA,E,iBAAAA,E,gBAAAA,E,mBAAAA,Q,cAiEAC,K,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,iEAAAA,E,mEAAAA,E,6DAAAA,E,+DAAAA,E,iBAAAA,E,mBAAAA,E,6BAAAA,E,+BAAAA,E,qBAAAA,E,uBAAAA,E,oCAAAA,E,sCAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,0CAAAA,E,4CAAAA,E,qBAAAA,E,uBAAAA,E,+EAAAA,E,iFAAAA,E,2EAAAA,E,6EAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmCAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,gDAAAA,E,kDAAAA,E,8CAAAA,E,gDAAAA,E,4CAAAA,E,8CAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmBAC,K,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,gBAAAA,E,mBAAAA,Q,cAWAC,K,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,wCAAAA,E,0CAAAA,E,wCAAAA,E,0CAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,2BAAAA,E,6BAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,8DAAAA,E,gEAAAA,E,0DAAAA,E,4DAAAA,E,kGAAAA,E,oGAAAA,E,gGAAAA,E,kGAAAA,E,8FAAAA,E,gGAAAA,E,gGAAAA,E,kGAAAA,E,2EAAAA,E,6EAAAA,E,2EAAAA,E,6EAAAA,E,yFAAAA,E,2FAAAA,E,uFAAAA,E,yFAAAA,E,yEAAAA,E,2EAAAA,E,uEAAAA,E,yEAAAA,E,qEAAAA,E,uEAAAA,E,+EAAAA,E,iFAAAA,E,2EAAAA,E,6EAAAA,E,qFAAAA,E,uFAAAA,E,iFAAAA,E,mFAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAqDAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,mBAAAA,E,qBAAAA,E,4BAAAA,E,8BAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAeAC,K,mCAAAA,E,qCAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAeAC,K,mCAAAA,E,qCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,qCAAAA,E,mCAAAA,E,qCAAAA,E,mCAAAA,E,qCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,qCAAAA,E,uCAAAA,E,iCAAAA,E,mCAAAA,E,qBAAAA,E,uBAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,4DAAAA,E,8DAAAA,E,wDAAAA,E,0DAAAA,E,wDAAAA,E,0DAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAyCAC,K,kCAAAA,E,oCAAAA,E,wBAAAA,E,0BAAAA,E,qBAAAA,E,uBAAAA,E,6FAAAA,E,+FAAAA,E,yFAAAA,E,2FAAAA,E,mBAAAA,E,qBAAAA,E,+CAAAA,E,iDAAAA,E,wFAAAA,E,0FAAAA,E,sFAAAA,E,wFAAAA,E,oFAAAA,E,sFAAAA,E,uBAAAA,E,yBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cA6BAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAWAC,K,sCAAAA,E,wCAAAA,E,0CAAAA,E,4CAAAA,E,mDAAAA,E,qDAAAA,E,mDAAAA,E,qDAAAA,E,2BAAAA,E,6BAAAA,E,sCAAAA,E,wCAAAA,E,qCAAAA,E,uCAAAA,E,6BAAAA,E,+BAAAA,E,8CAAAA,E,gDAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,mBAAAA,E,qBAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,gDAAAA,E,kDAAAA,E,8CAAAA,E,gDAAAA,E,4CAAAA,E,8CAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,2BAAAA,E,6BAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,qCAAAA,E,yBAAAA,E,2BAAAA,E,uCAAAA,E,yCAAAA,E,+BAAAA,E,iCAAAA,E,kDAAAA,E,oDAAAA,E,gCAAAA,E,kCAAAA,E,0CAAAA,E,4CAAAA,E,8CAAAA,E,gDAAAA,E,oCAAAA,E,sCAAAA,E,kEAAAA,E,oEAAAA,E,8EAAAA,E,gFAAAA,E,4EAAAA,E,8EAAAA,E,0EAAAA,E,4EAAAA,E,iBAAAA,E,mBAAAA,E,0CAAAA,E,4CAAAA,E,wCAAAA,E,0CAAAA,E,kCAAAA,E,oCAAAA,E,uBAAAA,E,yBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuFAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,qCAAAA,E,uCAAAA,E,iCAAAA,E,mCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,2FAAAA,E,6FAAAA,E,uFAAAA,E,yFAAAA,E,6FAAAA,E,+FAAAA,E,yFAAAA,E,2FAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,uCAAAA,E,yCAAAA,E,qCAAAA,E,uCAAAA,E,mCAAAA,E,qCAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cA+CAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,0CAAAA,E,4CAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmBAC,K,mDAAAA,E,qDAAAA,E,iEAAAA,E,mEAAAA,E,kFAAAA,E,oFAAAA,E,2DAAAA,E,6DAAAA,E,kFAAAA,E,oFAAAA,E,8EAAAA,E,gFAAAA,E,sFAAAA,E,wFAAAA,E,wEAAAA,E,0EAAAA,E,iEAAAA,E,mEAAAA,E,qEAAAA,E,uEAAAA,E,qEAAAA,E,uEAAAA,E,uEAAAA,E,yEAAAA,E,yEAAAA,E,2EAAAA,E,yDAAAA,E,2DAAAA,E,gFAAAA,E,kFAAAA,E,gFAAAA,E,kFAAAA,E,gFAAAA,E,kFAAAA,E,oFAAAA,E,sFAAAA,E,oFAAAA,E,sFAAAA,E,qEAAAA,E,uEAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,kFAAAA,E,oFAAAA,E,2DAAAA,E,6DAAAA,E,wEAAAA,E,0EAAAA,E,oFAAAA,E,sFAAAA,E,oFAAAA,E,sFAAAA,E,qEAAAA,E,uEAAAA,E,mEAAAA,E,qEAAAA,E,2EAAAA,E,6EAAAA,E,kEAAAA,E,oEAAAA,E,uEAAAA,E,yEAAAA,E,oEAAAA,E,sEAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,E,uBAAAA,E,8BAAAA,E,gCAAAA,E,gEAAAA,E,kEAAAA,E,4DAAAA,E,8DAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,yEAAAA,E,2EAAAA,E,8GAAAA,E,gHAAAA,E,iEAAAA,E,mEAAAA,E,uCAAAA,E,yCAAAA,E,qCAAAA,E,uCAAAA,E,mCAAAA,E,qCAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuHAC,K,mBAAAA,E,qBAAAA,E,0DAAAA,E,4DAAAA,E,wDAAAA,E,0DAAAA,E,sDAAAA,E,wDAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,6BAAAA,E,+BAAAA,E,gCAAAA,E,kCAAAA,E,0CAAAA,E,4CAAAA,E,2BAAAA,E,6BAAAA,E,mCAAAA,E,qCAAAA,E,6BAAAA,E,+BAAAA,E,0BAAAA,E,4BAAAA,E,8BAAAA,E,gCAAAA,E,qBAAAA,E,uBAAAA,E,mCAAAA,E,qCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,6CAAAA,E,+CAAAA,E,6CAAAA,E,+CAAAA,E,4DAAAA,E,8DAAAA,E,+CAAAA,E,iDAAAA,E,2CAAAA,E,6CAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,6BAAAA,E,+BAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,+BAAAA,E,iCAAAA,E,2BAAAA,E,6BAAAA,E,yBAAAA,E,2BAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,uBAAAA,E,yBAAAA,E,eAAAA,E,iBAAAA,E,gBAAAA,E,mBAAAA,Q,cAiEAC,K,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,iEAAAA,E,mEAAAA,E,6DAAAA,E,+DAAAA,E,iBAAAA,E,mBAAAA,E,6BAAAA,E,+BAAAA,E,qBAAAA,E,uBAAAA,E,oCAAAA,E,sCAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,0CAAAA,E,4CAAAA,E,qBAAAA,E,uBAAAA,E,+EAAAA,E,iFAAAA,E,2EAAAA,E,6EAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmCAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAaAC,K,gDAAAA,E,kDAAAA,E,8CAAAA,E,gDAAAA,E,4CAAAA,E,8CAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAmBAC,K,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,gBAAAA,E,mBAAAA,Q,cAWAC,K,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,wCAAAA,E,0CAAAA,E,wCAAAA,E,0CAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,wDAAAA,E,0DAAAA,E,oDAAAA,E,sDAAAA,E,mBAAAA,E,qBAAAA,E,+BAAAA,E,iCAAAA,E,6BAAAA,E,+BAAAA,E,2BAAAA,E,6BAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAuBAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,mCAAAA,E,qCAAAA,E,iCAAAA,E,mCAAAA,E,+BAAAA,E,iCAAAA,E,8DAAAA,E,gEAAAA,E,0DAAAA,E,4DAAAA,E,kGAAAA,E,oGAAAA,E,gGAAAA,E,kGAAAA,E,8FAAAA,E,gGAAAA,E,gGAAAA,E,kGAAAA,E,2EAAAA,E,6EAAAA,E,2EAAAA,E,6EAAAA,E,yFAAAA,E,2FAAAA,E,uFAAAA,E,yFAAAA,E,yEAAAA,E,2EAAAA,E,uEAAAA,E,yEAAAA,E,qEAAAA,E,uEAAAA,E,+EAAAA,E,iFAAAA,E,2EAAAA,E,6EAAAA,E,qFAAAA,E,uFAAAA,E,iFAAAA,E,mFAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,cAqDAC,K,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,mBAAAA,E,qBAAAA,E,iBAAAA,E,mBAAAA,E,gBAAAA,E,mBAAAA,Q,KAgaL,IAAMO,GAAoBC,aAAH,0TAgEvB,IAAMC,GAAyBD,aAAH,6lBGvmenC,I,iCAAME,GAAiB,SAACC,GAAD,0CAA+C,CAClEC,YAAW,UAAED,EAAYE,oBAAd,aAAE,EAA0BC,WACvCC,QAAO,oBAAEJ,EAAYI,eAAd,aAAE,EAAqBC,KAAI,SAACC,GAAD,OAAOA,EAAGC,KAAMJ,qBAA3C,QAA0D,GACjEK,WAAU,oBAAER,EAAYQ,kBAAd,aAAE,EAAwBH,KAAI,SAACC,GAAD,OAAOA,EAAGH,qBAAxC,QAAuD,GACjEM,cAAa,UAAET,EAAYS,qBAAd,SACbC,KAAI,oBAAEV,EAAYU,YAAd,aAAE,EAAkBL,KAAI,SAACM,GAAD,OAAOA,EAAGR,qBAAlC,QAAiD,GACrDS,SAAQ,UAAEZ,EAAYY,gBAAd,aAAE,EAAsBT,WAChCU,MAAOb,EAAYa,MACnBC,gBAAe,oBAAEd,EAAYe,oBAAd,aAAE,EAA0BV,KAAI,SAACM,GAAD,OAAOA,EAAGR,qBAA1C,QAAyD,GACxEa,SAAQ,UAAEhB,EAAYgB,gBAAd,aAAE,EAAsBb,WAChCI,KAAMP,EAAYO,KAClBU,OAAM,UAAEjB,EAAYiB,cAAd,SACNC,OAAM,UAAElB,EAAYkB,cAAd,iBAAE,EAAoBX,YAAtB,aAAE,EAA0BJ,WAClCgB,MAAK,UAAEnB,EAAYmB,aAAd,aAAE,EAAmBhB,WAC1BiB,YAAaC,mBAAmBrB,EAAYO,QAGnCe,GAAe,WACxB,MHqjeG,SACHC,GAKA,IAAMC,EAAO,6BAAQ7B,IAAmB4B,GACxC,OAAOE,KACH7B,GACA4B,GG9jewCE,GAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAgBC,EAA9B,EAAqBC,QAErB,OAAIF,GAASC,EACF,CACHD,QACAC,YACAF,KAAM,IAIP,CACHC,QACAC,YACAF,KAAMA,EAAMI,OAAO1B,KAAI,SAAC2B,GAAD,OAAOjC,GAAeiC,QAIxCC,GAAoB,SAAC1B,GAC9B,MHgneG,SACHgB,GAKA,IAAMC,EAAO,6BAAQ7B,IAAmB4B,GACxC,OAAOE,KACH3B,GACA0B,GGrneAU,CAAuB,CACvBC,UAAW,CACP5B,UALJoB,EADJ,EACIA,KACAC,EAFJ,EAEIA,MACSC,EAHb,EAGIC,QAOJ,OAAIF,GAASC,EACF,CACHD,QACAC,YACAF,UAAMS,GAIP,CACHR,QACAC,YACAF,KAAM5B,GAAe4B,EAAMU,SC3D7BC,GAAa,SAACrG,EAAgBsG,GAChC,GAAKA,EAIL,OACI,eAACzI,EAAA,EAAD,WACI,eAAC0I,GAAA,EAAD,CAAMjI,WAAW,OAAOF,QAAQ,SAAhC,UACK4B,EADL,OAGA,eAACuG,GAAA,EAAD,CAAMnI,QAAQ,SAAd,cAAyBkI,SAKxBE,GAAY,WAAO,IAAD,UACRC,EAAqBC,cAAhCC,UACFA,EAAYC,mBAAmBH,GAErC,EAAmCT,GAAkBW,GAA7CjB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UAErBiB,qBAAU,WACNlB,GAASmB,QAAQnB,MAAMA,KACxB,CAACA,IAEJ,IAAMoB,GAAYnB,IAAcF,EAEhC,OACI,eAAC7H,EAAA,EAAD,CAAKO,QAAQ,OAAOkB,cAAc,SAAlC,UACI,cAAC,EAAD,UACI,cAAC,EAAWK,MAAZ,CAAkBjB,KAAMsI,IAAkBpH,MAAO+G,MAEpDf,EACG,cAAC,GAAD,IAEA,cAAC/H,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACd2H,GAAI,EACJC,GAAI,EACJnI,GAAI,EACJoI,GAAI,EANR,SAQKJ,EACG,eAACK,GAAA,EAAD,CAAOC,QAAQ,UAAf,UACI,cAAC5I,EAAA,EAAD,CAAeC,KAAM4I,MACrB,cAACf,GAAA,EAAD,CAAMjI,WAAY,IAAlB,gCAGJ,qCACI,eAACuB,EAAA,EAAD,CAASC,SAAU,EAAGqH,GAAI,EAA1B,0BACWzB,QADX,IACWA,OADX,EACWA,EAAMd,MAAO,IADxB,OAEKc,QAFL,IAEKA,GAFL,UAEKA,EAAMT,cAFX,aAEK,EAAcsC,iBAElBlB,GAAW,eAAD,OAAiBX,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAM1B,aACjCqC,GAAW,QAAD,OAAUX,QAAV,IAAUA,OAAV,EAAUA,EAAMR,OAC1BmB,GACG,aADO,OAEPX,QAFO,IAEPA,GAFO,UAEPA,EAAMnB,kBAFC,aAEP,EAAkBiD,KAAK,OAE1BnB,GACG,iBACI,OAAJX,QAAI,IAAJA,OAAA,EAAAA,EAAMlB,eAAgB,MAAQ,MAEjC6B,GAAW,UAAc,OAAJX,QAAI,IAAJA,OAAA,EAAAA,EAAMV,QAAS,MAAQ,MAC5CqB,GAAW,UAAD,OAAYX,QAAZ,IAAYA,OAAZ,EAAYA,EAAMvB,QAAQqD,KAAK,OAE1C,cAAC3J,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACd2H,GAAI,EACJE,GAAI,EAJR,gBAMKzB,QANL,IAMKA,GANL,UAMKA,EAAMjB,YANX,aAMK,EAAYL,KAAI,SAACK,EAAMgD,GAAP,OACb,cAAClB,GAAA,EAAD,CAAMY,GAAI,EAAV,SACK1C,GADagD,SAMrB,OAAJ/B,QAAI,IAAJA,GAAA,UAAAA,EAAMb,uBAAN,eAAuB6C,QAAU,GAC9B,qCACI,cAACnB,GAAA,EAAD,CAAMjI,WAAW,OAAOF,QAAQ,SAAhC,2BAGA,cAACP,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACd2H,GAAI,EACJE,GAAI,EAJR,gBAMKzB,QANL,IAMKA,GANL,UAMKA,EAAMb,uBANX,aAMK,EAAuBT,KACpB,SAACK,EAAMgD,GAAP,OACI,cAAClB,GAAA,EAAD,CAAMY,GAAI,EAAV,SACK1C,GADagD,oB,qCCjG5DE,GAAO1K,YAAOY,IAAPZ,CAAH,6KAOkBI,YAAS,wBAU/BuK,GAAM,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MACZ1B,EADwC,EAArBV,KACNmC,GAEnB,OACI,qBAAKC,MAAOA,EAAZ,SACI,cAACH,GAAD,CACInI,EAAG,EACHvB,GAAI,EACJC,GAAI,EACJE,QAAQ,QACRmB,GAAInC,IACJyB,GAAE,iBAAYuH,EAAMjB,aANxB,SAQI,eAACoB,GAAA,EAAD,CAAMzG,SAAU,EAAGxB,WAAY,IAA/B,cACM8H,EAAMxB,MADZ,KACqBwB,EAAM9B,aAWrCyD,GAAqB9K,IAAO+K,IAAV,iDAIXC,GAAoB,SAAC,GAAwC,IAAtCnC,EAAqC,EAArCA,OAC1BoC,EAAeC,mBACrB,EAA0BC,aAAkB,CAAEC,UAAWH,IAAjDI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OACI,cAACR,GAAD,CAAoBS,IAAKN,EAAzB,SACI,cAAC,KAAD,CACII,MAAK,OAAEA,QAAF,IAAEA,IAAS,IAChBC,OAAM,OAAEA,QAAF,IAAEA,IAAU,IAClBE,UAAW3C,EAAO4B,OAClBgB,SAAU5C,EACV6C,SAAU,GALd,SAOKf,QChEXgB,GAAgB3L,IAAO+K,IAAV,kSACK3K,YAAS,wBAYpB,qBAAGwL,OAAuB,IAAM,WAGvCC,GAAS7L,IAAO+K,IAAV,2PAUY,qBAAGa,OAAuB,YAAc,cAC1C,qBAAGA,OAAuB,MAAQ,UAS3CE,GAAS,SAAC,GAAD,IAAGjM,EAAH,EAAGA,SAAU+L,EAAb,EAAaA,OAAQG,EAArB,EAAqBA,YAArB,OAClB,qCACI,cAACF,GAAD,CAAQD,OAAQA,EAAQtK,QAASyK,IACjC,cAACJ,GAAD,CAAeC,OAAQA,EAAvB,SAAgC/L,QC/BlCmM,GAAWhM,YAAO4C,IAAP5C,CAAH,iHAMRiM,GAAcjM,YAAOD,EAAPC,CAAH,yGAIWI,YAAS,yBAK/B8L,GAAYlM,IAAO+K,IAAV,+LASToB,GAAiBnM,IAAO+K,IAAV,qKAQdqB,GAAYpM,YAAOD,EAAPC,CAAH,sMACSI,YAAS,yBAS3BiM,GAAiBrM,YAAOD,EAAPC,CAAH,sMACII,YAAS,yBAapBkM,GAAmB,SAAC,GAA4C,IAA1CP,EAAyC,EAAzCA,YAC/B,OACI,eAACnL,EAAA,EAAD,CAAK2L,SAAS,OAAOjB,OAAO,OAA5B,UACI,eAACU,GAAD,CAAWzJ,EAAG,EAAGD,GAAG,KAAKO,SAAU,EAAnC,UACI,cAACyG,GAAA,EAAD,CAAM/G,EAAG,EAAT,oBACA,cAAC0J,GAAD,CAAa3K,QAASyK,EAAtB,SACI,cAACvK,EAAA,EAAD,CAAeC,KAAM+K,IAAO7K,KAAM,UAG1C,eAACf,EAAA,EAAD,CAAK2B,EAAG,EAAR,UACI,cAAC+G,GAAA,EAAD,CAAMrI,GAAI,EAAGE,QAAQ,QAArB,mBACA,eAAC+K,GAAD,WACI,cAACE,GAAD,mBACA,cAACA,GAAD,qBACA,cAACA,GAAD,oBACA,cAACA,GAAD,sBACA,cAACA,GAAD,qBACA,cAACA,GAAD,uBACA,cAACA,GAAD,sBACA,cAACA,GAAD,wBAEJ,cAAC9C,GAAA,EAAD,CAAMrI,GAAI,EAAGE,QAAQ,QAArB,yBACA,eAACgL,GAAD,WACI,cAACE,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,gBACA,cAACA,GAAD,0BCzFPI,GAAa,WACtB,MAAmCrE,KAA3BK,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,UACrB,EAAoC+D,mBAAS,IAA7C,oBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoDF,oBAAS,GAA7D,oBAAOG,EAAP,KAA2BC,EAA3B,KAMMC,EAAcJ,EAAWrC,cACzBzB,GACE,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMuE,QAAO,SAAClE,GAAD,OAAOA,EAAEzB,KAAKiD,cAAc2C,SAASF,QAAiB,GAEvEnD,qBAAU,WACNlB,GAASmB,QAAQnB,MAAMA,KACxB,CAACA,IAEJ,IAIMwE,EAAa,WACfJ,GAAsB,IAG1B,OACI,qCACI,eAAC,EAAD,WACI,cAAC,EAAWpK,MAAZ,CAAkBjB,KAAMI,IAAUc,MAAM,WACxC,cAAC,EAAWG,OAAZ,CACIrB,KAAMwB,IACNF,MAAM,SACNzB,QAfG,WACfwL,GAAsB,SAiBlB,cAAClM,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACd8K,KAAK,WACL7B,OAAO,OAJX,SAMK3C,EACG,cAAC,GAAD,IAEA,qCACI,cAACyE,GAAA,EAAD,CACIC,GAAI,CAAE9G,EAAG,GACT9E,KAAMwB,IACN,aAAW,aACXoE,KAAK,aACLiG,YAAY,gBACZjE,MAAOsD,EACPY,SA/CH,SAACC,GAClBZ,EAAcY,EAAEC,OAAOpE,UAgDP,cAAC,GAAD,CAAmBR,OAAQA,IAC3B,cAAC,GAAD,CACI+C,OAAQiB,EACRd,YAAamB,EAFjB,SAII,cAAC,GAAD,CAAkBnB,YAAamB,eC7D9CQ,GAAS,kBAClB,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC9M,EAAA,EAAD,CACIO,QAAQ,OACRkB,cAAc,SACdsL,UAAU,OACVrC,OAAO,OAJX,SAMI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOsC,KAAK,UAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,oBAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,UACI,cAAC,EAAD,e,UCrBPC,GAAmB,SAAC,GAAD,IAAGhO,EAAH,EAAGA,SAAH,OAC5B,cAACiO,GAAA,EAAD,CAAeC,UAAU,QAAQC,YAAY,cAA7C,SACKnO,KCFHoO,GAAOjO,YAAOkO,IAAPlO,CAAH,kGAMGmO,GAAM,kBACf,cAAC,GAAD,UACI,cAAC,EAAD,UACI,cAACvN,EAAA,EAAD,CAAK0K,OAAO,OAAOzK,GAAG,aAAa8M,UAAU,OAA7C,SACI,cAACM,GAAD,UACI,cAAC,GAAD,aCFLG,GAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.1f34ea1d.chunk.js","sourcesContent":["import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n    uri: 'https://www.dnd5eapi.co/graphql',\n    cache: new InMemoryCache(),\n});\n\ninterface GraphProviderProps {\n    children?: React.ReactNode;\n}\n\nexport const GraphProvider = ({ children }: GraphProviderProps) => (\n    <ApolloProvider client={client}>{children}</ApolloProvider>\n);\n","import styled from 'styled-components';\n\nexport const UnstyledButton = styled.button`\n    display: inline-block;\n    text-decoration: none;\n    color: inherit;\n    background: none;\n    border: none;\n    padding: 0;\n    font: inherit;\n    outline: inherit;\n`;\n","import { Box, themeGet, StyledOcticon } from '@primer/components';\nimport { ChevronLeftIcon, RepoIcon } from '@primer/octicons-react';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { UnstyledButton } from '../components/buttons/UnstyledButton';\nimport styled from 'styled-components';\n\nconst LogoLink = styled(Link)`\n    font-weight: bold;\n    text-decoration: inherit;\n    color: ${themeGet('colors.fg.subtle')};\n`;\n\nconst BackBtn = styled(UnstyledButton)`\n    position: absolute;\n    left: 16px;\n    top: 8px;\n    color: ${themeGet('colors.fg.default')};\n    display: inline-flex;\n    align-items: center;\n`;\n\nexport const AppHeader = () => {\n    const history = useHistory();\n    const location = useLocation();\n\n    const showBtn = location.pathname !== '/';\n\n    return (\n        <Box\n            bg=\"#171c23\"\n            pl={4}\n            pr={4}\n            pt={2}\n            pb={2}\n            justifyContent=\"center\"\n            display=\"flex\"\n            alignItems=\"center\"\n            fontWeight={500}\n        >\n            {showBtn && (\n                <BackBtn onClick={() => history.goBack()}>\n                    <StyledOcticon icon={ChevronLeftIcon} size={17} />\n                    <span>Back</span>\n                </BackBtn>\n            )}\n            <LogoLink to=\"/\">\n                <StyledOcticon icon={RepoIcon} size={16} mr={1} />\n                <span>D&D Companion</span>\n            </LogoLink>\n        </Box>\n    );\n};\n","import { themeGet } from '@primer/components';\nimport styled from 'styled-components';\n\nexport const ListItem = styled.li`\n    &:not(:last-child) {\n        border-bottom: 1px solid ${themeGet('colors.border.muted')};\n    }\n`;\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n","import { Box } from '@primer/components';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { List, ListItem } from '../../components/spells/list/List';\n\nconst HomePageLink = styled(Box)`\n    display: block;\n    color: inherit;\n    text-decoration: inherit;\n\n    &:active,\n    &:hover {\n        background-color: #eee;\n    }\n`;\n\nexport const HomePage = () => (\n    <Box display=\"flex\" flexDirection=\"column\">\n        <List>\n            <ListItem>\n                <HomePageLink as={Link} to=\"/spellbooks\" p={4}>\n                    Spellbooks\n                </HomePageLink>\n            </ListItem>\n            <ListItem>\n                <HomePageLink as={Link} to=\"/spells\" p={4}>\n                    Spells reference\n                </HomePageLink>\n            </ListItem>\n        </List>\n    </Box>\n);\n","import { Box, Heading, StyledOcticon, themeGet } from '@primer/components';\nimport { SearchIcon } from '@primer/octicons-react';\nimport styled from 'styled-components';\nimport { UnstyledButton } from '../components/buttons/UnstyledButton';\n\ninterface PageHeaderProps {\n    children?: React.ReactNode;\n}\n\nexport const PageHeader = ({ children }: PageHeaderProps) => (\n    <Box\n        bg=\"canvas.inset\"\n        boxShadow=\"shadow.small\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n    >\n        {children}\n    </Box>\n);\n\ninterface PageHeaderTitleProps {\n    icon?: React.ElementType;\n    title: string;\n}\n\nPageHeader.Title = ({ icon, title }: PageHeaderTitleProps) => (\n    <Heading fontSize={3} fontWeight={600} p={4}>\n        {icon && <StyledOcticon icon={icon} size={24} mr={1} />}\n        <span>{title}</span>\n    </Heading>\n);\n\ninterface PageHeaderActionProp {\n    icon?: React.ElementType;\n    label: string;\n    onClick: () => void;\n}\n\nPageHeader.Action = ({ icon, label, onClick }: PageHeaderActionProp) => (\n    <ActionButton onClick={onClick}>\n        {icon && (\n            <StyledOcticon\n                icon={SearchIcon}\n                size={24}\n                mr={1}\n                aria-label={label}\n            />\n        )}\n    </ActionButton>\n);\n\nconst ActionButton = styled(UnstyledButton)`\n    padding: 24px;\n    &:active {\n        background-color: ${themeGet('colors.canvas.subtle')};\n    }\n`;\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n    [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n    [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n    [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n    JSON: any;\n    /** The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field. */\n    MongoID: any;\n    /** The string representation of JavaScript regexp. You may provide it with flags \"/^abc.*\\/i\" or without flags like \"^abc.*\". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */\n    RegExpAsString: any;\n};\n\nexport type AbilityScore = {\n    __typename?: 'AbilityScore';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    full_name?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    skills: Array<Skill>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type AbilityScoreSkillsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySkillInput>;\n};\n\nexport type Alignment = {\n    __typename?: 'Alignment';\n    _id: Scalars['String'];\n    abbreviation?: Maybe<Scalars['String']>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Background = {\n    __typename?: 'Background';\n    _id: Scalars['String'];\n    bonds?: Maybe<BackgroundBonds>;\n    feature?: Maybe<BackgroundFeature>;\n    flaws?: Maybe<BackgroundFlaws>;\n    ideals?: Maybe<BackgroundIdeals>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<BackgroundLanguage_Options>;\n    name?: Maybe<Scalars['String']>;\n    personality_traits?: Maybe<BackgroundPersonality_Traits>;\n    starting_equipment?: Maybe<Array<Maybe<BackgroundStarting_Equipment>>>;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<BackgroundStarting_Equipment_Options>>\n    >;\n    starting_proficiencies: Array<Proficiency>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundStarting_ProficienciesArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyProficiencyInput>;\n};\n\nexport type BackgroundBonds = {\n    __typename?: 'BackgroundBonds';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundFeature = {\n    __typename?: 'BackgroundFeature';\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundFlaws = {\n    __typename?: 'BackgroundFlaws';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundIdeals = {\n    __typename?: 'BackgroundIdeals';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<BackgroundIdealsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundIdealsFrom = {\n    __typename?: 'BackgroundIdealsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    alignments?: Maybe<Array<Maybe<BackgroundIdealsFromAlignments>>>;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundIdealsFromAlignments = {\n    __typename?: 'BackgroundIdealsFromAlignments';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundLanguage_Options = {\n    __typename?: 'BackgroundLanguage_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<BackgroundLanguage_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundLanguage_OptionsFrom = {\n    __typename?: 'BackgroundLanguage_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundPersonality_Traits = {\n    __typename?: 'BackgroundPersonality_traits';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundStarting_Equipment = {\n    __typename?: 'BackgroundStarting_equipment';\n    equipment?: Maybe<BackgroundStarting_EquipmentEquipment>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type BackgroundStarting_EquipmentEquipment = {\n    __typename?: 'BackgroundStarting_equipmentEquipment';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundStarting_Equipment_Options = {\n    __typename?: 'BackgroundStarting_equipment_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<BackgroundStarting_Equipment_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type BackgroundStarting_Equipment_OptionsFrom = {\n    __typename?: 'BackgroundStarting_equipment_optionsFrom';\n    equipment?: Maybe<BackgroundStarting_Equipment_OptionsFromEquipment>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type BackgroundStarting_Equipment_OptionsFromEquipment = {\n    __typename?: 'BackgroundStarting_equipment_optionsFromEquipment';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Class = {\n    __typename?: 'Class';\n    _id: Scalars['String'];\n    class_levels: Array<Level>;\n    hit_die?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    multi_classing?: Maybe<ClassMulti_Classing>;\n    name?: Maybe<Scalars['String']>;\n    proficiencies: Array<Proficiency>;\n    proficiency_choices?: Maybe<Array<Maybe<ClassProficiency_Choices>>>;\n    saving_throws?: Maybe<Array<Maybe<ClassSaving_Throws>>>;\n    spellcasting?: Maybe<ClassSpellcasting>;\n    spells: Array<Spell>;\n    starting_equipment?: Maybe<Array<Maybe<ClassStarting_Equipment>>>;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<ClassStarting_Equipment_Options>>\n    >;\n    subclasses?: Maybe<Array<Maybe<ClassSubclasses>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassClass_LevelsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyLevelInput>;\n};\n\nexport type ClassProficienciesArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyProficiencyInput>;\n};\n\nexport type ClassSpellsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySpellInput>;\n};\n\nexport type ClassMulti_Classing = {\n    __typename?: 'ClassMulti_classing';\n    prerequisite_options?: Maybe<ClassMulti_ClassingPrerequisite_Options>;\n    prerequisites?: Maybe<Array<Maybe<ClassMulti_ClassingPrerequisites>>>;\n    proficiencies?: Maybe<Array<Maybe<ClassMulti_ClassingProficiencies>>>;\n    proficiency_choices?: Maybe<\n        Array<Maybe<ClassMulti_ClassingProficiency_Choices>>\n    >;\n};\n\nexport type ClassMulti_ClassingPrerequisite_Options = {\n    __typename?: 'ClassMulti_classingPrerequisite_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<ClassMulti_ClassingPrerequisite_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type ClassMulti_ClassingPrerequisite_OptionsFrom = {\n    __typename?: 'ClassMulti_classingPrerequisite_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<ClassMulti_ClassingPrerequisite_OptionsFromAbility_Score>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type ClassMulti_ClassingPrerequisite_OptionsFromAbility_Score = {\n    __typename?: 'ClassMulti_classingPrerequisite_optionsFromAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassMulti_ClassingPrerequisites = {\n    __typename?: 'ClassMulti_classingPrerequisites';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<ClassMulti_ClassingPrerequisitesAbility_Score>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type ClassMulti_ClassingPrerequisitesAbility_Score = {\n    __typename?: 'ClassMulti_classingPrerequisitesAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassMulti_ClassingProficiencies = {\n    __typename?: 'ClassMulti_classingProficiencies';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassMulti_ClassingProficiency_Choices = {\n    __typename?: 'ClassMulti_classingProficiency_choices';\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<ClassMulti_ClassingProficiency_ChoicesFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type ClassMulti_ClassingProficiency_ChoicesFrom = {\n    __typename?: 'ClassMulti_classingProficiency_choicesFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassProficiency_Choices = {\n    __typename?: 'ClassProficiency_choices';\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<ClassProficiency_ChoicesFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type ClassProficiency_ChoicesFrom = {\n    __typename?: 'ClassProficiency_choicesFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassSaving_Throws = {\n    __typename?: 'ClassSaving_throws';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassSpellcasting = {\n    __typename?: 'ClassSpellcasting';\n    info?: Maybe<Array<Maybe<ClassSpellcastingInfo>>>;\n    level?: Maybe<Scalars['Float']>;\n    spellcasting_ability?: Maybe<ClassSpellcastingSpellcasting_Ability>;\n};\n\nexport type ClassSpellcastingInfo = {\n    __typename?: 'ClassSpellcastingInfo';\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type ClassSpellcastingSpellcasting_Ability = {\n    __typename?: 'ClassSpellcastingSpellcasting_ability';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassStarting_Equipment = {\n    __typename?: 'ClassStarting_equipment';\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<ClassStarting_EquipmentEquipment>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type ClassStarting_EquipmentEquipment = {\n    __typename?: 'ClassStarting_equipmentEquipment';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassStarting_Equipment_Options = {\n    __typename?: 'ClassStarting_equipment_options';\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<ClassStarting_Equipment_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type ClassStarting_Equipment_OptionsFrom = {\n    __typename?: 'ClassStarting_equipment_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<ClassStarting_Equipment_OptionsFromEquipment>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type ClassStarting_Equipment_OptionsFromEquipment = {\n    __typename?: 'ClassStarting_equipment_optionsFromEquipment';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ClassSubclasses = {\n    __typename?: 'ClassSubclasses';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Condition = {\n    __typename?: 'Condition';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type DamageType = {\n    __typename?: 'DamageType';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Equipment = {\n    __typename?: 'Equipment';\n    _id: Scalars['String'];\n    armor_category?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<EquipmentArmor_Class>;\n    capacity?: Maybe<Scalars['String']>;\n    category_range?: Maybe<Scalars['String']>;\n    contents?: Maybe<Array<Maybe<EquipmentContents>>>;\n    cost?: Maybe<EquipmentCost>;\n    damage?: Maybe<EquipmentDamage>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<EquipmentEquipment_Category>;\n    gear_category?: Maybe<EquipmentGear_Category>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    properties: Array<WeaponProperty>;\n    quantity?: Maybe<Scalars['Float']>;\n    range?: Maybe<EquipmentRange>;\n    special?: Maybe<Array<Maybe<Scalars['String']>>>;\n    speed?: Maybe<EquipmentSpeed>;\n    stealth_disadvantage?: Maybe<Scalars['Boolean']>;\n    str_minimum?: Maybe<Scalars['Float']>;\n    throw_range?: Maybe<EquipmentThrow_Range>;\n    tool_category?: Maybe<Scalars['String']>;\n    two_handed_damage?: Maybe<EquipmentTwo_Handed_Damage>;\n    url?: Maybe<Scalars['String']>;\n    vehicle_category?: Maybe<Scalars['String']>;\n    weapon_category?: Maybe<Scalars['String']>;\n    weapon_range?: Maybe<Scalars['String']>;\n    weight?: Maybe<Scalars['Float']>;\n};\n\nexport type EquipmentPropertiesArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyWeaponPropertyInput>;\n};\n\nexport type EquipmentArmor_Class = {\n    __typename?: 'EquipmentArmor_class';\n    base?: Maybe<Scalars['Float']>;\n    dex_bonus?: Maybe<Scalars['Boolean']>;\n    max_bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type EquipmentCategory = {\n    __typename?: 'EquipmentCategory';\n    _id: Scalars['String'];\n    equipment: Array<Equipment>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentCategoryEquipmentArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyEquipmentInput>;\n};\n\nexport type EquipmentContents = {\n    __typename?: 'EquipmentContents';\n    _id?: Maybe<Scalars['MongoID']>;\n    item?: Maybe<EquipmentContentsItem>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type EquipmentContentsItem = {\n    __typename?: 'EquipmentContentsItem';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentCost = {\n    __typename?: 'EquipmentCost';\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentDamage = {\n    __typename?: 'EquipmentDamage';\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<EquipmentDamageDamage_Type>;\n};\n\nexport type EquipmentDamageDamage_Type = {\n    __typename?: 'EquipmentDamageDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentEquipment_Category = {\n    __typename?: 'EquipmentEquipment_category';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentGear_Category = {\n    __typename?: 'EquipmentGear_category';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentRange = {\n    __typename?: 'EquipmentRange';\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type EquipmentSpeed = {\n    __typename?: 'EquipmentSpeed';\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type EquipmentThrow_Range = {\n    __typename?: 'EquipmentThrow_range';\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type EquipmentTwo_Handed_Damage = {\n    __typename?: 'EquipmentTwo_handed_damage';\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<EquipmentTwo_Handed_DamageDamage_Type>;\n};\n\nexport type EquipmentTwo_Handed_DamageDamage_Type = {\n    __typename?: 'EquipmentTwo_handed_damageDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Feat = {\n    __typename?: 'Feat';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    prerequisites?: Maybe<Array<Maybe<FeatPrerequisites>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeatPrerequisites = {\n    __typename?: 'FeatPrerequisites';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FeatPrerequisitesAbility_Score>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FeatPrerequisitesAbility_Score = {\n    __typename?: 'FeatPrerequisitesAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Feature = {\n    __typename?: 'Feature';\n    _id: Scalars['String'];\n    choice?: Maybe<FeatureChoice>;\n    class?: Maybe<Class>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    feature_specific?: Maybe<FeatureFeature_Specific>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<FeatureParent>;\n    prerequisites?: Maybe<Array<Maybe<FeaturePrerequisites>>>;\n    reference?: Maybe<Scalars['String']>;\n    subclass?: Maybe<Subclass>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureClassArgs = {\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneClassInput>;\n};\n\nexport type FeatureSubclassArgs = {\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneSubclassInput>;\n};\n\nexport type FeatureChoice = {\n    __typename?: 'FeatureChoice';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FeatureChoiceFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureChoiceFrom = {\n    __typename?: 'FeatureChoiceFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureFeature_Specific = {\n    __typename?: 'FeatureFeature_specific';\n    expertise_options?: Maybe<FeatureFeature_SpecificExpertise_Options>;\n    subfeature_options?: Maybe<FeatureFeature_SpecificSubfeature_Options>;\n};\n\nexport type FeatureFeature_SpecificExpertise_Options = {\n    __typename?: 'FeatureFeature_specificExpertise_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FeatureFeature_SpecificExpertise_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureFeature_SpecificExpertise_OptionsFrom = {\n    __typename?: 'FeatureFeature_specificExpertise_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureFeature_SpecificSubfeature_Options = {\n    __typename?: 'FeatureFeature_specificSubfeature_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FeatureFeature_SpecificSubfeature_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureFeature_SpecificSubfeature_OptionsFrom = {\n    __typename?: 'FeatureFeature_specificSubfeature_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeatureParent = {\n    __typename?: 'FeatureParent';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FeaturePrerequisites = {\n    __typename?: 'FeaturePrerequisites';\n    _id?: Maybe<Scalars['MongoID']>;\n    level?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyAbilityScoreDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAbilityScoreFull_NameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAbilityScoreIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAbilityScoreInput = {\n    AND?: Maybe<Array<FilterFindManyAbilityScoreInput>>;\n    OR?: Maybe<Array<FilterFindManyAbilityScoreInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyAbilityScoreOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    full_name?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    skills?: Maybe<Array<Maybe<FilterFindManyAbilityScoreSkillsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyAbilityScoreNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyAbilityScoreOperatorsInput = {\n    _id?: Maybe<FilterFindManyAbilityScore_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyAbilityScoreDescOperatorsInput>;\n    full_name?: Maybe<FilterFindManyAbilityScoreFull_NameOperatorsInput>;\n    index?: Maybe<FilterFindManyAbilityScoreIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyAbilityScoreNameOperatorsInput>;\n    url?: Maybe<FilterFindManyAbilityScoreUrlOperatorsInput>;\n};\n\nexport type FilterFindManyAbilityScoreSkillsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyAbilityScoreUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAbilityScore_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAlignmentAbbreviationOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAlignmentDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAlignmentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAlignmentInput = {\n    AND?: Maybe<Array<FilterFindManyAlignmentInput>>;\n    OR?: Maybe<Array<FilterFindManyAlignmentInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyAlignmentOperatorsInput>;\n    abbreviation?: Maybe<Scalars['String']>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyAlignmentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyAlignmentOperatorsInput = {\n    _id?: Maybe<FilterFindManyAlignment_IdOperatorsInput>;\n    abbreviation?: Maybe<FilterFindManyAlignmentAbbreviationOperatorsInput>;\n    desc?: Maybe<FilterFindManyAlignmentDescOperatorsInput>;\n    index?: Maybe<FilterFindManyAlignmentIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyAlignmentNameOperatorsInput>;\n    url?: Maybe<FilterFindManyAlignmentUrlOperatorsInput>;\n};\n\nexport type FilterFindManyAlignmentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyAlignment_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundBondsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyBackgroundBondsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundBondsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundBondsOperatorsInput = {\n    choose?: Maybe<FilterFindManyBackgroundBondsChooseOperatorsInput>;\n    from?: Maybe<FilterFindManyBackgroundBondsFromOperatorsInput>;\n    type?: Maybe<FilterFindManyBackgroundBondsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundBondsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundFeatureDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundFeatureInput = {\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundFeatureNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundFeatureOperatorsInput = {\n    desc?: Maybe<FilterFindManyBackgroundFeatureDescOperatorsInput>;\n    name?: Maybe<FilterFindManyBackgroundFeatureNameOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundFlawsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyBackgroundFlawsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundFlawsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundFlawsOperatorsInput = {\n    choose?: Maybe<FilterFindManyBackgroundFlawsChooseOperatorsInput>;\n    from?: Maybe<FilterFindManyBackgroundFlawsFromOperatorsInput>;\n    type?: Maybe<FilterFindManyBackgroundFlawsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundFlawsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundIdealsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyBackgroundIdealsFromAlignmentsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundIdealsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    alignments?: Maybe<\n        Array<Maybe<FilterFindManyBackgroundIdealsFromAlignmentsInput>>\n    >;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundIdealsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManyBackgroundIdealsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundIdealsOperatorsInput = {\n    choose?: Maybe<FilterFindManyBackgroundIdealsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyBackgroundIdealsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundIdealsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundInput = {\n    AND?: Maybe<Array<FilterFindManyBackgroundInput>>;\n    OR?: Maybe<Array<FilterFindManyBackgroundInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyBackgroundOperatorsInput>;\n    bonds?: Maybe<FilterFindManyBackgroundBondsInput>;\n    feature?: Maybe<FilterFindManyBackgroundFeatureInput>;\n    flaws?: Maybe<FilterFindManyBackgroundFlawsInput>;\n    ideals?: Maybe<FilterFindManyBackgroundIdealsInput>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindManyBackgroundLanguage_OptionsInput>;\n    name?: Maybe<Scalars['String']>;\n    personality_traits?: Maybe<FilterFindManyBackgroundPersonality_TraitsInput>;\n    starting_equipment?: Maybe<\n        Array<Maybe<FilterFindManyBackgroundStarting_EquipmentInput>>\n    >;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<FilterFindManyBackgroundStarting_Equipment_OptionsInput>>\n    >;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindManyBackgroundStarting_ProficienciesInput>>\n    >;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyBackgroundLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyBackgroundLanguage_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyBackgroundLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyBackgroundLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyBackgroundOperatorsInput = {\n    _id?: Maybe<FilterFindManyBackground_IdOperatorsInput>;\n    bonds?: Maybe<FilterFindManyBackgroundBondsOperatorsInput>;\n    feature?: Maybe<FilterFindManyBackgroundFeatureOperatorsInput>;\n    flaws?: Maybe<FilterFindManyBackgroundFlawsOperatorsInput>;\n    ideals?: Maybe<FilterFindManyBackgroundIdealsOperatorsInput>;\n    index?: Maybe<FilterFindManyBackgroundIndexOperatorsInput>;\n    language_options?: Maybe<FilterFindManyBackgroundLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindManyBackgroundNameOperatorsInput>;\n    personality_traits?: Maybe<FilterFindManyBackgroundPersonality_TraitsOperatorsInput>;\n    url?: Maybe<FilterFindManyBackgroundUrlOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundPersonality_TraitsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyBackgroundPersonality_TraitsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundPersonality_TraitsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundPersonality_TraitsOperatorsInput = {\n    choose?: Maybe<FilterFindManyBackgroundPersonality_TraitsChooseOperatorsInput>;\n    from?: Maybe<FilterFindManyBackgroundPersonality_TraitsFromOperatorsInput>;\n    type?: Maybe<FilterFindManyBackgroundPersonality_TraitsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyBackgroundPersonality_TraitsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackgroundStarting_EquipmentEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundStarting_EquipmentInput = {\n    equipment?: Maybe<FilterFindManyBackgroundStarting_EquipmentEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyBackgroundStarting_Equipment_OptionsFromEquipmentInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindManyBackgroundStarting_Equipment_OptionsFromInput = {\n    equipment?: Maybe<FilterFindManyBackgroundStarting_Equipment_OptionsFromEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyBackgroundStarting_Equipment_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindManyBackgroundStarting_Equipment_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyBackgroundUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyBackground_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyClassClass_LevelsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyClassHit_DieOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyClassInput = {\n    AND?: Maybe<Array<FilterFindManyClassInput>>;\n    OR?: Maybe<Array<FilterFindManyClassInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyClassOperatorsInput>;\n    class_levels?: Maybe<Scalars['String']>;\n    hit_die?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    multi_classing?: Maybe<FilterFindManyClassMulti_ClassingInput>;\n    name?: Maybe<Scalars['String']>;\n    proficiencies?: Maybe<Array<Maybe<FilterFindManyClassProficienciesInput>>>;\n    proficiency_choices?: Maybe<\n        Array<Maybe<FilterFindManyClassProficiency_ChoicesInput>>\n    >;\n    saving_throws?: Maybe<Array<Maybe<FilterFindManyClassSaving_ThrowsInput>>>;\n    spellcasting?: Maybe<FilterFindManyClassSpellcastingInput>;\n    spells?: Maybe<Scalars['String']>;\n    starting_equipment?: Maybe<\n        Array<Maybe<FilterFindManyClassStarting_EquipmentInput>>\n    >;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<FilterFindManyClassStarting_Equipment_OptionsInput>>\n    >;\n    subclasses?: Maybe<Array<Maybe<FilterFindManyClassSubclassesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingInput = {\n    prerequisite_options?: Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsInput>;\n    prerequisites?: Maybe<\n        Array<Maybe<FilterFindManyClassMulti_ClassingPrerequisitesInput>>\n    >;\n    proficiencies?: Maybe<\n        Array<Maybe<FilterFindManyClassMulti_ClassingProficienciesInput>>\n    >;\n    proficiency_choices?: Maybe<\n        Array<Maybe<FilterFindManyClassMulti_ClassingProficiency_ChoicesInput>>\n    >;\n};\n\nexport type FilterFindManyClassMulti_ClassingOperatorsInput = {\n    prerequisite_options?: Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsOperatorsInput>;\n};\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsFromAbility_ScoreInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsFromAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindManyClassMulti_ClassingPrerequisite_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindManyClassMulti_ClassingPrerequisite_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyClassMulti_ClassingPrerequisitesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManyClassMulti_ClassingPrerequisitesAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassMulti_ClassingProficiency_ChoicesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindManyClassMulti_ClassingProficiency_ChoicesFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyClassOperatorsInput = {\n    _id?: Maybe<FilterFindManyClass_IdOperatorsInput>;\n    class_levels?: Maybe<FilterFindManyClassClass_LevelsOperatorsInput>;\n    hit_die?: Maybe<FilterFindManyClassHit_DieOperatorsInput>;\n    index?: Maybe<FilterFindManyClassIndexOperatorsInput>;\n    multi_classing?: Maybe<FilterFindManyClassMulti_ClassingOperatorsInput>;\n    name?: Maybe<FilterFindManyClassNameOperatorsInput>;\n    spellcasting?: Maybe<FilterFindManyClassSpellcastingOperatorsInput>;\n    spells?: Maybe<FilterFindManyClassSpellsOperatorsInput>;\n    url?: Maybe<FilterFindManyClassUrlOperatorsInput>;\n};\n\nexport type FilterFindManyClassProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassProficiency_ChoicesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManyClassProficiency_ChoicesFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassSaving_ThrowsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassSpellcastingInfoInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassSpellcastingInput = {\n    info?: Maybe<Array<Maybe<FilterFindManyClassSpellcastingInfoInput>>>;\n    level?: Maybe<Scalars['Float']>;\n    spellcasting_ability?: Maybe<FilterFindManyClassSpellcastingSpellcasting_AbilityInput>;\n};\n\nexport type FilterFindManyClassSpellcastingLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyClassSpellcastingOperatorsInput = {\n    level?: Maybe<FilterFindManyClassSpellcastingLevelOperatorsInput>;\n    spellcasting_ability?: Maybe<FilterFindManyClassSpellcastingSpellcasting_AbilityOperatorsInput>;\n};\n\nexport type FilterFindManyClassSpellcastingSpellcasting_AbilityIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyClassSpellcastingSpellcasting_AbilityInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassSpellcastingSpellcasting_AbilityNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyClassSpellcastingSpellcasting_AbilityOperatorsInput =\n    {\n        index?: Maybe<FilterFindManyClassSpellcastingSpellcasting_AbilityIndexOperatorsInput>;\n        name?: Maybe<FilterFindManyClassSpellcastingSpellcasting_AbilityNameOperatorsInput>;\n        url?: Maybe<FilterFindManyClassSpellcastingSpellcasting_AbilityUrlOperatorsInput>;\n    };\n\nexport type FilterFindManyClassSpellcastingSpellcasting_AbilityUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyClassSpellsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyClassStarting_EquipmentEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassStarting_EquipmentInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<FilterFindManyClassStarting_EquipmentEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyClassStarting_Equipment_OptionsFromEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassStarting_Equipment_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<FilterFindManyClassStarting_Equipment_OptionsFromEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyClassStarting_Equipment_OptionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyClassStarting_Equipment_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassSubclassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyClass_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyConditionDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyConditionIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyConditionInput = {\n    AND?: Maybe<Array<FilterFindManyConditionInput>>;\n    OR?: Maybe<Array<FilterFindManyConditionInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyConditionOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyConditionNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyConditionOperatorsInput = {\n    _id?: Maybe<FilterFindManyCondition_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyConditionDescOperatorsInput>;\n    index?: Maybe<FilterFindManyConditionIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyConditionNameOperatorsInput>;\n    url?: Maybe<FilterFindManyConditionUrlOperatorsInput>;\n};\n\nexport type FilterFindManyConditionUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyCondition_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyDamageTypeDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyDamageTypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyDamageTypeInput = {\n    AND?: Maybe<Array<FilterFindManyDamageTypeInput>>;\n    OR?: Maybe<Array<FilterFindManyDamageTypeInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyDamageTypeOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyDamageTypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyDamageTypeOperatorsInput = {\n    _id?: Maybe<FilterFindManyDamageType_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyDamageTypeDescOperatorsInput>;\n    index?: Maybe<FilterFindManyDamageTypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyDamageTypeNameOperatorsInput>;\n    url?: Maybe<FilterFindManyDamageTypeUrlOperatorsInput>;\n};\n\nexport type FilterFindManyDamageTypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyDamageType_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentArmor_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentArmor_ClassBaseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentArmor_ClassDex_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindManyEquipmentArmor_ClassInput = {\n    base?: Maybe<Scalars['Float']>;\n    dex_bonus?: Maybe<Scalars['Boolean']>;\n    max_bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyEquipmentArmor_ClassMax_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentArmor_ClassOperatorsInput = {\n    base?: Maybe<FilterFindManyEquipmentArmor_ClassBaseOperatorsInput>;\n    dex_bonus?: Maybe<FilterFindManyEquipmentArmor_ClassDex_BonusOperatorsInput>;\n    max_bonus?: Maybe<FilterFindManyEquipmentArmor_ClassMax_BonusOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentCapacityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentCategoryEquipmentInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentCategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentCategoryInput = {\n    AND?: Maybe<Array<FilterFindManyEquipmentCategoryInput>>;\n    OR?: Maybe<Array<FilterFindManyEquipmentCategoryInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyEquipmentCategoryOperatorsInput>;\n    equipment?: Maybe<\n        Array<Maybe<FilterFindManyEquipmentCategoryEquipmentInput>>\n    >;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentCategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyEquipmentCategoryOperatorsInput = {\n    _id?: Maybe<FilterFindManyEquipmentCategory_IdOperatorsInput>;\n    index?: Maybe<FilterFindManyEquipmentCategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyEquipmentCategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindManyEquipmentCategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentCategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentCategory_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentCategory_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentContentsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    item?: Maybe<FilterFindManyEquipmentContentsItemInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyEquipmentContentsItemInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentCostInput = {\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentCostOperatorsInput = {\n    quantity?: Maybe<FilterFindManyEquipmentCostQuantityOperatorsInput>;\n    unit?: Maybe<FilterFindManyEquipmentCostUnitOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentCostQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentCostUnitOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_DiceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_TypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_TypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_TypeOperatorsInput = {\n    index?: Maybe<FilterFindManyEquipmentDamageDamage_TypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyEquipmentDamageDamage_TypeNameOperatorsInput>;\n    url?: Maybe<FilterFindManyEquipmentDamageDamage_TypeUrlOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentDamageDamage_TypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentDamageInput = {\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindManyEquipmentDamageDamage_TypeInput>;\n};\n\nexport type FilterFindManyEquipmentDamageOperatorsInput = {\n    damage_dice?: Maybe<FilterFindManyEquipmentDamageDamage_DiceOperatorsInput>;\n    damage_type?: Maybe<FilterFindManyEquipmentDamageDamage_TypeOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentEquipment_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentEquipment_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentEquipment_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentEquipment_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindManyEquipmentEquipment_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyEquipmentEquipment_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindManyEquipmentEquipment_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentEquipment_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentGear_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentGear_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentGear_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentGear_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindManyEquipmentGear_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyEquipmentGear_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindManyEquipmentGear_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentGear_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentInput = {\n    AND?: Maybe<Array<FilterFindManyEquipmentInput>>;\n    OR?: Maybe<Array<FilterFindManyEquipmentInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyEquipmentOperatorsInput>;\n    armor_category?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<FilterFindManyEquipmentArmor_ClassInput>;\n    capacity?: Maybe<Scalars['String']>;\n    category_range?: Maybe<Scalars['String']>;\n    contents?: Maybe<Array<Maybe<FilterFindManyEquipmentContentsInput>>>;\n    cost?: Maybe<FilterFindManyEquipmentCostInput>;\n    damage?: Maybe<FilterFindManyEquipmentDamageInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<FilterFindManyEquipmentEquipment_CategoryInput>;\n    gear_category?: Maybe<FilterFindManyEquipmentGear_CategoryInput>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    properties?: Maybe<Array<Maybe<FilterFindManyEquipmentPropertiesInput>>>;\n    quantity?: Maybe<Scalars['Float']>;\n    range?: Maybe<FilterFindManyEquipmentRangeInput>;\n    special?: Maybe<Array<Maybe<Scalars['String']>>>;\n    speed?: Maybe<FilterFindManyEquipmentSpeedInput>;\n    stealth_disadvantage?: Maybe<Scalars['Boolean']>;\n    str_minimum?: Maybe<Scalars['Float']>;\n    throw_range?: Maybe<FilterFindManyEquipmentThrow_RangeInput>;\n    tool_category?: Maybe<Scalars['String']>;\n    two_handed_damage?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageInput>;\n    url?: Maybe<Scalars['String']>;\n    vehicle_category?: Maybe<Scalars['String']>;\n    weapon_category?: Maybe<Scalars['String']>;\n    weapon_range?: Maybe<Scalars['String']>;\n    weight?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyEquipmentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyEquipmentOperatorsInput = {\n    _id?: Maybe<FilterFindManyEquipment_IdOperatorsInput>;\n    armor_category?: Maybe<FilterFindManyEquipmentArmor_CategoryOperatorsInput>;\n    armor_class?: Maybe<FilterFindManyEquipmentArmor_ClassOperatorsInput>;\n    capacity?: Maybe<FilterFindManyEquipmentCapacityOperatorsInput>;\n    category_range?: Maybe<FilterFindManyEquipmentCategory_RangeOperatorsInput>;\n    cost?: Maybe<FilterFindManyEquipmentCostOperatorsInput>;\n    damage?: Maybe<FilterFindManyEquipmentDamageOperatorsInput>;\n    desc?: Maybe<FilterFindManyEquipmentDescOperatorsInput>;\n    equipment_category?: Maybe<FilterFindManyEquipmentEquipment_CategoryOperatorsInput>;\n    gear_category?: Maybe<FilterFindManyEquipmentGear_CategoryOperatorsInput>;\n    index?: Maybe<FilterFindManyEquipmentIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyEquipmentNameOperatorsInput>;\n    quantity?: Maybe<FilterFindManyEquipmentQuantityOperatorsInput>;\n    range?: Maybe<FilterFindManyEquipmentRangeOperatorsInput>;\n    special?: Maybe<FilterFindManyEquipmentSpecialOperatorsInput>;\n    speed?: Maybe<FilterFindManyEquipmentSpeedOperatorsInput>;\n    stealth_disadvantage?: Maybe<FilterFindManyEquipmentStealth_DisadvantageOperatorsInput>;\n    str_minimum?: Maybe<FilterFindManyEquipmentStr_MinimumOperatorsInput>;\n    throw_range?: Maybe<FilterFindManyEquipmentThrow_RangeOperatorsInput>;\n    tool_category?: Maybe<FilterFindManyEquipmentTool_CategoryOperatorsInput>;\n    two_handed_damage?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageOperatorsInput>;\n    url?: Maybe<FilterFindManyEquipmentUrlOperatorsInput>;\n    vehicle_category?: Maybe<FilterFindManyEquipmentVehicle_CategoryOperatorsInput>;\n    weapon_category?: Maybe<FilterFindManyEquipmentWeapon_CategoryOperatorsInput>;\n    weapon_range?: Maybe<FilterFindManyEquipmentWeapon_RangeOperatorsInput>;\n    weight?: Maybe<FilterFindManyEquipmentWeightOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentPropertiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentRangeInput = {\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyEquipmentRangeLongOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentRangeNormalOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentRangeOperatorsInput = {\n    long?: Maybe<FilterFindManyEquipmentRangeLongOperatorsInput>;\n    normal?: Maybe<FilterFindManyEquipmentRangeNormalOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentSpecialOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentSpeedInput = {\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentSpeedOperatorsInput = {\n    quantity?: Maybe<FilterFindManyEquipmentSpeedQuantityOperatorsInput>;\n    unit?: Maybe<FilterFindManyEquipmentSpeedUnitOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentSpeedQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentSpeedUnitOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentStealth_DisadvantageOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindManyEquipmentStr_MinimumOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentThrow_RangeInput = {\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyEquipmentThrow_RangeLongOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentThrow_RangeNormalOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipmentThrow_RangeOperatorsInput = {\n    long?: Maybe<FilterFindManyEquipmentThrow_RangeLongOperatorsInput>;\n    normal?: Maybe<FilterFindManyEquipmentThrow_RangeNormalOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentTool_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_DiceOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeOperatorsInput =\n    {\n        index?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeIndexOperatorsInput>;\n        name?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeNameOperatorsInput>;\n        url?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeUrlOperatorsInput>;\n    };\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageInput = {\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeInput>;\n};\n\nexport type FilterFindManyEquipmentTwo_Handed_DamageOperatorsInput = {\n    damage_dice?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_DiceOperatorsInput>;\n    damage_type?: Maybe<FilterFindManyEquipmentTwo_Handed_DamageDamage_TypeOperatorsInput>;\n};\n\nexport type FilterFindManyEquipmentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentVehicle_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentWeapon_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentWeapon_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyEquipmentWeightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyEquipment_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatInput = {\n    AND?: Maybe<Array<FilterFindManyFeatInput>>;\n    OR?: Maybe<Array<FilterFindManyFeatInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyFeatOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    prerequisites?: Maybe<Array<Maybe<FilterFindManyFeatPrerequisitesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyFeatOperatorsInput = {\n    _id?: Maybe<FilterFindManyFeat_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyFeatDescOperatorsInput>;\n    index?: Maybe<FilterFindManyFeatIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyFeatNameOperatorsInput>;\n    url?: Maybe<FilterFindManyFeatUrlOperatorsInput>;\n};\n\nexport type FilterFindManyFeatPrerequisitesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManyFeatPrerequisitesAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyFeatUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeat_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureChoiceChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyFeatureChoiceFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureChoiceInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManyFeatureChoiceFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureChoiceOperatorsInput = {\n    choose?: Maybe<FilterFindManyFeatureChoiceChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyFeatureChoiceTypeOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureChoiceTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureClassOperatorsInput = {\n    index?: Maybe<FilterFindManyFeatureClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyFeatureClassNameOperatorsInput>;\n    url?: Maybe<FilterFindManyFeatureClassUrlOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificExpertise_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyFeatureFeature_SpecificExpertise_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificExpertise_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindManyFeatureFeature_SpecificExpertise_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificExpertise_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindManyFeatureFeature_SpecificExpertise_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindManyFeatureFeature_SpecificExpertise_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindManyFeatureFeature_SpecificExpertise_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyFeatureFeature_SpecificInput = {\n    expertise_options?: Maybe<FilterFindManyFeatureFeature_SpecificExpertise_OptionsInput>;\n    subfeature_options?: Maybe<FilterFindManyFeatureFeature_SpecificSubfeature_OptionsInput>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificOperatorsInput = {\n    expertise_options?: Maybe<FilterFindManyFeatureFeature_SpecificExpertise_OptionsOperatorsInput>;\n    subfeature_options?: Maybe<FilterFindManyFeatureFeature_SpecificSubfeature_OptionsOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificSubfeature_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyFeatureFeature_SpecificSubfeature_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificSubfeature_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindManyFeatureFeature_SpecificSubfeature_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureFeature_SpecificSubfeature_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindManyFeatureFeature_SpecificSubfeature_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindManyFeatureFeature_SpecificSubfeature_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindManyFeatureFeature_SpecificSubfeature_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyFeatureIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureInput = {\n    AND?: Maybe<Array<FilterFindManyFeatureInput>>;\n    OR?: Maybe<Array<FilterFindManyFeatureInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyFeatureOperatorsInput>;\n    choice?: Maybe<FilterFindManyFeatureChoiceInput>;\n    class?: Maybe<FilterFindManyFeatureClassInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    feature_specific?: Maybe<FilterFindManyFeatureFeature_SpecificInput>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<FilterFindManyFeatureParentInput>;\n    prerequisites?: Maybe<\n        Array<Maybe<FilterFindManyFeaturePrerequisitesInput>>\n    >;\n    reference?: Maybe<Scalars['String']>;\n    subclass?: Maybe<FilterFindManyFeatureSubclassInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyFeatureNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyFeatureOperatorsInput = {\n    _id?: Maybe<FilterFindManyFeature_IdOperatorsInput>;\n    choice?: Maybe<FilterFindManyFeatureChoiceOperatorsInput>;\n    class?: Maybe<FilterFindManyFeatureClassOperatorsInput>;\n    desc?: Maybe<FilterFindManyFeatureDescOperatorsInput>;\n    feature_specific?: Maybe<FilterFindManyFeatureFeature_SpecificOperatorsInput>;\n    index?: Maybe<FilterFindManyFeatureIndexOperatorsInput>;\n    level?: Maybe<FilterFindManyFeatureLevelOperatorsInput>;\n    name?: Maybe<FilterFindManyFeatureNameOperatorsInput>;\n    parent?: Maybe<FilterFindManyFeatureParentOperatorsInput>;\n    reference?: Maybe<FilterFindManyFeatureReferenceOperatorsInput>;\n    subclass?: Maybe<FilterFindManyFeatureSubclassOperatorsInput>;\n    url?: Maybe<FilterFindManyFeatureUrlOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureParentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureParentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureParentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureParentOperatorsInput = {\n    index?: Maybe<FilterFindManyFeatureParentIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyFeatureParentNameOperatorsInput>;\n    url?: Maybe<FilterFindManyFeatureParentUrlOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureParentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeaturePrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    level?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureReferenceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureSubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureSubclassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyFeatureSubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureSubclassOperatorsInput = {\n    index?: Maybe<FilterFindManyFeatureSubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyFeatureSubclassNameOperatorsInput>;\n    url?: Maybe<FilterFindManyFeatureSubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindManyFeatureSubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeatureUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyFeature_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageInput = {\n    AND?: Maybe<Array<FilterFindManyLanguageInput>>;\n    OR?: Maybe<Array<FilterFindManyLanguageInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyLanguageOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    script?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    typical_speakers?: Maybe<Array<Maybe<Scalars['String']>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyLanguageNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyLanguageOperatorsInput = {\n    _id?: Maybe<FilterFindManyLanguage_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyLanguageDescOperatorsInput>;\n    index?: Maybe<FilterFindManyLanguageIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyLanguageNameOperatorsInput>;\n    script?: Maybe<FilterFindManyLanguageScriptOperatorsInput>;\n    type?: Maybe<FilterFindManyLanguageTypeOperatorsInput>;\n    typical_speakers?: Maybe<FilterFindManyLanguageTypical_SpeakersOperatorsInput>;\n    url?: Maybe<FilterFindManyLanguageUrlOperatorsInput>;\n};\n\nexport type FilterFindManyLanguageScriptOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageTypical_SpeakersOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguageUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLanguage_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelAbility_Score_BonusesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyLevelClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelClassOperatorsInput = {\n    index?: Maybe<FilterFindManyLevelClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyLevelClassNameOperatorsInput>;\n    url?: Maybe<FilterFindManyLevelClassUrlOperatorsInput>;\n};\n\nexport type FilterFindManyLevelClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelClass_SpecificAction_SurgesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificArcane_Recovery_LevelsOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificAura_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificBardic_Inspiration_DieOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificBrutal_Critical_DiceOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificChannel_Divinity_ChargesOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificCreating_Spell_SlotsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    sorcery_point_cost?: Maybe<Scalars['Float']>;\n    spell_slot_level?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyLevelClass_SpecificDestroy_Undead_CrOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificExtra_AttacksOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificFavored_EnemiesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificFavored_TerrainOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificIndomitable_UsesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificInput = {\n    action_surges?: Maybe<Scalars['Float']>;\n    arcane_recovery_levels?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n    bardic_inspiration_die?: Maybe<Scalars['Float']>;\n    brutal_critical_dice?: Maybe<Scalars['Float']>;\n    channel_divinity_charges?: Maybe<Scalars['Float']>;\n    creating_spell_slots?: Maybe<\n        Array<Maybe<FilterFindManyLevelClass_SpecificCreating_Spell_SlotsInput>>\n    >;\n    destroy_undead_cr?: Maybe<Scalars['Float']>;\n    extra_attacks?: Maybe<Scalars['Float']>;\n    favored_enemies?: Maybe<Scalars['Float']>;\n    favored_terrain?: Maybe<Scalars['Float']>;\n    indomitable_uses?: Maybe<Scalars['Float']>;\n    invocations_known?: Maybe<Scalars['Float']>;\n    ki_points?: Maybe<Scalars['Float']>;\n    magical_secrets_max_5?: Maybe<Scalars['Float']>;\n    magical_secrets_max_7?: Maybe<Scalars['Float']>;\n    magical_secrets_max_9?: Maybe<Scalars['Float']>;\n    martial_arts?: Maybe<FilterFindManyLevelClass_SpecificMartial_ArtsInput>;\n    metamagic_known?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_6?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_7?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_8?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_9?: Maybe<Scalars['Float']>;\n    rage_count?: Maybe<Scalars['Float']>;\n    rage_damage_bonus?: Maybe<Scalars['Float']>;\n    sneak_attack?: Maybe<FilterFindManyLevelClass_SpecificSneak_AttackInput>;\n    song_of_rest_die?: Maybe<Scalars['Float']>;\n    sorcery_points?: Maybe<Scalars['Float']>;\n    unarmored_movement?: Maybe<Scalars['Float']>;\n    wild_shape_fly?: Maybe<Scalars['Boolean']>;\n    wild_shape_max_cr?: Maybe<Scalars['Float']>;\n    wild_shape_swim?: Maybe<Scalars['Boolean']>;\n};\n\nexport type FilterFindManyLevelClass_SpecificInvocations_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificKi_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificMagical_Secrets_Max_5OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMagical_Secrets_Max_7OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMagical_Secrets_Max_9OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMartial_ArtsDice_CountOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMartial_ArtsDice_ValueOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMartial_ArtsInput = {\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyLevelClass_SpecificMartial_ArtsOperatorsInput = {\n    dice_count?: Maybe<FilterFindManyLevelClass_SpecificMartial_ArtsDice_CountOperatorsInput>;\n    dice_value?: Maybe<FilterFindManyLevelClass_SpecificMartial_ArtsDice_ValueOperatorsInput>;\n};\n\nexport type FilterFindManyLevelClass_SpecificMetamagic_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_6OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_7OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_8OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_9OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificOperatorsInput = {\n    action_surges?: Maybe<FilterFindManyLevelClass_SpecificAction_SurgesOperatorsInput>;\n    arcane_recovery_levels?: Maybe<FilterFindManyLevelClass_SpecificArcane_Recovery_LevelsOperatorsInput>;\n    aura_range?: Maybe<FilterFindManyLevelClass_SpecificAura_RangeOperatorsInput>;\n    bardic_inspiration_die?: Maybe<FilterFindManyLevelClass_SpecificBardic_Inspiration_DieOperatorsInput>;\n    brutal_critical_dice?: Maybe<FilterFindManyLevelClass_SpecificBrutal_Critical_DiceOperatorsInput>;\n    channel_divinity_charges?: Maybe<FilterFindManyLevelClass_SpecificChannel_Divinity_ChargesOperatorsInput>;\n    destroy_undead_cr?: Maybe<FilterFindManyLevelClass_SpecificDestroy_Undead_CrOperatorsInput>;\n    extra_attacks?: Maybe<FilterFindManyLevelClass_SpecificExtra_AttacksOperatorsInput>;\n    favored_enemies?: Maybe<FilterFindManyLevelClass_SpecificFavored_EnemiesOperatorsInput>;\n    favored_terrain?: Maybe<FilterFindManyLevelClass_SpecificFavored_TerrainOperatorsInput>;\n    indomitable_uses?: Maybe<FilterFindManyLevelClass_SpecificIndomitable_UsesOperatorsInput>;\n    invocations_known?: Maybe<FilterFindManyLevelClass_SpecificInvocations_KnownOperatorsInput>;\n    ki_points?: Maybe<FilterFindManyLevelClass_SpecificKi_PointsOperatorsInput>;\n    magical_secrets_max_5?: Maybe<FilterFindManyLevelClass_SpecificMagical_Secrets_Max_5OperatorsInput>;\n    magical_secrets_max_7?: Maybe<FilterFindManyLevelClass_SpecificMagical_Secrets_Max_7OperatorsInput>;\n    magical_secrets_max_9?: Maybe<FilterFindManyLevelClass_SpecificMagical_Secrets_Max_9OperatorsInput>;\n    martial_arts?: Maybe<FilterFindManyLevelClass_SpecificMartial_ArtsOperatorsInput>;\n    metamagic_known?: Maybe<FilterFindManyLevelClass_SpecificMetamagic_KnownOperatorsInput>;\n    mystic_arcanum_level_6?: Maybe<FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_6OperatorsInput>;\n    mystic_arcanum_level_7?: Maybe<FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_7OperatorsInput>;\n    mystic_arcanum_level_8?: Maybe<FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_8OperatorsInput>;\n    mystic_arcanum_level_9?: Maybe<FilterFindManyLevelClass_SpecificMystic_Arcanum_Level_9OperatorsInput>;\n    rage_count?: Maybe<FilterFindManyLevelClass_SpecificRage_CountOperatorsInput>;\n    rage_damage_bonus?: Maybe<FilterFindManyLevelClass_SpecificRage_Damage_BonusOperatorsInput>;\n    sneak_attack?: Maybe<FilterFindManyLevelClass_SpecificSneak_AttackOperatorsInput>;\n    song_of_rest_die?: Maybe<FilterFindManyLevelClass_SpecificSong_Of_Rest_DieOperatorsInput>;\n    sorcery_points?: Maybe<FilterFindManyLevelClass_SpecificSorcery_PointsOperatorsInput>;\n    unarmored_movement?: Maybe<FilterFindManyLevelClass_SpecificUnarmored_MovementOperatorsInput>;\n    wild_shape_fly?: Maybe<FilterFindManyLevelClass_SpecificWild_Shape_FlyOperatorsInput>;\n    wild_shape_max_cr?: Maybe<FilterFindManyLevelClass_SpecificWild_Shape_Max_CrOperatorsInput>;\n    wild_shape_swim?: Maybe<FilterFindManyLevelClass_SpecificWild_Shape_SwimOperatorsInput>;\n};\n\nexport type FilterFindManyLevelClass_SpecificRage_CountOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificRage_Damage_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificSneak_AttackDice_CountOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificSneak_AttackDice_ValueOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificSneak_AttackInput = {\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyLevelClass_SpecificSneak_AttackOperatorsInput = {\n    dice_count?: Maybe<FilterFindManyLevelClass_SpecificSneak_AttackDice_CountOperatorsInput>;\n    dice_value?: Maybe<FilterFindManyLevelClass_SpecificSneak_AttackDice_ValueOperatorsInput>;\n};\n\nexport type FilterFindManyLevelClass_SpecificSong_Of_Rest_DieOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificSorcery_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificUnarmored_MovementOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelClass_SpecificWild_Shape_FlyOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificWild_Shape_Max_CrOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelClass_SpecificWild_Shape_SwimOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindManyLevelFeaturesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyLevelIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelInput = {\n    AND?: Maybe<Array<FilterFindManyLevelInput>>;\n    OR?: Maybe<Array<FilterFindManyLevelInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyLevelOperatorsInput>;\n    ability_score_bonuses?: Maybe<Scalars['Float']>;\n    class?: Maybe<FilterFindManyLevelClassInput>;\n    class_specific?: Maybe<FilterFindManyLevelClass_SpecificInput>;\n    features?: Maybe<Array<Maybe<FilterFindManyLevelFeaturesInput>>>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    prof_bonus?: Maybe<Scalars['Float']>;\n    spellcasting?: Maybe<FilterFindManyLevelSpellcastingInput>;\n    subclass?: Maybe<FilterFindManyLevelSubclassInput>;\n    subclass_specific?: Maybe<FilterFindManyLevelSubclass_SpecificInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyLevelLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyLevelOperatorsInput = {\n    _id?: Maybe<FilterFindManyLevel_IdOperatorsInput>;\n    ability_score_bonuses?: Maybe<FilterFindManyLevelAbility_Score_BonusesOperatorsInput>;\n    class?: Maybe<FilterFindManyLevelClassOperatorsInput>;\n    class_specific?: Maybe<FilterFindManyLevelClass_SpecificOperatorsInput>;\n    index?: Maybe<FilterFindManyLevelIndexOperatorsInput>;\n    level?: Maybe<FilterFindManyLevelLevelOperatorsInput>;\n    prof_bonus?: Maybe<FilterFindManyLevelProf_BonusOperatorsInput>;\n    spellcasting?: Maybe<FilterFindManyLevelSpellcastingOperatorsInput>;\n    subclass?: Maybe<FilterFindManyLevelSubclassOperatorsInput>;\n    subclass_specific?: Maybe<FilterFindManyLevelSubclass_SpecificOperatorsInput>;\n    url?: Maybe<FilterFindManyLevelUrlOperatorsInput>;\n};\n\nexport type FilterFindManyLevelProf_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingCantrips_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingInput = {\n    cantrips_known?: Maybe<Scalars['Float']>;\n    spell_slots_level_1?: Maybe<Scalars['Float']>;\n    spell_slots_level_2?: Maybe<Scalars['Float']>;\n    spell_slots_level_3?: Maybe<Scalars['Float']>;\n    spell_slots_level_4?: Maybe<Scalars['Float']>;\n    spell_slots_level_5?: Maybe<Scalars['Float']>;\n    spell_slots_level_6?: Maybe<Scalars['Float']>;\n    spell_slots_level_7?: Maybe<Scalars['Float']>;\n    spell_slots_level_8?: Maybe<Scalars['Float']>;\n    spell_slots_level_9?: Maybe<Scalars['Float']>;\n    spells_known?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyLevelSpellcastingOperatorsInput = {\n    cantrips_known?: Maybe<FilterFindManyLevelSpellcastingCantrips_KnownOperatorsInput>;\n    spell_slots_level_1?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_1OperatorsInput>;\n    spell_slots_level_2?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_2OperatorsInput>;\n    spell_slots_level_3?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_3OperatorsInput>;\n    spell_slots_level_4?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_4OperatorsInput>;\n    spell_slots_level_5?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_5OperatorsInput>;\n    spell_slots_level_6?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_6OperatorsInput>;\n    spell_slots_level_7?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_7OperatorsInput>;\n    spell_slots_level_8?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_8OperatorsInput>;\n    spell_slots_level_9?: Maybe<FilterFindManyLevelSpellcastingSpell_Slots_Level_9OperatorsInput>;\n    spells_known?: Maybe<FilterFindManyLevelSpellcastingSpells_KnownOperatorsInput>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_1OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_2OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_3OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_4OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_5OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_6OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_7OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_8OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpell_Slots_Level_9OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSpellcastingSpells_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelSubclassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyLevelSubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelSubclassOperatorsInput = {\n    index?: Maybe<FilterFindManyLevelSubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyLevelSubclassNameOperatorsInput>;\n    url?: Maybe<FilterFindManyLevelSubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindManyLevelSubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevelSubclass_SpecificAdditional_Magical_Secrets_Max_LvlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyLevelSubclass_SpecificAura_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyLevelSubclass_SpecificInput = {\n    additional_magical_secrets_max_lvl?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyLevelSubclass_SpecificOperatorsInput = {\n    additional_magical_secrets_max_lvl?: Maybe<FilterFindManyLevelSubclass_SpecificAdditional_Magical_Secrets_Max_LvlOperatorsInput>;\n    aura_range?: Maybe<FilterFindManyLevelSubclass_SpecificAura_RangeOperatorsInput>;\n};\n\nexport type FilterFindManyLevelUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyLevel_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemEquipment_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemEquipment_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMagicItemEquipment_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemEquipment_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindManyMagicItemEquipment_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyMagicItemEquipment_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindManyMagicItemEquipment_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindManyMagicItemEquipment_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItemInput = {\n    AND?: Maybe<Array<FilterFindManyMagicItemInput>>;\n    OR?: Maybe<Array<FilterFindManyMagicItemInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyMagicItemOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<FilterFindManyMagicItemEquipment_CategoryInput>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMagicItemNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyMagicItemOperatorsInput = {\n    _id?: Maybe<FilterFindManyMagicItem_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyMagicItemDescOperatorsInput>;\n    equipment_category?: Maybe<FilterFindManyMagicItemEquipment_CategoryOperatorsInput>;\n    index?: Maybe<FilterFindManyMagicItemIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyMagicItemNameOperatorsInput>;\n    url?: Maybe<FilterFindManyMagicItemUrlOperatorsInput>;\n};\n\nexport type FilterFindManyMagicItemUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicItem_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicSchoolDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicSchoolIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicSchoolInput = {\n    AND?: Maybe<Array<FilterFindManyMagicSchoolInput>>;\n    OR?: Maybe<Array<FilterFindManyMagicSchoolInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyMagicSchoolOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMagicSchoolNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyMagicSchoolOperatorsInput = {\n    _id?: Maybe<FilterFindManyMagicSchool_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyMagicSchoolDescOperatorsInput>;\n    index?: Maybe<FilterFindManyMagicSchoolIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyMagicSchoolNameOperatorsInput>;\n    url?: Maybe<FilterFindManyMagicSchoolUrlOperatorsInput>;\n};\n\nexport type FilterFindManyMagicSchoolUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMagicSchool_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterActionsDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterActionsDamageInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindManyMonsterActionsDamageDamage_TypeInput>;\n};\n\nexport type FilterFindManyMonsterActionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    damage?: Maybe<Array<Maybe<FilterFindManyMonsterActionsDamageInput>>>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterAlignmentOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterArmor_ClassOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterChallenge_RatingOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterCharismaOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterCondition_ImmunitiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterConstitutionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterDexterityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterFormsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterHit_DiceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterHit_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterInput = {\n    AND?: Maybe<Array<FilterFindManyMonsterInput>>;\n    OR?: Maybe<Array<FilterFindManyMonsterInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyMonsterOperatorsInput>;\n    actions?: Maybe<Array<Maybe<FilterFindManyMonsterActionsInput>>>;\n    alignment?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<Scalars['Float']>;\n    challenge_rating?: Maybe<Scalars['Float']>;\n    charisma?: Maybe<Scalars['Float']>;\n    condition_immunities?: Maybe<\n        Array<Maybe<FilterFindManyMonsterCondition_ImmunitiesInput>>\n    >;\n    constitution?: Maybe<Scalars['Float']>;\n    damage_immunities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_resistances?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_vulnerabilities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    dexterity?: Maybe<Scalars['Float']>;\n    forms?: Maybe<Array<Maybe<FilterFindManyMonsterFormsInput>>>;\n    hit_dice?: Maybe<Scalars['String']>;\n    hit_points?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    intelligence?: Maybe<Scalars['Float']>;\n    languages?: Maybe<Scalars['String']>;\n    legendary_actions?: Maybe<\n        Array<Maybe<FilterFindManyMonsterLegendary_ActionsInput>>\n    >;\n    name?: Maybe<Scalars['String']>;\n    proficiencies?: Maybe<\n        Array<Maybe<FilterFindManyMonsterProficienciesInput>>\n    >;\n    reactions?: Maybe<Array<Maybe<FilterFindManyMonsterReactionsInput>>>;\n    senses?: Maybe<FilterFindManyMonsterSensesInput>;\n    size?: Maybe<Scalars['String']>;\n    special_abilities?: Maybe<\n        Array<Maybe<FilterFindManyMonsterSpecial_AbilitiesInput>>\n    >;\n    speed?: Maybe<FilterFindManyMonsterSpeedInput>;\n    strength?: Maybe<Scalars['Float']>;\n    subtype?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n    wisdom?: Maybe<Scalars['Float']>;\n    xp?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyMonsterIntelligenceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterLanguagesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterLegendary_ActionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyMonsterOperatorsInput = {\n    _id?: Maybe<FilterFindManyMonster_IdOperatorsInput>;\n    alignment?: Maybe<FilterFindManyMonsterAlignmentOperatorsInput>;\n    armor_class?: Maybe<FilterFindManyMonsterArmor_ClassOperatorsInput>;\n    challenge_rating?: Maybe<FilterFindManyMonsterChallenge_RatingOperatorsInput>;\n    charisma?: Maybe<FilterFindManyMonsterCharismaOperatorsInput>;\n    constitution?: Maybe<FilterFindManyMonsterConstitutionOperatorsInput>;\n    dexterity?: Maybe<FilterFindManyMonsterDexterityOperatorsInput>;\n    hit_dice?: Maybe<FilterFindManyMonsterHit_DiceOperatorsInput>;\n    hit_points?: Maybe<FilterFindManyMonsterHit_PointsOperatorsInput>;\n    index?: Maybe<FilterFindManyMonsterIndexOperatorsInput>;\n    intelligence?: Maybe<FilterFindManyMonsterIntelligenceOperatorsInput>;\n    languages?: Maybe<FilterFindManyMonsterLanguagesOperatorsInput>;\n    name?: Maybe<FilterFindManyMonsterNameOperatorsInput>;\n    senses?: Maybe<FilterFindManyMonsterSensesOperatorsInput>;\n    size?: Maybe<FilterFindManyMonsterSizeOperatorsInput>;\n    speed?: Maybe<FilterFindManyMonsterSpeedOperatorsInput>;\n    strength?: Maybe<FilterFindManyMonsterStrengthOperatorsInput>;\n    subtype?: Maybe<FilterFindManyMonsterSubtypeOperatorsInput>;\n    type?: Maybe<FilterFindManyMonsterTypeOperatorsInput>;\n    url?: Maybe<FilterFindManyMonsterUrlOperatorsInput>;\n    wisdom?: Maybe<FilterFindManyMonsterWisdomOperatorsInput>;\n    xp?: Maybe<FilterFindManyMonsterXpOperatorsInput>;\n};\n\nexport type FilterFindManyMonsterProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    proficiency?: Maybe<FilterFindManyMonsterProficienciesProficiencyInput>;\n    value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyMonsterProficienciesProficiencyInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterReactionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterSensesBlindsightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSensesDarkvisionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSensesInput = {\n    blindsight?: Maybe<Scalars['String']>;\n    darkvision?: Maybe<Scalars['String']>;\n    passive_perception?: Maybe<Scalars['Float']>;\n    tremorsense?: Maybe<Scalars['String']>;\n    truesight?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterSensesOperatorsInput = {\n    blindsight?: Maybe<FilterFindManyMonsterSensesBlindsightOperatorsInput>;\n    darkvision?: Maybe<FilterFindManyMonsterSensesDarkvisionOperatorsInput>;\n    passive_perception?: Maybe<FilterFindManyMonsterSensesPassive_PerceptionOperatorsInput>;\n    tremorsense?: Maybe<FilterFindManyMonsterSensesTremorsenseOperatorsInput>;\n    truesight?: Maybe<FilterFindManyMonsterSensesTruesightOperatorsInput>;\n};\n\nexport type FilterFindManyMonsterSensesPassive_PerceptionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterSensesTremorsenseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSensesTruesightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSizeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSpecial_AbilitiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterSpeedBurrowOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSpeedClimbOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSpeedFlyOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSpeedHoverOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindManyMonsterSpeedInput = {\n    burrow?: Maybe<Scalars['String']>;\n    climb?: Maybe<Scalars['String']>;\n    fly?: Maybe<Scalars['String']>;\n    hover?: Maybe<Scalars['Boolean']>;\n    swim?: Maybe<Scalars['String']>;\n    walk?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyMonsterSpeedOperatorsInput = {\n    burrow?: Maybe<FilterFindManyMonsterSpeedBurrowOperatorsInput>;\n    climb?: Maybe<FilterFindManyMonsterSpeedClimbOperatorsInput>;\n    fly?: Maybe<FilterFindManyMonsterSpeedFlyOperatorsInput>;\n    hover?: Maybe<FilterFindManyMonsterSpeedHoverOperatorsInput>;\n    swim?: Maybe<FilterFindManyMonsterSpeedSwimOperatorsInput>;\n    walk?: Maybe<FilterFindManyMonsterSpeedWalkOperatorsInput>;\n};\n\nexport type FilterFindManyMonsterSpeedSwimOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterSpeedWalkOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterStrengthOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterSubtypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyMonsterWisdomOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonsterXpOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyMonster_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyProficiencyClassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyProficiencyIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyProficiencyInput = {\n    AND?: Maybe<Array<FilterFindManyProficiencyInput>>;\n    OR?: Maybe<Array<FilterFindManyProficiencyInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyProficiencyOperatorsInput>;\n    classes?: Maybe<Array<Maybe<FilterFindManyProficiencyClassesInput>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    races?: Maybe<Array<Maybe<FilterFindManyProficiencyRacesInput>>>;\n    references?: Maybe<Array<Maybe<FilterFindManyProficiencyReferencesInput>>>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyProficiencyNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyProficiencyOperatorsInput = {\n    _id?: Maybe<FilterFindManyProficiency_IdOperatorsInput>;\n    index?: Maybe<FilterFindManyProficiencyIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyProficiencyNameOperatorsInput>;\n    type?: Maybe<FilterFindManyProficiencyTypeOperatorsInput>;\n    url?: Maybe<FilterFindManyProficiencyUrlOperatorsInput>;\n};\n\nexport type FilterFindManyProficiencyRacesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyProficiencyReferencesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyProficiencyTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyProficiencyUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyProficiency_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsFromAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManyRaceAbility_Bonus_OptionsFromAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyRaceAbility_Bonus_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyRaceAbility_Bonus_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyRaceAbility_Bonus_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyRaceAbility_Bonus_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceAbility_BonusesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceAbility_BonusesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManyRaceAbility_BonusesAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManyRaceAgeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceAlignmentOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceInput = {\n    AND?: Maybe<Array<FilterFindManyRaceInput>>;\n    OR?: Maybe<Array<FilterFindManyRaceInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyRaceOperatorsInput>;\n    ability_bonus_options?: Maybe<FilterFindManyRaceAbility_Bonus_OptionsInput>;\n    ability_bonuses?: Maybe<\n        Array<Maybe<FilterFindManyRaceAbility_BonusesInput>>\n    >;\n    age?: Maybe<Scalars['String']>;\n    alignment?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_desc?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindManyRaceLanguage_OptionsInput>;\n    languages?: Maybe<Array<Maybe<FilterFindManyRaceLanguagesInput>>>;\n    name?: Maybe<Scalars['String']>;\n    size?: Maybe<Scalars['String']>;\n    size_description?: Maybe<Scalars['String']>;\n    speed?: Maybe<Scalars['Float']>;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindManyRaceStarting_ProficienciesInput>>\n    >;\n    starting_proficiency_options?: Maybe<FilterFindManyRaceStarting_Proficiency_OptionsInput>;\n    subraces?: Maybe<Array<Maybe<FilterFindManyRaceSubracesInput>>>;\n    traits?: Maybe<Array<Maybe<FilterFindManyRaceTraitsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceLanguage_DescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyRaceLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManyRaceLanguage_OptionsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyRaceLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyRaceLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyRaceLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceLanguagesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyRaceOperatorsInput = {\n    _id?: Maybe<FilterFindManyRace_IdOperatorsInput>;\n    ability_bonus_options?: Maybe<FilterFindManyRaceAbility_Bonus_OptionsOperatorsInput>;\n    age?: Maybe<FilterFindManyRaceAgeOperatorsInput>;\n    alignment?: Maybe<FilterFindManyRaceAlignmentOperatorsInput>;\n    index?: Maybe<FilterFindManyRaceIndexOperatorsInput>;\n    language_desc?: Maybe<FilterFindManyRaceLanguage_DescOperatorsInput>;\n    language_options?: Maybe<FilterFindManyRaceLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindManyRaceNameOperatorsInput>;\n    size?: Maybe<FilterFindManyRaceSizeOperatorsInput>;\n    size_description?: Maybe<FilterFindManyRaceSize_DescriptionOperatorsInput>;\n    speed?: Maybe<FilterFindManyRaceSpeedOperatorsInput>;\n    starting_proficiency_options?: Maybe<FilterFindManyRaceStarting_Proficiency_OptionsOperatorsInput>;\n    url?: Maybe<FilterFindManyRaceUrlOperatorsInput>;\n};\n\nexport type FilterFindManyRaceSizeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceSize_DescriptionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceSpeedOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyRaceStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceStarting_Proficiency_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyRaceStarting_Proficiency_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceStarting_Proficiency_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyRaceStarting_Proficiency_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceStarting_Proficiency_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyRaceStarting_Proficiency_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyRaceStarting_Proficiency_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyRaceStarting_Proficiency_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRaceSubracesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceTraitsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRaceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRace_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleInput = {\n    AND?: Maybe<Array<FilterFindManyRuleInput>>;\n    OR?: Maybe<Array<FilterFindManyRuleInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyRuleOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    subsections?: Maybe<Array<Maybe<FilterFindManyRuleSubsectionsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRuleNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyRuleOperatorsInput = {\n    _id?: Maybe<FilterFindManyRule_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyRuleDescOperatorsInput>;\n    index?: Maybe<FilterFindManyRuleIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyRuleNameOperatorsInput>;\n    url?: Maybe<FilterFindManyRuleUrlOperatorsInput>;\n};\n\nexport type FilterFindManyRuleSectionDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleSectionIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleSectionInput = {\n    AND?: Maybe<Array<FilterFindManyRuleSectionInput>>;\n    OR?: Maybe<Array<FilterFindManyRuleSectionInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyRuleSectionOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRuleSectionNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyRuleSectionOperatorsInput = {\n    _id?: Maybe<FilterFindManyRuleSection_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyRuleSectionDescOperatorsInput>;\n    index?: Maybe<FilterFindManyRuleSectionIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyRuleSectionNameOperatorsInput>;\n    url?: Maybe<FilterFindManyRuleSectionUrlOperatorsInput>;\n};\n\nexport type FilterFindManyRuleSectionUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleSection_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRuleSubsectionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyRuleUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyRule_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillAbility_ScoreIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySkillAbility_ScoreNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillAbility_ScoreOperatorsInput = {\n    index?: Maybe<FilterFindManySkillAbility_ScoreIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySkillAbility_ScoreNameOperatorsInput>;\n    url?: Maybe<FilterFindManySkillAbility_ScoreUrlOperatorsInput>;\n};\n\nexport type FilterFindManySkillAbility_ScoreUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkillInput = {\n    AND?: Maybe<Array<FilterFindManySkillInput>>;\n    OR?: Maybe<Array<FilterFindManySkillInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManySkillOperatorsInput>;\n    ability_score?: Maybe<FilterFindManySkillAbility_ScoreInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySkillNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManySkillOperatorsInput = {\n    _id?: Maybe<FilterFindManySkill_IdOperatorsInput>;\n    ability_score?: Maybe<FilterFindManySkillAbility_ScoreOperatorsInput>;\n    desc?: Maybe<FilterFindManySkillDescOperatorsInput>;\n    index?: Maybe<FilterFindManySkillIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySkillNameOperatorsInput>;\n    url?: Maybe<FilterFindManySkillUrlOperatorsInput>;\n};\n\nexport type FilterFindManySkillUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySkill_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySpellArea_Of_EffectInput = {\n    size?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellClassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellDamageInput = {\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_at_slot_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<FilterFindManySpellDamageDamage_TypeInput>;\n};\n\nexport type FilterFindManySpellDcDc_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellDcInput = {\n    dc_success?: Maybe<Scalars['String']>;\n    dc_type?: Maybe<FilterFindManySpellDcDc_TypeInput>;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellInput = {\n    AND?: Maybe<Array<FilterFindManySpellInput>>;\n    OR?: Maybe<Array<FilterFindManySpellInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManySpellOperatorsInput>;\n    area_of_effect?: Maybe<FilterFindManySpellArea_Of_EffectInput>;\n    attack_type?: Maybe<Scalars['String']>;\n    casting_time?: Maybe<Scalars['String']>;\n    classes?: Maybe<Array<Maybe<FilterFindManySpellClassesInput>>>;\n    components?: Maybe<Array<Maybe<Scalars['String']>>>;\n    concentration?: Maybe<Scalars['Boolean']>;\n    damage?: Maybe<FilterFindManySpellDamageInput>;\n    dc?: Maybe<FilterFindManySpellDcInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    duration?: Maybe<Scalars['String']>;\n    heal_at_slot_level?: Maybe<Scalars['JSON']>;\n    higher_level?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    material?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    range?: Maybe<Scalars['String']>;\n    ritual?: Maybe<Scalars['Boolean']>;\n    school?: Maybe<FilterFindManySpellSchoolInput>;\n    subclasses?: Maybe<Array<Maybe<FilterFindManySpellSubclassesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManySpellOperatorsInput = {\n    _id?: Maybe<FilterFindManySpell_IdOperatorsInput>;\n    school?: Maybe<FilterFindManySpellSchoolOperatorsInput>;\n};\n\nexport type FilterFindManySpellSchoolIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySpellSchoolInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpellSchoolNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySpellSchoolOperatorsInput = {\n    index?: Maybe<FilterFindManySpellSchoolIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySpellSchoolNameOperatorsInput>;\n    url?: Maybe<FilterFindManySpellSchoolUrlOperatorsInput>;\n};\n\nexport type FilterFindManySpellSchoolUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySpellSubclassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySpell_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubclassClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassClassOperatorsInput = {\n    index?: Maybe<FilterFindManySubclassClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySubclassClassNameOperatorsInput>;\n    url?: Maybe<FilterFindManySubclassClassUrlOperatorsInput>;\n};\n\nexport type FilterFindManySubclassClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassInput = {\n    AND?: Maybe<Array<FilterFindManySubclassInput>>;\n    OR?: Maybe<Array<FilterFindManySubclassInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManySubclassOperatorsInput>;\n    class?: Maybe<FilterFindManySubclassClassInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    spells?: Maybe<Array<Maybe<FilterFindManySubclassSpellsInput>>>;\n    subclass_flavor?: Maybe<Scalars['String']>;\n    subclass_levels?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManySubclassOperatorsInput = {\n    _id?: Maybe<FilterFindManySubclass_IdOperatorsInput>;\n    class?: Maybe<FilterFindManySubclassClassOperatorsInput>;\n    desc?: Maybe<FilterFindManySubclassDescOperatorsInput>;\n    index?: Maybe<FilterFindManySubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySubclassNameOperatorsInput>;\n    subclass_flavor?: Maybe<FilterFindManySubclassSubclass_FlavorOperatorsInput>;\n    subclass_levels?: Maybe<FilterFindManySubclassSubclass_LevelsOperatorsInput>;\n    url?: Maybe<FilterFindManySubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindManySubclassSpellsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    prerequisites?: Maybe<\n        Array<Maybe<FilterFindManySubclassSpellsPrerequisitesInput>>\n    >;\n    spell?: Maybe<FilterFindManySubclassSpellsSpellInput>;\n};\n\nexport type FilterFindManySubclassSpellsPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubclassSpellsSpellInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubclassSubclass_FlavorOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassSubclass_LevelsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubclass_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceAbility_BonusesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceAbility_BonusesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindManySubraceAbility_BonusesAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindManySubraceDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceInput = {\n    AND?: Maybe<Array<FilterFindManySubraceInput>>;\n    OR?: Maybe<Array<FilterFindManySubraceInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManySubraceOperatorsInput>;\n    ability_bonuses?: Maybe<\n        Array<Maybe<FilterFindManySubraceAbility_BonusesInput>>\n    >;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindManySubraceLanguage_OptionsInput>;\n    name?: Maybe<Scalars['String']>;\n    race?: Maybe<FilterFindManySubraceRaceInput>;\n    racial_traits?: Maybe<\n        Array<Maybe<FilterFindManySubraceRacial_TraitsInput>>\n    >;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindManySubraceStarting_ProficienciesInput>>\n    >;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManySubraceLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManySubraceLanguage_OptionsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManySubraceLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManySubraceLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManySubraceLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManySubraceOperatorsInput = {\n    _id?: Maybe<FilterFindManySubrace_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManySubraceDescOperatorsInput>;\n    index?: Maybe<FilterFindManySubraceIndexOperatorsInput>;\n    language_options?: Maybe<FilterFindManySubraceLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindManySubraceNameOperatorsInput>;\n    race?: Maybe<FilterFindManySubraceRaceOperatorsInput>;\n    url?: Maybe<FilterFindManySubraceUrlOperatorsInput>;\n};\n\nexport type FilterFindManySubraceRaceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceRaceInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceRaceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceRaceOperatorsInput = {\n    index?: Maybe<FilterFindManySubraceRaceIndexOperatorsInput>;\n    name?: Maybe<FilterFindManySubraceRaceNameOperatorsInput>;\n    url?: Maybe<FilterFindManySubraceRaceUrlOperatorsInput>;\n};\n\nexport type FilterFindManySubraceRaceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubraceRacial_TraitsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManySubraceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManySubrace_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitInput = {\n    AND?: Maybe<Array<FilterFindManyTraitInput>>;\n    OR?: Maybe<Array<FilterFindManyTraitInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyTraitOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<FilterFindManyTraitParentInput>;\n    proficiencies?: Maybe<Array<Maybe<FilterFindManyTraitProficienciesInput>>>;\n    proficiency_choices?: Maybe<FilterFindManyTraitProficiency_ChoicesInput>;\n    races?: Maybe<Array<Maybe<FilterFindManyTraitRacesInput>>>;\n    subraces?: Maybe<Array<Maybe<FilterFindManyTraitSubracesInput>>>;\n    trait_specific?: Maybe<FilterFindManyTraitTrait_SpecificInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyTraitOperatorsInput = {\n    _id?: Maybe<FilterFindManyTrait_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyTraitDescOperatorsInput>;\n    index?: Maybe<FilterFindManyTraitIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyTraitNameOperatorsInput>;\n    parent?: Maybe<FilterFindManyTraitParentOperatorsInput>;\n    proficiency_choices?: Maybe<FilterFindManyTraitProficiency_ChoicesOperatorsInput>;\n    trait_specific?: Maybe<FilterFindManyTraitTrait_SpecificOperatorsInput>;\n    url?: Maybe<FilterFindManyTraitUrlOperatorsInput>;\n};\n\nexport type FilterFindManyTraitParentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitParentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitParentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitParentOperatorsInput = {\n    index?: Maybe<FilterFindManyTraitParentIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyTraitParentNameOperatorsInput>;\n    url?: Maybe<FilterFindManyTraitParentUrlOperatorsInput>;\n};\n\nexport type FilterFindManyTraitParentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitProficiency_ChoicesChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindManyTraitProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitProficiency_ChoicesInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindManyTraitProficiency_ChoicesFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitProficiency_ChoicesOperatorsInput = {\n    choose?: Maybe<FilterFindManyTraitProficiency_ChoicesChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyTraitProficiency_ChoicesTypeOperatorsInput>;\n};\n\nexport type FilterFindManyTraitProficiency_ChoicesTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitRacesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitSubracesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDamageDamage_TypeInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDamageInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDamageDamage_TypeInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeOperatorsInput =\n    {\n        index?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeIndexOperatorsInput>;\n        name?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeNameOperatorsInput>;\n        url?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeUrlOperatorsInput>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcInput = {\n    dc_type?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeInput>;\n    success_type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcOperatorsInput = {\n    dc_type?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcDc_TypeOperatorsInput>;\n    success_type?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcSuccess_TypeOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDcSuccess_TypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponInput = {\n    damage?: Maybe<\n        Array<Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDamageInput>>\n    >;\n    dc?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcInput>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    usage?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponUsageInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponOperatorsInput = {\n    dc?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDcOperatorsInput>;\n    desc?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponDescOperatorsInput>;\n    name?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponNameOperatorsInput>;\n    usage?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponUsageOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponUsageInput = {\n    times?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponUsageOperatorsInput =\n    {\n        times?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponUsageTimesOperatorsInput>;\n        type?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponUsageTypeOperatorsInput>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponUsageTimesOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificBreath_WeaponUsageTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificDamage_TypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificDamage_TypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificDamage_TypeOperatorsInput = {\n    index?: Maybe<FilterFindManyTraitTrait_SpecificDamage_TypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyTraitTrait_SpecificDamage_TypeNameOperatorsInput>;\n    url?: Maybe<FilterFindManyTraitTrait_SpecificDamage_TypeUrlOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificDamage_TypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificInput = {\n    breath_weapon?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponInput>;\n    damage_type?: Maybe<FilterFindManyTraitTrait_SpecificDamage_TypeInput>;\n    spell_options?: Maybe<FilterFindManyTraitTrait_SpecificSpell_OptionsInput>;\n    subtrait_options?: Maybe<FilterFindManyTraitTrait_SpecificSubtrait_OptionsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificOperatorsInput = {\n    breath_weapon?: Maybe<FilterFindManyTraitTrait_SpecificBreath_WeaponOperatorsInput>;\n    damage_type?: Maybe<FilterFindManyTraitTrait_SpecificDamage_TypeOperatorsInput>;\n    spell_options?: Maybe<FilterFindManyTraitTrait_SpecificSpell_OptionsOperatorsInput>;\n    subtrait_options?: Maybe<FilterFindManyTraitTrait_SpecificSubtrait_OptionsOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSpell_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificSpell_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSpell_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyTraitTrait_SpecificSpell_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSpell_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyTraitTrait_SpecificSpell_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyTraitTrait_SpecificSpell_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSpell_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSubtrait_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindManyTraitTrait_SpecificSubtrait_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSubtrait_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindManyTraitTrait_SpecificSubtrait_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSubtrait_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindManyTraitTrait_SpecificSubtrait_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindManyTraitTrait_SpecificSubtrait_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindManyTraitTrait_SpecificSubtrait_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindManyTraitUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyTrait_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyWeaponPropertyDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyWeaponPropertyIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyWeaponPropertyInput = {\n    AND?: Maybe<Array<FilterFindManyWeaponPropertyInput>>;\n    OR?: Maybe<Array<FilterFindManyWeaponPropertyInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindManyWeaponPropertyOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindManyWeaponPropertyNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindManyWeaponPropertyOperatorsInput = {\n    _id?: Maybe<FilterFindManyWeaponProperty_IdOperatorsInput>;\n    desc?: Maybe<FilterFindManyWeaponPropertyDescOperatorsInput>;\n    index?: Maybe<FilterFindManyWeaponPropertyIndexOperatorsInput>;\n    name?: Maybe<FilterFindManyWeaponPropertyNameOperatorsInput>;\n    url?: Maybe<FilterFindManyWeaponPropertyUrlOperatorsInput>;\n};\n\nexport type FilterFindManyWeaponPropertyUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindManyWeaponProperty_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAbilityScoreDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAbilityScoreFull_NameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAbilityScoreIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAbilityScoreInput = {\n    AND?: Maybe<Array<FilterFindOneAbilityScoreInput>>;\n    OR?: Maybe<Array<FilterFindOneAbilityScoreInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneAbilityScoreOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    full_name?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    skills?: Maybe<Array<Maybe<FilterFindOneAbilityScoreSkillsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneAbilityScoreNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneAbilityScoreOperatorsInput = {\n    _id?: Maybe<FilterFindOneAbilityScore_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneAbilityScoreDescOperatorsInput>;\n    full_name?: Maybe<FilterFindOneAbilityScoreFull_NameOperatorsInput>;\n    index?: Maybe<FilterFindOneAbilityScoreIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneAbilityScoreNameOperatorsInput>;\n    url?: Maybe<FilterFindOneAbilityScoreUrlOperatorsInput>;\n};\n\nexport type FilterFindOneAbilityScoreSkillsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneAbilityScoreUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAbilityScore_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAlignmentAbbreviationOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAlignmentDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAlignmentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAlignmentInput = {\n    AND?: Maybe<Array<FilterFindOneAlignmentInput>>;\n    OR?: Maybe<Array<FilterFindOneAlignmentInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneAlignmentOperatorsInput>;\n    abbreviation?: Maybe<Scalars['String']>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneAlignmentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneAlignmentOperatorsInput = {\n    _id?: Maybe<FilterFindOneAlignment_IdOperatorsInput>;\n    abbreviation?: Maybe<FilterFindOneAlignmentAbbreviationOperatorsInput>;\n    desc?: Maybe<FilterFindOneAlignmentDescOperatorsInput>;\n    index?: Maybe<FilterFindOneAlignmentIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneAlignmentNameOperatorsInput>;\n    url?: Maybe<FilterFindOneAlignmentUrlOperatorsInput>;\n};\n\nexport type FilterFindOneAlignmentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneAlignment_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundBondsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneBackgroundBondsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundBondsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundBondsOperatorsInput = {\n    choose?: Maybe<FilterFindOneBackgroundBondsChooseOperatorsInput>;\n    from?: Maybe<FilterFindOneBackgroundBondsFromOperatorsInput>;\n    type?: Maybe<FilterFindOneBackgroundBondsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundBondsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundFeatureDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundFeatureInput = {\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundFeatureNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundFeatureOperatorsInput = {\n    desc?: Maybe<FilterFindOneBackgroundFeatureDescOperatorsInput>;\n    name?: Maybe<FilterFindOneBackgroundFeatureNameOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundFlawsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneBackgroundFlawsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundFlawsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundFlawsOperatorsInput = {\n    choose?: Maybe<FilterFindOneBackgroundFlawsChooseOperatorsInput>;\n    from?: Maybe<FilterFindOneBackgroundFlawsFromOperatorsInput>;\n    type?: Maybe<FilterFindOneBackgroundFlawsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundFlawsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundIdealsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneBackgroundIdealsFromAlignmentsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundIdealsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    alignments?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundIdealsFromAlignmentsInput>>\n    >;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundIdealsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneBackgroundIdealsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundIdealsOperatorsInput = {\n    choose?: Maybe<FilterFindOneBackgroundIdealsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneBackgroundIdealsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundIdealsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundInput = {\n    AND?: Maybe<Array<FilterFindOneBackgroundInput>>;\n    OR?: Maybe<Array<FilterFindOneBackgroundInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneBackgroundOperatorsInput>;\n    bonds?: Maybe<FilterFindOneBackgroundBondsInput>;\n    feature?: Maybe<FilterFindOneBackgroundFeatureInput>;\n    flaws?: Maybe<FilterFindOneBackgroundFlawsInput>;\n    ideals?: Maybe<FilterFindOneBackgroundIdealsInput>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindOneBackgroundLanguage_OptionsInput>;\n    name?: Maybe<Scalars['String']>;\n    personality_traits?: Maybe<FilterFindOneBackgroundPersonality_TraitsInput>;\n    starting_equipment?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundStarting_EquipmentInput>>\n    >;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundStarting_Equipment_OptionsInput>>\n    >;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundStarting_ProficienciesInput>>\n    >;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneBackgroundLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundLanguage_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneBackgroundLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneBackgroundLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneBackgroundOperatorsInput = {\n    _id?: Maybe<FilterFindOneBackground_IdOperatorsInput>;\n    bonds?: Maybe<FilterFindOneBackgroundBondsOperatorsInput>;\n    feature?: Maybe<FilterFindOneBackgroundFeatureOperatorsInput>;\n    flaws?: Maybe<FilterFindOneBackgroundFlawsOperatorsInput>;\n    ideals?: Maybe<FilterFindOneBackgroundIdealsOperatorsInput>;\n    index?: Maybe<FilterFindOneBackgroundIndexOperatorsInput>;\n    language_options?: Maybe<FilterFindOneBackgroundLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindOneBackgroundNameOperatorsInput>;\n    personality_traits?: Maybe<FilterFindOneBackgroundPersonality_TraitsOperatorsInput>;\n    url?: Maybe<FilterFindOneBackgroundUrlOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundPersonality_TraitsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneBackgroundPersonality_TraitsFromOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundPersonality_TraitsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<Scalars['String']>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundPersonality_TraitsOperatorsInput = {\n    choose?: Maybe<FilterFindOneBackgroundPersonality_TraitsChooseOperatorsInput>;\n    from?: Maybe<FilterFindOneBackgroundPersonality_TraitsFromOperatorsInput>;\n    type?: Maybe<FilterFindOneBackgroundPersonality_TraitsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneBackgroundPersonality_TraitsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackgroundStarting_EquipmentEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundStarting_EquipmentInput = {\n    equipment?: Maybe<FilterFindOneBackgroundStarting_EquipmentEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneBackgroundStarting_Equipment_OptionsFromEquipmentInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindOneBackgroundStarting_Equipment_OptionsFromInput = {\n    equipment?: Maybe<FilterFindOneBackgroundStarting_Equipment_OptionsFromEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneBackgroundStarting_Equipment_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneBackgroundStarting_Equipment_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneBackgroundUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneBackground_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneClassClass_LevelsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneClassHit_DieOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneClassInput = {\n    AND?: Maybe<Array<FilterFindOneClassInput>>;\n    OR?: Maybe<Array<FilterFindOneClassInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneClassOperatorsInput>;\n    class_levels?: Maybe<Scalars['String']>;\n    hit_die?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    multi_classing?: Maybe<FilterFindOneClassMulti_ClassingInput>;\n    name?: Maybe<Scalars['String']>;\n    proficiencies?: Maybe<Array<Maybe<FilterFindOneClassProficienciesInput>>>;\n    proficiency_choices?: Maybe<\n        Array<Maybe<FilterFindOneClassProficiency_ChoicesInput>>\n    >;\n    saving_throws?: Maybe<Array<Maybe<FilterFindOneClassSaving_ThrowsInput>>>;\n    spellcasting?: Maybe<FilterFindOneClassSpellcastingInput>;\n    spells?: Maybe<Scalars['String']>;\n    starting_equipment?: Maybe<\n        Array<Maybe<FilterFindOneClassStarting_EquipmentInput>>\n    >;\n    starting_equipment_options?: Maybe<\n        Array<Maybe<FilterFindOneClassStarting_Equipment_OptionsInput>>\n    >;\n    subclasses?: Maybe<Array<Maybe<FilterFindOneClassSubclassesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingInput = {\n    prerequisite_options?: Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsInput>;\n    prerequisites?: Maybe<\n        Array<Maybe<FilterFindOneClassMulti_ClassingPrerequisitesInput>>\n    >;\n    proficiencies?: Maybe<\n        Array<Maybe<FilterFindOneClassMulti_ClassingProficienciesInput>>\n    >;\n    proficiency_choices?: Maybe<\n        Array<Maybe<FilterFindOneClassMulti_ClassingProficiency_ChoicesInput>>\n    >;\n};\n\nexport type FilterFindOneClassMulti_ClassingOperatorsInput = {\n    prerequisite_options?: Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsOperatorsInput>;\n};\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsFromAbility_ScoreInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsFromAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindOneClassMulti_ClassingPrerequisite_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindOneClassMulti_ClassingPrerequisite_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneClassMulti_ClassingPrerequisitesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneClassMulti_ClassingPrerequisitesAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassMulti_ClassingProficiency_ChoicesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindOneClassMulti_ClassingProficiency_ChoicesFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneClassOperatorsInput = {\n    _id?: Maybe<FilterFindOneClass_IdOperatorsInput>;\n    class_levels?: Maybe<FilterFindOneClassClass_LevelsOperatorsInput>;\n    hit_die?: Maybe<FilterFindOneClassHit_DieOperatorsInput>;\n    index?: Maybe<FilterFindOneClassIndexOperatorsInput>;\n    multi_classing?: Maybe<FilterFindOneClassMulti_ClassingOperatorsInput>;\n    name?: Maybe<FilterFindOneClassNameOperatorsInput>;\n    spellcasting?: Maybe<FilterFindOneClassSpellcastingOperatorsInput>;\n    spells?: Maybe<FilterFindOneClassSpellsOperatorsInput>;\n    url?: Maybe<FilterFindOneClassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneClassProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassProficiency_ChoicesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneClassProficiency_ChoicesFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassSaving_ThrowsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassSpellcastingInfoInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassSpellcastingInput = {\n    info?: Maybe<Array<Maybe<FilterFindOneClassSpellcastingInfoInput>>>;\n    level?: Maybe<Scalars['Float']>;\n    spellcasting_ability?: Maybe<FilterFindOneClassSpellcastingSpellcasting_AbilityInput>;\n};\n\nexport type FilterFindOneClassSpellcastingLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneClassSpellcastingOperatorsInput = {\n    level?: Maybe<FilterFindOneClassSpellcastingLevelOperatorsInput>;\n    spellcasting_ability?: Maybe<FilterFindOneClassSpellcastingSpellcasting_AbilityOperatorsInput>;\n};\n\nexport type FilterFindOneClassSpellcastingSpellcasting_AbilityIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneClassSpellcastingSpellcasting_AbilityInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassSpellcastingSpellcasting_AbilityNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneClassSpellcastingSpellcasting_AbilityOperatorsInput = {\n    index?: Maybe<FilterFindOneClassSpellcastingSpellcasting_AbilityIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneClassSpellcastingSpellcasting_AbilityNameOperatorsInput>;\n    url?: Maybe<FilterFindOneClassSpellcastingSpellcasting_AbilityUrlOperatorsInput>;\n};\n\nexport type FilterFindOneClassSpellcastingSpellcasting_AbilityUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneClassSpellsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneClassStarting_EquipmentEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassStarting_EquipmentInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<FilterFindOneClassStarting_EquipmentEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneClassStarting_Equipment_OptionsFromEquipmentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassStarting_Equipment_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    equipment?: Maybe<FilterFindOneClassStarting_Equipment_OptionsFromEquipmentInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneClassStarting_Equipment_OptionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneClassStarting_Equipment_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassSubclassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneClass_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneConditionDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneConditionIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneConditionInput = {\n    AND?: Maybe<Array<FilterFindOneConditionInput>>;\n    OR?: Maybe<Array<FilterFindOneConditionInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneConditionOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneConditionNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneConditionOperatorsInput = {\n    _id?: Maybe<FilterFindOneCondition_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneConditionDescOperatorsInput>;\n    index?: Maybe<FilterFindOneConditionIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneConditionNameOperatorsInput>;\n    url?: Maybe<FilterFindOneConditionUrlOperatorsInput>;\n};\n\nexport type FilterFindOneConditionUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneCondition_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneDamageTypeDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneDamageTypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneDamageTypeInput = {\n    AND?: Maybe<Array<FilterFindOneDamageTypeInput>>;\n    OR?: Maybe<Array<FilterFindOneDamageTypeInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneDamageTypeOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneDamageTypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneDamageTypeOperatorsInput = {\n    _id?: Maybe<FilterFindOneDamageType_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneDamageTypeDescOperatorsInput>;\n    index?: Maybe<FilterFindOneDamageTypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneDamageTypeNameOperatorsInput>;\n    url?: Maybe<FilterFindOneDamageTypeUrlOperatorsInput>;\n};\n\nexport type FilterFindOneDamageTypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneDamageType_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentArmor_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentArmor_ClassBaseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentArmor_ClassDex_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindOneEquipmentArmor_ClassInput = {\n    base?: Maybe<Scalars['Float']>;\n    dex_bonus?: Maybe<Scalars['Boolean']>;\n    max_bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneEquipmentArmor_ClassMax_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentArmor_ClassOperatorsInput = {\n    base?: Maybe<FilterFindOneEquipmentArmor_ClassBaseOperatorsInput>;\n    dex_bonus?: Maybe<FilterFindOneEquipmentArmor_ClassDex_BonusOperatorsInput>;\n    max_bonus?: Maybe<FilterFindOneEquipmentArmor_ClassMax_BonusOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentCapacityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentCategoryEquipmentInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentCategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentCategoryInput = {\n    AND?: Maybe<Array<FilterFindOneEquipmentCategoryInput>>;\n    OR?: Maybe<Array<FilterFindOneEquipmentCategoryInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneEquipmentCategoryOperatorsInput>;\n    equipment?: Maybe<\n        Array<Maybe<FilterFindOneEquipmentCategoryEquipmentInput>>\n    >;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentCategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneEquipmentCategoryOperatorsInput = {\n    _id?: Maybe<FilterFindOneEquipmentCategory_IdOperatorsInput>;\n    index?: Maybe<FilterFindOneEquipmentCategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentCategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentCategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentCategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentCategory_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentCategory_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentContentsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    item?: Maybe<FilterFindOneEquipmentContentsItemInput>;\n    quantity?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneEquipmentContentsItemInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentCostInput = {\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentCostOperatorsInput = {\n    quantity?: Maybe<FilterFindOneEquipmentCostQuantityOperatorsInput>;\n    unit?: Maybe<FilterFindOneEquipmentCostUnitOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentCostQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentCostUnitOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_DiceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_TypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_TypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_TypeOperatorsInput = {\n    index?: Maybe<FilterFindOneEquipmentDamageDamage_TypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentDamageDamage_TypeNameOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentDamageDamage_TypeUrlOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentDamageDamage_TypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentDamageInput = {\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindOneEquipmentDamageDamage_TypeInput>;\n};\n\nexport type FilterFindOneEquipmentDamageOperatorsInput = {\n    damage_dice?: Maybe<FilterFindOneEquipmentDamageDamage_DiceOperatorsInput>;\n    damage_type?: Maybe<FilterFindOneEquipmentDamageDamage_TypeOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentEquipment_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentEquipment_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentEquipment_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentEquipment_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindOneEquipmentEquipment_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentEquipment_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentEquipment_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentEquipment_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentGear_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentGear_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentGear_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentGear_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindOneEquipmentGear_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentGear_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentGear_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentGear_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentInput = {\n    AND?: Maybe<Array<FilterFindOneEquipmentInput>>;\n    OR?: Maybe<Array<FilterFindOneEquipmentInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneEquipmentOperatorsInput>;\n    armor_category?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<FilterFindOneEquipmentArmor_ClassInput>;\n    capacity?: Maybe<Scalars['String']>;\n    category_range?: Maybe<Scalars['String']>;\n    contents?: Maybe<Array<Maybe<FilterFindOneEquipmentContentsInput>>>;\n    cost?: Maybe<FilterFindOneEquipmentCostInput>;\n    damage?: Maybe<FilterFindOneEquipmentDamageInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<FilterFindOneEquipmentEquipment_CategoryInput>;\n    gear_category?: Maybe<FilterFindOneEquipmentGear_CategoryInput>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    properties?: Maybe<Array<Maybe<FilterFindOneEquipmentPropertiesInput>>>;\n    quantity?: Maybe<Scalars['Float']>;\n    range?: Maybe<FilterFindOneEquipmentRangeInput>;\n    special?: Maybe<Array<Maybe<Scalars['String']>>>;\n    speed?: Maybe<FilterFindOneEquipmentSpeedInput>;\n    stealth_disadvantage?: Maybe<Scalars['Boolean']>;\n    str_minimum?: Maybe<Scalars['Float']>;\n    throw_range?: Maybe<FilterFindOneEquipmentThrow_RangeInput>;\n    tool_category?: Maybe<Scalars['String']>;\n    two_handed_damage?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageInput>;\n    url?: Maybe<Scalars['String']>;\n    vehicle_category?: Maybe<Scalars['String']>;\n    weapon_category?: Maybe<Scalars['String']>;\n    weapon_range?: Maybe<Scalars['String']>;\n    weight?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneEquipmentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneEquipmentOperatorsInput = {\n    _id?: Maybe<FilterFindOneEquipment_IdOperatorsInput>;\n    armor_category?: Maybe<FilterFindOneEquipmentArmor_CategoryOperatorsInput>;\n    armor_class?: Maybe<FilterFindOneEquipmentArmor_ClassOperatorsInput>;\n    capacity?: Maybe<FilterFindOneEquipmentCapacityOperatorsInput>;\n    category_range?: Maybe<FilterFindOneEquipmentCategory_RangeOperatorsInput>;\n    cost?: Maybe<FilterFindOneEquipmentCostOperatorsInput>;\n    damage?: Maybe<FilterFindOneEquipmentDamageOperatorsInput>;\n    desc?: Maybe<FilterFindOneEquipmentDescOperatorsInput>;\n    equipment_category?: Maybe<FilterFindOneEquipmentEquipment_CategoryOperatorsInput>;\n    gear_category?: Maybe<FilterFindOneEquipmentGear_CategoryOperatorsInput>;\n    index?: Maybe<FilterFindOneEquipmentIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentNameOperatorsInput>;\n    quantity?: Maybe<FilterFindOneEquipmentQuantityOperatorsInput>;\n    range?: Maybe<FilterFindOneEquipmentRangeOperatorsInput>;\n    special?: Maybe<FilterFindOneEquipmentSpecialOperatorsInput>;\n    speed?: Maybe<FilterFindOneEquipmentSpeedOperatorsInput>;\n    stealth_disadvantage?: Maybe<FilterFindOneEquipmentStealth_DisadvantageOperatorsInput>;\n    str_minimum?: Maybe<FilterFindOneEquipmentStr_MinimumOperatorsInput>;\n    throw_range?: Maybe<FilterFindOneEquipmentThrow_RangeOperatorsInput>;\n    tool_category?: Maybe<FilterFindOneEquipmentTool_CategoryOperatorsInput>;\n    two_handed_damage?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentUrlOperatorsInput>;\n    vehicle_category?: Maybe<FilterFindOneEquipmentVehicle_CategoryOperatorsInput>;\n    weapon_category?: Maybe<FilterFindOneEquipmentWeapon_CategoryOperatorsInput>;\n    weapon_range?: Maybe<FilterFindOneEquipmentWeapon_RangeOperatorsInput>;\n    weight?: Maybe<FilterFindOneEquipmentWeightOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentPropertiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentRangeInput = {\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneEquipmentRangeLongOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentRangeNormalOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentRangeOperatorsInput = {\n    long?: Maybe<FilterFindOneEquipmentRangeLongOperatorsInput>;\n    normal?: Maybe<FilterFindOneEquipmentRangeNormalOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentSpecialOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentSpeedInput = {\n    quantity?: Maybe<Scalars['Float']>;\n    unit?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentSpeedOperatorsInput = {\n    quantity?: Maybe<FilterFindOneEquipmentSpeedQuantityOperatorsInput>;\n    unit?: Maybe<FilterFindOneEquipmentSpeedUnitOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentSpeedQuantityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentSpeedUnitOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentStealth_DisadvantageOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindOneEquipmentStr_MinimumOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentThrow_RangeInput = {\n    long?: Maybe<Scalars['Float']>;\n    normal?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneEquipmentThrow_RangeLongOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentThrow_RangeNormalOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipmentThrow_RangeOperatorsInput = {\n    long?: Maybe<FilterFindOneEquipmentThrow_RangeLongOperatorsInput>;\n    normal?: Maybe<FilterFindOneEquipmentThrow_RangeNormalOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentTool_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_DiceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeOperatorsInput = {\n    index?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeNameOperatorsInput>;\n    url?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeUrlOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageInput = {\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeInput>;\n};\n\nexport type FilterFindOneEquipmentTwo_Handed_DamageOperatorsInput = {\n    damage_dice?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_DiceOperatorsInput>;\n    damage_type?: Maybe<FilterFindOneEquipmentTwo_Handed_DamageDamage_TypeOperatorsInput>;\n};\n\nexport type FilterFindOneEquipmentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentVehicle_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentWeapon_CategoryOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentWeapon_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneEquipmentWeightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneEquipment_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatInput = {\n    AND?: Maybe<Array<FilterFindOneFeatInput>>;\n    OR?: Maybe<Array<FilterFindOneFeatInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneFeatOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    prerequisites?: Maybe<Array<Maybe<FilterFindOneFeatPrerequisitesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneFeatOperatorsInput = {\n    _id?: Maybe<FilterFindOneFeat_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneFeatDescOperatorsInput>;\n    index?: Maybe<FilterFindOneFeatIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneFeatNameOperatorsInput>;\n    url?: Maybe<FilterFindOneFeatUrlOperatorsInput>;\n};\n\nexport type FilterFindOneFeatPrerequisitesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneFeatPrerequisitesAbility_ScoreInput>;\n    minimum_score?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneFeatUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeat_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureChoiceChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneFeatureChoiceFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureChoiceInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneFeatureChoiceFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureChoiceOperatorsInput = {\n    choose?: Maybe<FilterFindOneFeatureChoiceChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneFeatureChoiceTypeOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureChoiceTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureClassOperatorsInput = {\n    index?: Maybe<FilterFindOneFeatureClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneFeatureClassNameOperatorsInput>;\n    url?: Maybe<FilterFindOneFeatureClassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificExpertise_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneFeatureFeature_SpecificExpertise_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificExpertise_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindOneFeatureFeature_SpecificExpertise_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificExpertise_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindOneFeatureFeature_SpecificExpertise_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindOneFeatureFeature_SpecificExpertise_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindOneFeatureFeature_SpecificExpertise_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneFeatureFeature_SpecificInput = {\n    expertise_options?: Maybe<FilterFindOneFeatureFeature_SpecificExpertise_OptionsInput>;\n    subfeature_options?: Maybe<FilterFindOneFeatureFeature_SpecificSubfeature_OptionsInput>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificOperatorsInput = {\n    expertise_options?: Maybe<FilterFindOneFeatureFeature_SpecificExpertise_OptionsOperatorsInput>;\n    subfeature_options?: Maybe<FilterFindOneFeatureFeature_SpecificSubfeature_OptionsOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificSubfeature_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneFeatureFeature_SpecificSubfeature_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificSubfeature_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<\n            Maybe<FilterFindOneFeatureFeature_SpecificSubfeature_OptionsFromInput>\n        >\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureFeature_SpecificSubfeature_OptionsOperatorsInput =\n    {\n        choose?: Maybe<FilterFindOneFeatureFeature_SpecificSubfeature_OptionsChooseOperatorsInput>;\n        type?: Maybe<FilterFindOneFeatureFeature_SpecificSubfeature_OptionsTypeOperatorsInput>;\n    };\n\nexport type FilterFindOneFeatureFeature_SpecificSubfeature_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneFeatureIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureInput = {\n    AND?: Maybe<Array<FilterFindOneFeatureInput>>;\n    OR?: Maybe<Array<FilterFindOneFeatureInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneFeatureOperatorsInput>;\n    choice?: Maybe<FilterFindOneFeatureChoiceInput>;\n    class?: Maybe<FilterFindOneFeatureClassInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    feature_specific?: Maybe<FilterFindOneFeatureFeature_SpecificInput>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<FilterFindOneFeatureParentInput>;\n    prerequisites?: Maybe<Array<Maybe<FilterFindOneFeaturePrerequisitesInput>>>;\n    reference?: Maybe<Scalars['String']>;\n    subclass?: Maybe<FilterFindOneFeatureSubclassInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneFeatureNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneFeatureOperatorsInput = {\n    _id?: Maybe<FilterFindOneFeature_IdOperatorsInput>;\n    choice?: Maybe<FilterFindOneFeatureChoiceOperatorsInput>;\n    class?: Maybe<FilterFindOneFeatureClassOperatorsInput>;\n    desc?: Maybe<FilterFindOneFeatureDescOperatorsInput>;\n    feature_specific?: Maybe<FilterFindOneFeatureFeature_SpecificOperatorsInput>;\n    index?: Maybe<FilterFindOneFeatureIndexOperatorsInput>;\n    level?: Maybe<FilterFindOneFeatureLevelOperatorsInput>;\n    name?: Maybe<FilterFindOneFeatureNameOperatorsInput>;\n    parent?: Maybe<FilterFindOneFeatureParentOperatorsInput>;\n    reference?: Maybe<FilterFindOneFeatureReferenceOperatorsInput>;\n    subclass?: Maybe<FilterFindOneFeatureSubclassOperatorsInput>;\n    url?: Maybe<FilterFindOneFeatureUrlOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureParentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureParentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureParentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureParentOperatorsInput = {\n    index?: Maybe<FilterFindOneFeatureParentIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneFeatureParentNameOperatorsInput>;\n    url?: Maybe<FilterFindOneFeatureParentUrlOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureParentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeaturePrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    level?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureReferenceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureSubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureSubclassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneFeatureSubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureSubclassOperatorsInput = {\n    index?: Maybe<FilterFindOneFeatureSubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneFeatureSubclassNameOperatorsInput>;\n    url?: Maybe<FilterFindOneFeatureSubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneFeatureSubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeatureUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneFeature_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageInput = {\n    AND?: Maybe<Array<FilterFindOneLanguageInput>>;\n    OR?: Maybe<Array<FilterFindOneLanguageInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneLanguageOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    script?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    typical_speakers?: Maybe<Array<Maybe<Scalars['String']>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneLanguageNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneLanguageOperatorsInput = {\n    _id?: Maybe<FilterFindOneLanguage_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneLanguageDescOperatorsInput>;\n    index?: Maybe<FilterFindOneLanguageIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneLanguageNameOperatorsInput>;\n    script?: Maybe<FilterFindOneLanguageScriptOperatorsInput>;\n    type?: Maybe<FilterFindOneLanguageTypeOperatorsInput>;\n    typical_speakers?: Maybe<FilterFindOneLanguageTypical_SpeakersOperatorsInput>;\n    url?: Maybe<FilterFindOneLanguageUrlOperatorsInput>;\n};\n\nexport type FilterFindOneLanguageScriptOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageTypical_SpeakersOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguageUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLanguage_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelAbility_Score_BonusesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneLevelClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelClassOperatorsInput = {\n    index?: Maybe<FilterFindOneLevelClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneLevelClassNameOperatorsInput>;\n    url?: Maybe<FilterFindOneLevelClassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneLevelClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelClass_SpecificAction_SurgesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificArcane_Recovery_LevelsOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificAura_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificBardic_Inspiration_DieOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificBrutal_Critical_DiceOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificChannel_Divinity_ChargesOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificCreating_Spell_SlotsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    sorcery_point_cost?: Maybe<Scalars['Float']>;\n    spell_slot_level?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneLevelClass_SpecificDestroy_Undead_CrOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificExtra_AttacksOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificFavored_EnemiesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificFavored_TerrainOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificIndomitable_UsesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificInput = {\n    action_surges?: Maybe<Scalars['Float']>;\n    arcane_recovery_levels?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n    bardic_inspiration_die?: Maybe<Scalars['Float']>;\n    brutal_critical_dice?: Maybe<Scalars['Float']>;\n    channel_divinity_charges?: Maybe<Scalars['Float']>;\n    creating_spell_slots?: Maybe<\n        Array<Maybe<FilterFindOneLevelClass_SpecificCreating_Spell_SlotsInput>>\n    >;\n    destroy_undead_cr?: Maybe<Scalars['Float']>;\n    extra_attacks?: Maybe<Scalars['Float']>;\n    favored_enemies?: Maybe<Scalars['Float']>;\n    favored_terrain?: Maybe<Scalars['Float']>;\n    indomitable_uses?: Maybe<Scalars['Float']>;\n    invocations_known?: Maybe<Scalars['Float']>;\n    ki_points?: Maybe<Scalars['Float']>;\n    magical_secrets_max_5?: Maybe<Scalars['Float']>;\n    magical_secrets_max_7?: Maybe<Scalars['Float']>;\n    magical_secrets_max_9?: Maybe<Scalars['Float']>;\n    martial_arts?: Maybe<FilterFindOneLevelClass_SpecificMartial_ArtsInput>;\n    metamagic_known?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_6?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_7?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_8?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_9?: Maybe<Scalars['Float']>;\n    rage_count?: Maybe<Scalars['Float']>;\n    rage_damage_bonus?: Maybe<Scalars['Float']>;\n    sneak_attack?: Maybe<FilterFindOneLevelClass_SpecificSneak_AttackInput>;\n    song_of_rest_die?: Maybe<Scalars['Float']>;\n    sorcery_points?: Maybe<Scalars['Float']>;\n    unarmored_movement?: Maybe<Scalars['Float']>;\n    wild_shape_fly?: Maybe<Scalars['Boolean']>;\n    wild_shape_max_cr?: Maybe<Scalars['Float']>;\n    wild_shape_swim?: Maybe<Scalars['Boolean']>;\n};\n\nexport type FilterFindOneLevelClass_SpecificInvocations_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificKi_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificMagical_Secrets_Max_5OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMagical_Secrets_Max_7OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMagical_Secrets_Max_9OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMartial_ArtsDice_CountOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMartial_ArtsDice_ValueOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMartial_ArtsInput = {\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneLevelClass_SpecificMartial_ArtsOperatorsInput = {\n    dice_count?: Maybe<FilterFindOneLevelClass_SpecificMartial_ArtsDice_CountOperatorsInput>;\n    dice_value?: Maybe<FilterFindOneLevelClass_SpecificMartial_ArtsDice_ValueOperatorsInput>;\n};\n\nexport type FilterFindOneLevelClass_SpecificMetamagic_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_6OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_7OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_8OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_9OperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificOperatorsInput = {\n    action_surges?: Maybe<FilterFindOneLevelClass_SpecificAction_SurgesOperatorsInput>;\n    arcane_recovery_levels?: Maybe<FilterFindOneLevelClass_SpecificArcane_Recovery_LevelsOperatorsInput>;\n    aura_range?: Maybe<FilterFindOneLevelClass_SpecificAura_RangeOperatorsInput>;\n    bardic_inspiration_die?: Maybe<FilterFindOneLevelClass_SpecificBardic_Inspiration_DieOperatorsInput>;\n    brutal_critical_dice?: Maybe<FilterFindOneLevelClass_SpecificBrutal_Critical_DiceOperatorsInput>;\n    channel_divinity_charges?: Maybe<FilterFindOneLevelClass_SpecificChannel_Divinity_ChargesOperatorsInput>;\n    destroy_undead_cr?: Maybe<FilterFindOneLevelClass_SpecificDestroy_Undead_CrOperatorsInput>;\n    extra_attacks?: Maybe<FilterFindOneLevelClass_SpecificExtra_AttacksOperatorsInput>;\n    favored_enemies?: Maybe<FilterFindOneLevelClass_SpecificFavored_EnemiesOperatorsInput>;\n    favored_terrain?: Maybe<FilterFindOneLevelClass_SpecificFavored_TerrainOperatorsInput>;\n    indomitable_uses?: Maybe<FilterFindOneLevelClass_SpecificIndomitable_UsesOperatorsInput>;\n    invocations_known?: Maybe<FilterFindOneLevelClass_SpecificInvocations_KnownOperatorsInput>;\n    ki_points?: Maybe<FilterFindOneLevelClass_SpecificKi_PointsOperatorsInput>;\n    magical_secrets_max_5?: Maybe<FilterFindOneLevelClass_SpecificMagical_Secrets_Max_5OperatorsInput>;\n    magical_secrets_max_7?: Maybe<FilterFindOneLevelClass_SpecificMagical_Secrets_Max_7OperatorsInput>;\n    magical_secrets_max_9?: Maybe<FilterFindOneLevelClass_SpecificMagical_Secrets_Max_9OperatorsInput>;\n    martial_arts?: Maybe<FilterFindOneLevelClass_SpecificMartial_ArtsOperatorsInput>;\n    metamagic_known?: Maybe<FilterFindOneLevelClass_SpecificMetamagic_KnownOperatorsInput>;\n    mystic_arcanum_level_6?: Maybe<FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_6OperatorsInput>;\n    mystic_arcanum_level_7?: Maybe<FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_7OperatorsInput>;\n    mystic_arcanum_level_8?: Maybe<FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_8OperatorsInput>;\n    mystic_arcanum_level_9?: Maybe<FilterFindOneLevelClass_SpecificMystic_Arcanum_Level_9OperatorsInput>;\n    rage_count?: Maybe<FilterFindOneLevelClass_SpecificRage_CountOperatorsInput>;\n    rage_damage_bonus?: Maybe<FilterFindOneLevelClass_SpecificRage_Damage_BonusOperatorsInput>;\n    sneak_attack?: Maybe<FilterFindOneLevelClass_SpecificSneak_AttackOperatorsInput>;\n    song_of_rest_die?: Maybe<FilterFindOneLevelClass_SpecificSong_Of_Rest_DieOperatorsInput>;\n    sorcery_points?: Maybe<FilterFindOneLevelClass_SpecificSorcery_PointsOperatorsInput>;\n    unarmored_movement?: Maybe<FilterFindOneLevelClass_SpecificUnarmored_MovementOperatorsInput>;\n    wild_shape_fly?: Maybe<FilterFindOneLevelClass_SpecificWild_Shape_FlyOperatorsInput>;\n    wild_shape_max_cr?: Maybe<FilterFindOneLevelClass_SpecificWild_Shape_Max_CrOperatorsInput>;\n    wild_shape_swim?: Maybe<FilterFindOneLevelClass_SpecificWild_Shape_SwimOperatorsInput>;\n};\n\nexport type FilterFindOneLevelClass_SpecificRage_CountOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificRage_Damage_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificSneak_AttackDice_CountOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificSneak_AttackDice_ValueOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelClass_SpecificSneak_AttackInput = {\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneLevelClass_SpecificSneak_AttackOperatorsInput = {\n    dice_count?: Maybe<FilterFindOneLevelClass_SpecificSneak_AttackDice_CountOperatorsInput>;\n    dice_value?: Maybe<FilterFindOneLevelClass_SpecificSneak_AttackDice_ValueOperatorsInput>;\n};\n\nexport type FilterFindOneLevelClass_SpecificSong_Of_Rest_DieOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificSorcery_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificUnarmored_MovementOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificWild_Shape_FlyOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificWild_Shape_Max_CrOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelClass_SpecificWild_Shape_SwimOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindOneLevelFeaturesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneLevelIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelInput = {\n    AND?: Maybe<Array<FilterFindOneLevelInput>>;\n    OR?: Maybe<Array<FilterFindOneLevelInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneLevelOperatorsInput>;\n    ability_score_bonuses?: Maybe<Scalars['Float']>;\n    class?: Maybe<FilterFindOneLevelClassInput>;\n    class_specific?: Maybe<FilterFindOneLevelClass_SpecificInput>;\n    features?: Maybe<Array<Maybe<FilterFindOneLevelFeaturesInput>>>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    prof_bonus?: Maybe<Scalars['Float']>;\n    spellcasting?: Maybe<FilterFindOneLevelSpellcastingInput>;\n    subclass?: Maybe<FilterFindOneLevelSubclassInput>;\n    subclass_specific?: Maybe<FilterFindOneLevelSubclass_SpecificInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneLevelLevelOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneLevelOperatorsInput = {\n    _id?: Maybe<FilterFindOneLevel_IdOperatorsInput>;\n    ability_score_bonuses?: Maybe<FilterFindOneLevelAbility_Score_BonusesOperatorsInput>;\n    class?: Maybe<FilterFindOneLevelClassOperatorsInput>;\n    class_specific?: Maybe<FilterFindOneLevelClass_SpecificOperatorsInput>;\n    index?: Maybe<FilterFindOneLevelIndexOperatorsInput>;\n    level?: Maybe<FilterFindOneLevelLevelOperatorsInput>;\n    prof_bonus?: Maybe<FilterFindOneLevelProf_BonusOperatorsInput>;\n    spellcasting?: Maybe<FilterFindOneLevelSpellcastingOperatorsInput>;\n    subclass?: Maybe<FilterFindOneLevelSubclassOperatorsInput>;\n    subclass_specific?: Maybe<FilterFindOneLevelSubclass_SpecificOperatorsInput>;\n    url?: Maybe<FilterFindOneLevelUrlOperatorsInput>;\n};\n\nexport type FilterFindOneLevelProf_BonusOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingCantrips_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingInput = {\n    cantrips_known?: Maybe<Scalars['Float']>;\n    spell_slots_level_1?: Maybe<Scalars['Float']>;\n    spell_slots_level_2?: Maybe<Scalars['Float']>;\n    spell_slots_level_3?: Maybe<Scalars['Float']>;\n    spell_slots_level_4?: Maybe<Scalars['Float']>;\n    spell_slots_level_5?: Maybe<Scalars['Float']>;\n    spell_slots_level_6?: Maybe<Scalars['Float']>;\n    spell_slots_level_7?: Maybe<Scalars['Float']>;\n    spell_slots_level_8?: Maybe<Scalars['Float']>;\n    spell_slots_level_9?: Maybe<Scalars['Float']>;\n    spells_known?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneLevelSpellcastingOperatorsInput = {\n    cantrips_known?: Maybe<FilterFindOneLevelSpellcastingCantrips_KnownOperatorsInput>;\n    spell_slots_level_1?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_1OperatorsInput>;\n    spell_slots_level_2?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_2OperatorsInput>;\n    spell_slots_level_3?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_3OperatorsInput>;\n    spell_slots_level_4?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_4OperatorsInput>;\n    spell_slots_level_5?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_5OperatorsInput>;\n    spell_slots_level_6?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_6OperatorsInput>;\n    spell_slots_level_7?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_7OperatorsInput>;\n    spell_slots_level_8?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_8OperatorsInput>;\n    spell_slots_level_9?: Maybe<FilterFindOneLevelSpellcastingSpell_Slots_Level_9OperatorsInput>;\n    spells_known?: Maybe<FilterFindOneLevelSpellcastingSpells_KnownOperatorsInput>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_1OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_2OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_3OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_4OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_5OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_6OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_7OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_8OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpell_Slots_Level_9OperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSpellcastingSpells_KnownOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelSubclassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneLevelSubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelSubclassOperatorsInput = {\n    index?: Maybe<FilterFindOneLevelSubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneLevelSubclassNameOperatorsInput>;\n    url?: Maybe<FilterFindOneLevelSubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneLevelSubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevelSubclass_SpecificAdditional_Magical_Secrets_Max_LvlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneLevelSubclass_SpecificAura_RangeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneLevelSubclass_SpecificInput = {\n    additional_magical_secrets_max_lvl?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneLevelSubclass_SpecificOperatorsInput = {\n    additional_magical_secrets_max_lvl?: Maybe<FilterFindOneLevelSubclass_SpecificAdditional_Magical_Secrets_Max_LvlOperatorsInput>;\n    aura_range?: Maybe<FilterFindOneLevelSubclass_SpecificAura_RangeOperatorsInput>;\n};\n\nexport type FilterFindOneLevelUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneLevel_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemEquipment_CategoryIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemEquipment_CategoryInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMagicItemEquipment_CategoryNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemEquipment_CategoryOperatorsInput = {\n    index?: Maybe<FilterFindOneMagicItemEquipment_CategoryIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneMagicItemEquipment_CategoryNameOperatorsInput>;\n    url?: Maybe<FilterFindOneMagicItemEquipment_CategoryUrlOperatorsInput>;\n};\n\nexport type FilterFindOneMagicItemEquipment_CategoryUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItemInput = {\n    AND?: Maybe<Array<FilterFindOneMagicItemInput>>;\n    OR?: Maybe<Array<FilterFindOneMagicItemInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneMagicItemOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<FilterFindOneMagicItemEquipment_CategoryInput>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMagicItemNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneMagicItemOperatorsInput = {\n    _id?: Maybe<FilterFindOneMagicItem_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneMagicItemDescOperatorsInput>;\n    equipment_category?: Maybe<FilterFindOneMagicItemEquipment_CategoryOperatorsInput>;\n    index?: Maybe<FilterFindOneMagicItemIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneMagicItemNameOperatorsInput>;\n    url?: Maybe<FilterFindOneMagicItemUrlOperatorsInput>;\n};\n\nexport type FilterFindOneMagicItemUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicItem_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicSchoolDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicSchoolIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicSchoolInput = {\n    AND?: Maybe<Array<FilterFindOneMagicSchoolInput>>;\n    OR?: Maybe<Array<FilterFindOneMagicSchoolInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneMagicSchoolOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMagicSchoolNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneMagicSchoolOperatorsInput = {\n    _id?: Maybe<FilterFindOneMagicSchool_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneMagicSchoolDescOperatorsInput>;\n    index?: Maybe<FilterFindOneMagicSchoolIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneMagicSchoolNameOperatorsInput>;\n    url?: Maybe<FilterFindOneMagicSchoolUrlOperatorsInput>;\n};\n\nexport type FilterFindOneMagicSchoolUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMagicSchool_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterActionsDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterActionsDamageInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<FilterFindOneMonsterActionsDamageDamage_TypeInput>;\n};\n\nexport type FilterFindOneMonsterActionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    damage?: Maybe<Array<Maybe<FilterFindOneMonsterActionsDamageInput>>>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterAlignmentOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterArmor_ClassOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterChallenge_RatingOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterCharismaOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterCondition_ImmunitiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterConstitutionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterDexterityOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterFormsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterHit_DiceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterHit_PointsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterInput = {\n    AND?: Maybe<Array<FilterFindOneMonsterInput>>;\n    OR?: Maybe<Array<FilterFindOneMonsterInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneMonsterOperatorsInput>;\n    actions?: Maybe<Array<Maybe<FilterFindOneMonsterActionsInput>>>;\n    alignment?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<Scalars['Float']>;\n    challenge_rating?: Maybe<Scalars['Float']>;\n    charisma?: Maybe<Scalars['Float']>;\n    condition_immunities?: Maybe<\n        Array<Maybe<FilterFindOneMonsterCondition_ImmunitiesInput>>\n    >;\n    constitution?: Maybe<Scalars['Float']>;\n    damage_immunities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_resistances?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_vulnerabilities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    dexterity?: Maybe<Scalars['Float']>;\n    forms?: Maybe<Array<Maybe<FilterFindOneMonsterFormsInput>>>;\n    hit_dice?: Maybe<Scalars['String']>;\n    hit_points?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    intelligence?: Maybe<Scalars['Float']>;\n    languages?: Maybe<Scalars['String']>;\n    legendary_actions?: Maybe<\n        Array<Maybe<FilterFindOneMonsterLegendary_ActionsInput>>\n    >;\n    name?: Maybe<Scalars['String']>;\n    proficiencies?: Maybe<Array<Maybe<FilterFindOneMonsterProficienciesInput>>>;\n    reactions?: Maybe<Array<Maybe<FilterFindOneMonsterReactionsInput>>>;\n    senses?: Maybe<FilterFindOneMonsterSensesInput>;\n    size?: Maybe<Scalars['String']>;\n    special_abilities?: Maybe<\n        Array<Maybe<FilterFindOneMonsterSpecial_AbilitiesInput>>\n    >;\n    speed?: Maybe<FilterFindOneMonsterSpeedInput>;\n    strength?: Maybe<Scalars['Float']>;\n    subtype?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n    wisdom?: Maybe<Scalars['Float']>;\n    xp?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneMonsterIntelligenceOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterLanguagesOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterLegendary_ActionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneMonsterOperatorsInput = {\n    _id?: Maybe<FilterFindOneMonster_IdOperatorsInput>;\n    alignment?: Maybe<FilterFindOneMonsterAlignmentOperatorsInput>;\n    armor_class?: Maybe<FilterFindOneMonsterArmor_ClassOperatorsInput>;\n    challenge_rating?: Maybe<FilterFindOneMonsterChallenge_RatingOperatorsInput>;\n    charisma?: Maybe<FilterFindOneMonsterCharismaOperatorsInput>;\n    constitution?: Maybe<FilterFindOneMonsterConstitutionOperatorsInput>;\n    dexterity?: Maybe<FilterFindOneMonsterDexterityOperatorsInput>;\n    hit_dice?: Maybe<FilterFindOneMonsterHit_DiceOperatorsInput>;\n    hit_points?: Maybe<FilterFindOneMonsterHit_PointsOperatorsInput>;\n    index?: Maybe<FilterFindOneMonsterIndexOperatorsInput>;\n    intelligence?: Maybe<FilterFindOneMonsterIntelligenceOperatorsInput>;\n    languages?: Maybe<FilterFindOneMonsterLanguagesOperatorsInput>;\n    name?: Maybe<FilterFindOneMonsterNameOperatorsInput>;\n    senses?: Maybe<FilterFindOneMonsterSensesOperatorsInput>;\n    size?: Maybe<FilterFindOneMonsterSizeOperatorsInput>;\n    speed?: Maybe<FilterFindOneMonsterSpeedOperatorsInput>;\n    strength?: Maybe<FilterFindOneMonsterStrengthOperatorsInput>;\n    subtype?: Maybe<FilterFindOneMonsterSubtypeOperatorsInput>;\n    type?: Maybe<FilterFindOneMonsterTypeOperatorsInput>;\n    url?: Maybe<FilterFindOneMonsterUrlOperatorsInput>;\n    wisdom?: Maybe<FilterFindOneMonsterWisdomOperatorsInput>;\n    xp?: Maybe<FilterFindOneMonsterXpOperatorsInput>;\n};\n\nexport type FilterFindOneMonsterProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    proficiency?: Maybe<FilterFindOneMonsterProficienciesProficiencyInput>;\n    value?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneMonsterProficienciesProficiencyInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterReactionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterSensesBlindsightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSensesDarkvisionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSensesInput = {\n    blindsight?: Maybe<Scalars['String']>;\n    darkvision?: Maybe<Scalars['String']>;\n    passive_perception?: Maybe<Scalars['Float']>;\n    tremorsense?: Maybe<Scalars['String']>;\n    truesight?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterSensesOperatorsInput = {\n    blindsight?: Maybe<FilterFindOneMonsterSensesBlindsightOperatorsInput>;\n    darkvision?: Maybe<FilterFindOneMonsterSensesDarkvisionOperatorsInput>;\n    passive_perception?: Maybe<FilterFindOneMonsterSensesPassive_PerceptionOperatorsInput>;\n    tremorsense?: Maybe<FilterFindOneMonsterSensesTremorsenseOperatorsInput>;\n    truesight?: Maybe<FilterFindOneMonsterSensesTruesightOperatorsInput>;\n};\n\nexport type FilterFindOneMonsterSensesPassive_PerceptionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterSensesTremorsenseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSensesTruesightOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSizeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSpecial_AbilitiesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterSpeedBurrowOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSpeedClimbOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSpeedFlyOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSpeedHoverOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Boolean']>;\n    gte?: Maybe<Scalars['Boolean']>;\n    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n    lt?: Maybe<Scalars['Boolean']>;\n    lte?: Maybe<Scalars['Boolean']>;\n    ne?: Maybe<Scalars['Boolean']>;\n    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;\n};\n\nexport type FilterFindOneMonsterSpeedInput = {\n    burrow?: Maybe<Scalars['String']>;\n    climb?: Maybe<Scalars['String']>;\n    fly?: Maybe<Scalars['String']>;\n    hover?: Maybe<Scalars['Boolean']>;\n    swim?: Maybe<Scalars['String']>;\n    walk?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneMonsterSpeedOperatorsInput = {\n    burrow?: Maybe<FilterFindOneMonsterSpeedBurrowOperatorsInput>;\n    climb?: Maybe<FilterFindOneMonsterSpeedClimbOperatorsInput>;\n    fly?: Maybe<FilterFindOneMonsterSpeedFlyOperatorsInput>;\n    hover?: Maybe<FilterFindOneMonsterSpeedHoverOperatorsInput>;\n    swim?: Maybe<FilterFindOneMonsterSpeedSwimOperatorsInput>;\n    walk?: Maybe<FilterFindOneMonsterSpeedWalkOperatorsInput>;\n};\n\nexport type FilterFindOneMonsterSpeedSwimOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterSpeedWalkOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterStrengthOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterSubtypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneMonsterWisdomOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonsterXpOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneMonster_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneProficiencyClassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneProficiencyIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneProficiencyInput = {\n    AND?: Maybe<Array<FilterFindOneProficiencyInput>>;\n    OR?: Maybe<Array<FilterFindOneProficiencyInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneProficiencyOperatorsInput>;\n    classes?: Maybe<Array<Maybe<FilterFindOneProficiencyClassesInput>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    races?: Maybe<Array<Maybe<FilterFindOneProficiencyRacesInput>>>;\n    references?: Maybe<Array<Maybe<FilterFindOneProficiencyReferencesInput>>>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneProficiencyNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneProficiencyOperatorsInput = {\n    _id?: Maybe<FilterFindOneProficiency_IdOperatorsInput>;\n    index?: Maybe<FilterFindOneProficiencyIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneProficiencyNameOperatorsInput>;\n    type?: Maybe<FilterFindOneProficiencyTypeOperatorsInput>;\n    url?: Maybe<FilterFindOneProficiencyUrlOperatorsInput>;\n};\n\nexport type FilterFindOneProficiencyRacesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneProficiencyReferencesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneProficiencyTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneProficiencyUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneProficiency_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsFromAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneRaceAbility_Bonus_OptionsFromAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneRaceAbility_Bonus_OptionsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneRaceAbility_Bonus_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneRaceAbility_Bonus_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneRaceAbility_Bonus_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceAbility_BonusesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceAbility_BonusesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneRaceAbility_BonusesAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneRaceAgeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceAlignmentOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceInput = {\n    AND?: Maybe<Array<FilterFindOneRaceInput>>;\n    OR?: Maybe<Array<FilterFindOneRaceInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneRaceOperatorsInput>;\n    ability_bonus_options?: Maybe<FilterFindOneRaceAbility_Bonus_OptionsInput>;\n    ability_bonuses?: Maybe<\n        Array<Maybe<FilterFindOneRaceAbility_BonusesInput>>\n    >;\n    age?: Maybe<Scalars['String']>;\n    alignment?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_desc?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindOneRaceLanguage_OptionsInput>;\n    languages?: Maybe<Array<Maybe<FilterFindOneRaceLanguagesInput>>>;\n    name?: Maybe<Scalars['String']>;\n    size?: Maybe<Scalars['String']>;\n    size_description?: Maybe<Scalars['String']>;\n    speed?: Maybe<Scalars['Float']>;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindOneRaceStarting_ProficienciesInput>>\n    >;\n    starting_proficiency_options?: Maybe<FilterFindOneRaceStarting_Proficiency_OptionsInput>;\n    subraces?: Maybe<Array<Maybe<FilterFindOneRaceSubracesInput>>>;\n    traits?: Maybe<Array<Maybe<FilterFindOneRaceTraitsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceLanguage_DescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneRaceLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneRaceLanguage_OptionsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneRaceLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneRaceLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneRaceLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceLanguagesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneRaceOperatorsInput = {\n    _id?: Maybe<FilterFindOneRace_IdOperatorsInput>;\n    ability_bonus_options?: Maybe<FilterFindOneRaceAbility_Bonus_OptionsOperatorsInput>;\n    age?: Maybe<FilterFindOneRaceAgeOperatorsInput>;\n    alignment?: Maybe<FilterFindOneRaceAlignmentOperatorsInput>;\n    index?: Maybe<FilterFindOneRaceIndexOperatorsInput>;\n    language_desc?: Maybe<FilterFindOneRaceLanguage_DescOperatorsInput>;\n    language_options?: Maybe<FilterFindOneRaceLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindOneRaceNameOperatorsInput>;\n    size?: Maybe<FilterFindOneRaceSizeOperatorsInput>;\n    size_description?: Maybe<FilterFindOneRaceSize_DescriptionOperatorsInput>;\n    speed?: Maybe<FilterFindOneRaceSpeedOperatorsInput>;\n    starting_proficiency_options?: Maybe<FilterFindOneRaceStarting_Proficiency_OptionsOperatorsInput>;\n    url?: Maybe<FilterFindOneRaceUrlOperatorsInput>;\n};\n\nexport type FilterFindOneRaceSizeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceSize_DescriptionOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceSpeedOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneRaceStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceStarting_Proficiency_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneRaceStarting_Proficiency_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceStarting_Proficiency_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneRaceStarting_Proficiency_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceStarting_Proficiency_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneRaceStarting_Proficiency_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneRaceStarting_Proficiency_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneRaceStarting_Proficiency_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRaceSubracesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceTraitsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRaceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRace_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleInput = {\n    AND?: Maybe<Array<FilterFindOneRuleInput>>;\n    OR?: Maybe<Array<FilterFindOneRuleInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneRuleOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    subsections?: Maybe<Array<Maybe<FilterFindOneRuleSubsectionsInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRuleNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneRuleOperatorsInput = {\n    _id?: Maybe<FilterFindOneRule_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneRuleDescOperatorsInput>;\n    index?: Maybe<FilterFindOneRuleIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneRuleNameOperatorsInput>;\n    url?: Maybe<FilterFindOneRuleUrlOperatorsInput>;\n};\n\nexport type FilterFindOneRuleSectionDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleSectionIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleSectionInput = {\n    AND?: Maybe<Array<FilterFindOneRuleSectionInput>>;\n    OR?: Maybe<Array<FilterFindOneRuleSectionInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneRuleSectionOperatorsInput>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRuleSectionNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneRuleSectionOperatorsInput = {\n    _id?: Maybe<FilterFindOneRuleSection_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneRuleSectionDescOperatorsInput>;\n    index?: Maybe<FilterFindOneRuleSectionIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneRuleSectionNameOperatorsInput>;\n    url?: Maybe<FilterFindOneRuleSectionUrlOperatorsInput>;\n};\n\nexport type FilterFindOneRuleSectionUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleSection_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRuleSubsectionsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneRuleUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneRule_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillAbility_ScoreIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSkillAbility_ScoreNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillAbility_ScoreOperatorsInput = {\n    index?: Maybe<FilterFindOneSkillAbility_ScoreIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSkillAbility_ScoreNameOperatorsInput>;\n    url?: Maybe<FilterFindOneSkillAbility_ScoreUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSkillAbility_ScoreUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkillInput = {\n    AND?: Maybe<Array<FilterFindOneSkillInput>>;\n    OR?: Maybe<Array<FilterFindOneSkillInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneSkillOperatorsInput>;\n    ability_score?: Maybe<FilterFindOneSkillAbility_ScoreInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSkillNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneSkillOperatorsInput = {\n    _id?: Maybe<FilterFindOneSkill_IdOperatorsInput>;\n    ability_score?: Maybe<FilterFindOneSkillAbility_ScoreOperatorsInput>;\n    desc?: Maybe<FilterFindOneSkillDescOperatorsInput>;\n    index?: Maybe<FilterFindOneSkillIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSkillNameOperatorsInput>;\n    url?: Maybe<FilterFindOneSkillUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSkillUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSkill_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSpellArea_Of_EffectInput = {\n    size?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellClassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellDamageDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellDamageInput = {\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_at_slot_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<FilterFindOneSpellDamageDamage_TypeInput>;\n};\n\nexport type FilterFindOneSpellDcDc_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellDcInput = {\n    dc_success?: Maybe<Scalars['String']>;\n    dc_type?: Maybe<FilterFindOneSpellDcDc_TypeInput>;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellInput = {\n    AND?: Maybe<Array<FilterFindOneSpellInput>>;\n    OR?: Maybe<Array<FilterFindOneSpellInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneSpellOperatorsInput>;\n    area_of_effect?: Maybe<FilterFindOneSpellArea_Of_EffectInput>;\n    attack_type?: Maybe<Scalars['String']>;\n    casting_time?: Maybe<Scalars['String']>;\n    classes?: Maybe<Array<Maybe<FilterFindOneSpellClassesInput>>>;\n    components?: Maybe<Array<Maybe<Scalars['String']>>>;\n    concentration?: Maybe<Scalars['Boolean']>;\n    damage?: Maybe<FilterFindOneSpellDamageInput>;\n    dc?: Maybe<FilterFindOneSpellDcInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    duration?: Maybe<Scalars['String']>;\n    heal_at_slot_level?: Maybe<Scalars['JSON']>;\n    higher_level?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    material?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    range?: Maybe<Scalars['String']>;\n    ritual?: Maybe<Scalars['Boolean']>;\n    school?: Maybe<FilterFindOneSpellSchoolInput>;\n    subclasses?: Maybe<Array<Maybe<FilterFindOneSpellSubclassesInput>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneSpellOperatorsInput = {\n    _id?: Maybe<FilterFindOneSpell_IdOperatorsInput>;\n    school?: Maybe<FilterFindOneSpellSchoolOperatorsInput>;\n};\n\nexport type FilterFindOneSpellSchoolIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSpellSchoolInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpellSchoolNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSpellSchoolOperatorsInput = {\n    index?: Maybe<FilterFindOneSpellSchoolIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSpellSchoolNameOperatorsInput>;\n    url?: Maybe<FilterFindOneSpellSchoolUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSpellSchoolUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSpellSubclassesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSpell_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassClassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassClassInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubclassClassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassClassOperatorsInput = {\n    index?: Maybe<FilterFindOneSubclassClassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSubclassClassNameOperatorsInput>;\n    url?: Maybe<FilterFindOneSubclassClassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSubclassClassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassInput = {\n    AND?: Maybe<Array<FilterFindOneSubclassInput>>;\n    OR?: Maybe<Array<FilterFindOneSubclassInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneSubclassOperatorsInput>;\n    class?: Maybe<FilterFindOneSubclassClassInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    spells?: Maybe<Array<Maybe<FilterFindOneSubclassSpellsInput>>>;\n    subclass_flavor?: Maybe<Scalars['String']>;\n    subclass_levels?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubclassNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneSubclassOperatorsInput = {\n    _id?: Maybe<FilterFindOneSubclass_IdOperatorsInput>;\n    class?: Maybe<FilterFindOneSubclassClassOperatorsInput>;\n    desc?: Maybe<FilterFindOneSubclassDescOperatorsInput>;\n    index?: Maybe<FilterFindOneSubclassIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSubclassNameOperatorsInput>;\n    subclass_flavor?: Maybe<FilterFindOneSubclassSubclass_FlavorOperatorsInput>;\n    subclass_levels?: Maybe<FilterFindOneSubclassSubclass_LevelsOperatorsInput>;\n    url?: Maybe<FilterFindOneSubclassUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSubclassSpellsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    prerequisites?: Maybe<\n        Array<Maybe<FilterFindOneSubclassSpellsPrerequisitesInput>>\n    >;\n    spell?: Maybe<FilterFindOneSubclassSpellsSpellInput>;\n};\n\nexport type FilterFindOneSubclassSpellsPrerequisitesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubclassSpellsSpellInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubclassSubclass_FlavorOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassSubclass_LevelsOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclassUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubclass_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceAbility_BonusesAbility_ScoreInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceAbility_BonusesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<FilterFindOneSubraceAbility_BonusesAbility_ScoreInput>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type FilterFindOneSubraceDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceInput = {\n    AND?: Maybe<Array<FilterFindOneSubraceInput>>;\n    OR?: Maybe<Array<FilterFindOneSubraceInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneSubraceOperatorsInput>;\n    ability_bonuses?: Maybe<\n        Array<Maybe<FilterFindOneSubraceAbility_BonusesInput>>\n    >;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<FilterFindOneSubraceLanguage_OptionsInput>;\n    name?: Maybe<Scalars['String']>;\n    race?: Maybe<FilterFindOneSubraceRaceInput>;\n    racial_traits?: Maybe<Array<Maybe<FilterFindOneSubraceRacial_TraitsInput>>>;\n    starting_proficiencies?: Maybe<\n        Array<Maybe<FilterFindOneSubraceStarting_ProficienciesInput>>\n    >;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceLanguage_OptionsChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneSubraceLanguage_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceLanguage_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneSubraceLanguage_OptionsFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceLanguage_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneSubraceLanguage_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneSubraceLanguage_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneSubraceLanguage_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneSubraceOperatorsInput = {\n    _id?: Maybe<FilterFindOneSubrace_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneSubraceDescOperatorsInput>;\n    index?: Maybe<FilterFindOneSubraceIndexOperatorsInput>;\n    language_options?: Maybe<FilterFindOneSubraceLanguage_OptionsOperatorsInput>;\n    name?: Maybe<FilterFindOneSubraceNameOperatorsInput>;\n    race?: Maybe<FilterFindOneSubraceRaceOperatorsInput>;\n    url?: Maybe<FilterFindOneSubraceUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSubraceRaceIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceRaceInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceRaceNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceRaceOperatorsInput = {\n    index?: Maybe<FilterFindOneSubraceRaceIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneSubraceRaceNameOperatorsInput>;\n    url?: Maybe<FilterFindOneSubraceRaceUrlOperatorsInput>;\n};\n\nexport type FilterFindOneSubraceRaceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubraceRacial_TraitsInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceStarting_ProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneSubraceUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneSubrace_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitInput = {\n    AND?: Maybe<Array<FilterFindOneTraitInput>>;\n    OR?: Maybe<Array<FilterFindOneTraitInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneTraitOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<FilterFindOneTraitParentInput>;\n    proficiencies?: Maybe<Array<Maybe<FilterFindOneTraitProficienciesInput>>>;\n    proficiency_choices?: Maybe<FilterFindOneTraitProficiency_ChoicesInput>;\n    races?: Maybe<Array<Maybe<FilterFindOneTraitRacesInput>>>;\n    subraces?: Maybe<Array<Maybe<FilterFindOneTraitSubracesInput>>>;\n    trait_specific?: Maybe<FilterFindOneTraitTrait_SpecificInput>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneTraitOperatorsInput = {\n    _id?: Maybe<FilterFindOneTrait_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneTraitDescOperatorsInput>;\n    index?: Maybe<FilterFindOneTraitIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneTraitNameOperatorsInput>;\n    parent?: Maybe<FilterFindOneTraitParentOperatorsInput>;\n    proficiency_choices?: Maybe<FilterFindOneTraitProficiency_ChoicesOperatorsInput>;\n    trait_specific?: Maybe<FilterFindOneTraitTrait_SpecificOperatorsInput>;\n    url?: Maybe<FilterFindOneTraitUrlOperatorsInput>;\n};\n\nexport type FilterFindOneTraitParentIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitParentInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitParentNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitParentOperatorsInput = {\n    index?: Maybe<FilterFindOneTraitParentIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneTraitParentNameOperatorsInput>;\n    url?: Maybe<FilterFindOneTraitParentUrlOperatorsInput>;\n};\n\nexport type FilterFindOneTraitParentUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitProficienciesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitProficiency_ChoicesChooseOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['Float']>;\n    gte?: Maybe<Scalars['Float']>;\n    in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    lt?: Maybe<Scalars['Float']>;\n    lte?: Maybe<Scalars['Float']>;\n    ne?: Maybe<Scalars['Float']>;\n    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n};\n\nexport type FilterFindOneTraitProficiency_ChoicesFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitProficiency_ChoicesInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<FilterFindOneTraitProficiency_ChoicesFromInput>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitProficiency_ChoicesOperatorsInput = {\n    choose?: Maybe<FilterFindOneTraitProficiency_ChoicesChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneTraitProficiency_ChoicesTypeOperatorsInput>;\n};\n\nexport type FilterFindOneTraitProficiency_ChoicesTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitRacesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitSubracesInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDamageDamage_TypeInput =\n    {\n        index?: Maybe<Scalars['String']>;\n        name?: Maybe<Scalars['String']>;\n        url?: Maybe<Scalars['String']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDamageInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDamageDamage_TypeInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeIndexOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeNameOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeOperatorsInput =\n    {\n        index?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeIndexOperatorsInput>;\n        name?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeNameOperatorsInput>;\n        url?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeUrlOperatorsInput>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeUrlOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcInput = {\n    dc_type?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeInput>;\n    success_type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcOperatorsInput = {\n    dc_type?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcDc_TypeOperatorsInput>;\n    success_type?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcSuccess_TypeOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDcSuccess_TypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponInput = {\n    damage?: Maybe<\n        Array<Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDamageInput>>\n    >;\n    dc?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcInput>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    usage?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponUsageInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponOperatorsInput = {\n    dc?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDcOperatorsInput>;\n    desc?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponDescOperatorsInput>;\n    name?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponNameOperatorsInput>;\n    usage?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponUsageOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponUsageInput = {\n    times?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponUsageOperatorsInput = {\n    times?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponUsageTimesOperatorsInput>;\n    type?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponUsageTypeOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponUsageTimesOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificBreath_WeaponUsageTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificDamage_TypeIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificDamage_TypeInput = {\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificDamage_TypeNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificDamage_TypeOperatorsInput = {\n    index?: Maybe<FilterFindOneTraitTrait_SpecificDamage_TypeIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneTraitTrait_SpecificDamage_TypeNameOperatorsInput>;\n    url?: Maybe<FilterFindOneTraitTrait_SpecificDamage_TypeUrlOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificDamage_TypeUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificInput = {\n    breath_weapon?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponInput>;\n    damage_type?: Maybe<FilterFindOneTraitTrait_SpecificDamage_TypeInput>;\n    spell_options?: Maybe<FilterFindOneTraitTrait_SpecificSpell_OptionsInput>;\n    subtrait_options?: Maybe<FilterFindOneTraitTrait_SpecificSubtrait_OptionsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificOperatorsInput = {\n    breath_weapon?: Maybe<FilterFindOneTraitTrait_SpecificBreath_WeaponOperatorsInput>;\n    damage_type?: Maybe<FilterFindOneTraitTrait_SpecificDamage_TypeOperatorsInput>;\n    spell_options?: Maybe<FilterFindOneTraitTrait_SpecificSpell_OptionsOperatorsInput>;\n    subtrait_options?: Maybe<FilterFindOneTraitTrait_SpecificSubtrait_OptionsOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSpell_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificSpell_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSpell_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneTraitTrait_SpecificSpell_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSpell_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneTraitTrait_SpecificSpell_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneTraitTrait_SpecificSpell_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSpell_OptionsTypeOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSubtrait_OptionsChooseOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['Float']>;\n        gte?: Maybe<Scalars['Float']>;\n        in?: Maybe<Array<Maybe<Scalars['Float']>>>;\n        lt?: Maybe<Scalars['Float']>;\n        lte?: Maybe<Scalars['Float']>;\n        ne?: Maybe<Scalars['Float']>;\n        nin?: Maybe<Array<Maybe<Scalars['Float']>>>;\n    };\n\nexport type FilterFindOneTraitTrait_SpecificSubtrait_OptionsFromInput = {\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSubtrait_OptionsInput = {\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<\n        Array<Maybe<FilterFindOneTraitTrait_SpecificSubtrait_OptionsFromInput>>\n    >;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSubtrait_OptionsOperatorsInput = {\n    choose?: Maybe<FilterFindOneTraitTrait_SpecificSubtrait_OptionsChooseOperatorsInput>;\n    type?: Maybe<FilterFindOneTraitTrait_SpecificSubtrait_OptionsTypeOperatorsInput>;\n};\n\nexport type FilterFindOneTraitTrait_SpecificSubtrait_OptionsTypeOperatorsInput =\n    {\n        exists?: Maybe<Scalars['Boolean']>;\n        gt?: Maybe<Scalars['String']>;\n        gte?: Maybe<Scalars['String']>;\n        in?: Maybe<Array<Maybe<Scalars['String']>>>;\n        lt?: Maybe<Scalars['String']>;\n        lte?: Maybe<Scalars['String']>;\n        ne?: Maybe<Scalars['String']>;\n        nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n        regex?: Maybe<Scalars['RegExpAsString']>;\n    };\n\nexport type FilterFindOneTraitUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneTrait_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneWeaponPropertyDescOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneWeaponPropertyIndexOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneWeaponPropertyInput = {\n    AND?: Maybe<Array<FilterFindOneWeaponPropertyInput>>;\n    OR?: Maybe<Array<FilterFindOneWeaponPropertyInput>>;\n    _id?: Maybe<Scalars['String']>;\n    /** List of *indexed* fields that can be filtered via operators. */\n    _operators?: Maybe<FilterFindOneWeaponPropertyOperatorsInput>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type FilterFindOneWeaponPropertyNameOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\n/** For performance reason this type contains only *indexed* fields. */\nexport type FilterFindOneWeaponPropertyOperatorsInput = {\n    _id?: Maybe<FilterFindOneWeaponProperty_IdOperatorsInput>;\n    desc?: Maybe<FilterFindOneWeaponPropertyDescOperatorsInput>;\n    index?: Maybe<FilterFindOneWeaponPropertyIndexOperatorsInput>;\n    name?: Maybe<FilterFindOneWeaponPropertyNameOperatorsInput>;\n    url?: Maybe<FilterFindOneWeaponPropertyUrlOperatorsInput>;\n};\n\nexport type FilterFindOneWeaponPropertyUrlOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type FilterFindOneWeaponProperty_IdOperatorsInput = {\n    exists?: Maybe<Scalars['Boolean']>;\n    gt?: Maybe<Scalars['String']>;\n    gte?: Maybe<Scalars['String']>;\n    in?: Maybe<Array<Maybe<Scalars['String']>>>;\n    lt?: Maybe<Scalars['String']>;\n    lte?: Maybe<Scalars['String']>;\n    ne?: Maybe<Scalars['String']>;\n    nin?: Maybe<Array<Maybe<Scalars['String']>>>;\n    regex?: Maybe<Scalars['RegExpAsString']>;\n};\n\nexport type Language = {\n    __typename?: 'Language';\n    _id: Scalars['String'];\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    script?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    typical_speakers?: Maybe<Array<Maybe<Scalars['String']>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Level = {\n    __typename?: 'Level';\n    _id: Scalars['String'];\n    ability_score_bonuses?: Maybe<Scalars['Float']>;\n    class?: Maybe<LevelClass>;\n    class_specific?: Maybe<LevelClass_Specific>;\n    features: Array<Feature>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    prof_bonus?: Maybe<Scalars['Float']>;\n    spellcasting?: Maybe<LevelSpellcasting>;\n    subclass?: Maybe<LevelSubclass>;\n    subclass_specific?: Maybe<LevelSubclass_Specific>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type LevelFeaturesArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyFeatureInput>;\n};\n\nexport type LevelClass = {\n    __typename?: 'LevelClass';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type LevelClass_Specific = {\n    __typename?: 'LevelClass_specific';\n    action_surges?: Maybe<Scalars['Float']>;\n    arcane_recovery_levels?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n    bardic_inspiration_die?: Maybe<Scalars['Float']>;\n    brutal_critical_dice?: Maybe<Scalars['Float']>;\n    channel_divinity_charges?: Maybe<Scalars['Float']>;\n    creating_spell_slots?: Maybe<\n        Array<Maybe<LevelClass_SpecificCreating_Spell_Slots>>\n    >;\n    destroy_undead_cr?: Maybe<Scalars['Float']>;\n    extra_attacks?: Maybe<Scalars['Float']>;\n    favored_enemies?: Maybe<Scalars['Float']>;\n    favored_terrain?: Maybe<Scalars['Float']>;\n    indomitable_uses?: Maybe<Scalars['Float']>;\n    invocations_known?: Maybe<Scalars['Float']>;\n    ki_points?: Maybe<Scalars['Float']>;\n    magical_secrets_max_5?: Maybe<Scalars['Float']>;\n    magical_secrets_max_7?: Maybe<Scalars['Float']>;\n    magical_secrets_max_9?: Maybe<Scalars['Float']>;\n    martial_arts?: Maybe<LevelClass_SpecificMartial_Arts>;\n    metamagic_known?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_6?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_7?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_8?: Maybe<Scalars['Float']>;\n    mystic_arcanum_level_9?: Maybe<Scalars['Float']>;\n    rage_count?: Maybe<Scalars['Float']>;\n    rage_damage_bonus?: Maybe<Scalars['Float']>;\n    sneak_attack?: Maybe<LevelClass_SpecificSneak_Attack>;\n    song_of_rest_die?: Maybe<Scalars['Float']>;\n    sorcery_points?: Maybe<Scalars['Float']>;\n    unarmored_movement?: Maybe<Scalars['Float']>;\n    wild_shape_fly?: Maybe<Scalars['Boolean']>;\n    wild_shape_max_cr?: Maybe<Scalars['Float']>;\n    wild_shape_swim?: Maybe<Scalars['Boolean']>;\n};\n\nexport type LevelClass_SpecificCreating_Spell_Slots = {\n    __typename?: 'LevelClass_specificCreating_spell_slots';\n    _id?: Maybe<Scalars['MongoID']>;\n    sorcery_point_cost?: Maybe<Scalars['Float']>;\n    spell_slot_level?: Maybe<Scalars['Float']>;\n};\n\nexport type LevelClass_SpecificMartial_Arts = {\n    __typename?: 'LevelClass_specificMartial_arts';\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type LevelClass_SpecificSneak_Attack = {\n    __typename?: 'LevelClass_specificSneak_attack';\n    dice_count?: Maybe<Scalars['Float']>;\n    dice_value?: Maybe<Scalars['Float']>;\n};\n\nexport type LevelSpellcasting = {\n    __typename?: 'LevelSpellcasting';\n    cantrips_known?: Maybe<Scalars['Float']>;\n    spell_slots_level_1?: Maybe<Scalars['Float']>;\n    spell_slots_level_2?: Maybe<Scalars['Float']>;\n    spell_slots_level_3?: Maybe<Scalars['Float']>;\n    spell_slots_level_4?: Maybe<Scalars['Float']>;\n    spell_slots_level_5?: Maybe<Scalars['Float']>;\n    spell_slots_level_6?: Maybe<Scalars['Float']>;\n    spell_slots_level_7?: Maybe<Scalars['Float']>;\n    spell_slots_level_8?: Maybe<Scalars['Float']>;\n    spell_slots_level_9?: Maybe<Scalars['Float']>;\n    spells_known?: Maybe<Scalars['Float']>;\n};\n\nexport type LevelSubclass = {\n    __typename?: 'LevelSubclass';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type LevelSubclass_Specific = {\n    __typename?: 'LevelSubclass_specific';\n    additional_magical_secrets_max_lvl?: Maybe<Scalars['Float']>;\n    aura_range?: Maybe<Scalars['Float']>;\n};\n\nexport type MagicItem = {\n    __typename?: 'MagicItem';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    equipment_category?: Maybe<MagicItemEquipment_Category>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MagicItemEquipment_Category = {\n    __typename?: 'MagicItemEquipment_category';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MagicSchool = {\n    __typename?: 'MagicSchool';\n    _id: Scalars['String'];\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Monster = {\n    __typename?: 'Monster';\n    _id: Scalars['String'];\n    actions?: Maybe<Array<Maybe<MonsterActions>>>;\n    alignment?: Maybe<Scalars['String']>;\n    armor_class?: Maybe<Scalars['Float']>;\n    challenge_rating?: Maybe<Scalars['Float']>;\n    charisma?: Maybe<Scalars['Float']>;\n    condition_immunities?: Maybe<Array<Maybe<MonsterCondition_Immunities>>>;\n    constitution?: Maybe<Scalars['Float']>;\n    damage_immunities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_resistances?: Maybe<Array<Maybe<Scalars['String']>>>;\n    damage_vulnerabilities?: Maybe<Array<Maybe<Scalars['String']>>>;\n    dexterity?: Maybe<Scalars['Float']>;\n    forms?: Maybe<Array<Maybe<MonsterForms>>>;\n    hit_dice?: Maybe<Scalars['String']>;\n    hit_points?: Maybe<Scalars['Float']>;\n    index?: Maybe<Scalars['String']>;\n    intelligence?: Maybe<Scalars['Float']>;\n    languages?: Maybe<Scalars['String']>;\n    legendary_actions?: Maybe<Array<Maybe<MonsterLegendary_Actions>>>;\n    name?: Maybe<Scalars['String']>;\n    proficiencies?: Maybe<Array<Maybe<MonsterProficiencies>>>;\n    reactions?: Maybe<Array<Maybe<MonsterReactions>>>;\n    senses?: Maybe<MonsterSenses>;\n    size?: Maybe<Scalars['String']>;\n    special_abilities?: Maybe<Array<Maybe<MonsterSpecial_Abilities>>>;\n    speed?: Maybe<MonsterSpeed>;\n    strength?: Maybe<Scalars['Float']>;\n    subtype?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n    wisdom?: Maybe<Scalars['Float']>;\n    xp?: Maybe<Scalars['Float']>;\n};\n\nexport type MonsterActions = {\n    __typename?: 'MonsterActions';\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    damage?: Maybe<Array<Maybe<MonsterActionsDamage>>>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterActionsDamage = {\n    __typename?: 'MonsterActionsDamage';\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_dice?: Maybe<Scalars['String']>;\n    damage_type?: Maybe<MonsterActionsDamageDamage_Type>;\n};\n\nexport type MonsterActionsDamageDamage_Type = {\n    __typename?: 'MonsterActionsDamageDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterCondition_Immunities = {\n    __typename?: 'MonsterCondition_immunities';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterForms = {\n    __typename?: 'MonsterForms';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterLegendary_Actions = {\n    __typename?: 'MonsterLegendary_actions';\n    _id?: Maybe<Scalars['MongoID']>;\n    attack_bonus?: Maybe<Scalars['Float']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterProficiencies = {\n    __typename?: 'MonsterProficiencies';\n    _id?: Maybe<Scalars['MongoID']>;\n    proficiency?: Maybe<MonsterProficienciesProficiency>;\n    value?: Maybe<Scalars['Float']>;\n};\n\nexport type MonsterProficienciesProficiency = {\n    __typename?: 'MonsterProficienciesProficiency';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterReactions = {\n    __typename?: 'MonsterReactions';\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterSenses = {\n    __typename?: 'MonsterSenses';\n    blindsight?: Maybe<Scalars['String']>;\n    darkvision?: Maybe<Scalars['String']>;\n    passive_perception?: Maybe<Scalars['Float']>;\n    tremorsense?: Maybe<Scalars['String']>;\n    truesight?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterSpecial_Abilities = {\n    __typename?: 'MonsterSpecial_abilities';\n    _id?: Maybe<Scalars['MongoID']>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n};\n\nexport type MonsterSpeed = {\n    __typename?: 'MonsterSpeed';\n    burrow?: Maybe<Scalars['String']>;\n    climb?: Maybe<Scalars['String']>;\n    fly?: Maybe<Scalars['String']>;\n    hover?: Maybe<Scalars['Boolean']>;\n    swim?: Maybe<Scalars['String']>;\n    walk?: Maybe<Scalars['String']>;\n};\n\nexport type Proficiency = {\n    __typename?: 'Proficiency';\n    _id: Scalars['String'];\n    classes?: Maybe<Array<Maybe<ProficiencyClasses>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    races?: Maybe<Array<Maybe<ProficiencyRaces>>>;\n    references?: Maybe<Array<Maybe<ProficiencyReferences>>>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ProficiencyClasses = {\n    __typename?: 'ProficiencyClasses';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ProficiencyRaces = {\n    __typename?: 'ProficiencyRaces';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type ProficiencyReferences = {\n    __typename?: 'ProficiencyReferences';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    abilityScore?: Maybe<AbilityScore>;\n    abilityScores: Array<AbilityScore>;\n    alignment?: Maybe<Alignment>;\n    alignments: Array<Alignment>;\n    background?: Maybe<Background>;\n    backgrounds: Array<Background>;\n    class?: Maybe<Class>;\n    classes: Array<Class>;\n    condition?: Maybe<Condition>;\n    conditions: Array<Condition>;\n    damageType?: Maybe<DamageType>;\n    damageTypes: Array<DamageType>;\n    equipment?: Maybe<Equipment>;\n    equipmentCategories: Array<EquipmentCategory>;\n    equipmentCategory?: Maybe<EquipmentCategory>;\n    equipments: Array<Equipment>;\n    feat?: Maybe<Feat>;\n    feats: Array<Feat>;\n    feature?: Maybe<Feature>;\n    features: Array<Feature>;\n    language?: Maybe<Language>;\n    languages: Array<Language>;\n    level?: Maybe<Level>;\n    levels: Array<Level>;\n    magicItem?: Maybe<MagicItem>;\n    magicItems: Array<MagicItem>;\n    magicSchool?: Maybe<MagicSchool>;\n    magicSchools: Array<MagicSchool>;\n    monster?: Maybe<Monster>;\n    monsters: Array<Monster>;\n    proficiencies: Array<Proficiency>;\n    proficiency?: Maybe<Proficiency>;\n    race?: Maybe<Race>;\n    races: Array<Race>;\n    rule?: Maybe<Rule>;\n    ruleSection?: Maybe<RuleSection>;\n    ruleSections: Array<RuleSection>;\n    rules: Array<Rule>;\n    skill?: Maybe<Skill>;\n    skills: Array<Skill>;\n    spell?: Maybe<Spell>;\n    spells: Array<Spell>;\n    subclass?: Maybe<Subclass>;\n    subclasses: Array<Subclass>;\n    subrace?: Maybe<Subrace>;\n    subraces: Array<Subrace>;\n    trait?: Maybe<Trait>;\n    traits: Array<Trait>;\n    weaponProperties: Array<WeaponProperty>;\n    weaponProperty?: Maybe<WeaponProperty>;\n};\n\nexport type QueryAbilityScoreArgs = {\n    filter?: Maybe<FilterFindOneAbilityScoreInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneAbilityScoreInput>;\n};\n\nexport type QueryAbilityScoresArgs = {\n    filter?: Maybe<FilterFindManyAbilityScoreInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyAbilityScoreInput>;\n};\n\nexport type QueryAlignmentArgs = {\n    filter?: Maybe<FilterFindOneAlignmentInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneAlignmentInput>;\n};\n\nexport type QueryAlignmentsArgs = {\n    filter?: Maybe<FilterFindManyAlignmentInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyAlignmentInput>;\n};\n\nexport type QueryBackgroundArgs = {\n    filter?: Maybe<FilterFindOneBackgroundInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneBackgroundInput>;\n};\n\nexport type QueryBackgroundsArgs = {\n    filter?: Maybe<FilterFindManyBackgroundInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyBackgroundInput>;\n};\n\nexport type QueryClassArgs = {\n    filter?: Maybe<FilterFindOneClassInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneClassInput>;\n};\n\nexport type QueryClassesArgs = {\n    filter?: Maybe<FilterFindManyClassInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyClassInput>;\n};\n\nexport type QueryConditionArgs = {\n    filter?: Maybe<FilterFindOneConditionInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneConditionInput>;\n};\n\nexport type QueryConditionsArgs = {\n    filter?: Maybe<FilterFindManyConditionInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyConditionInput>;\n};\n\nexport type QueryDamageTypeArgs = {\n    filter?: Maybe<FilterFindOneDamageTypeInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneDamageTypeInput>;\n};\n\nexport type QueryDamageTypesArgs = {\n    filter?: Maybe<FilterFindManyDamageTypeInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyDamageTypeInput>;\n};\n\nexport type QueryEquipmentArgs = {\n    filter?: Maybe<FilterFindOneEquipmentInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneEquipmentInput>;\n};\n\nexport type QueryEquipmentCategoriesArgs = {\n    filter?: Maybe<FilterFindManyEquipmentCategoryInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyEquipmentCategoryInput>;\n};\n\nexport type QueryEquipmentCategoryArgs = {\n    filter?: Maybe<FilterFindOneEquipmentCategoryInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneEquipmentCategoryInput>;\n};\n\nexport type QueryEquipmentsArgs = {\n    filter?: Maybe<FilterFindManyEquipmentInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyEquipmentInput>;\n};\n\nexport type QueryFeatArgs = {\n    filter?: Maybe<FilterFindOneFeatInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneFeatInput>;\n};\n\nexport type QueryFeatsArgs = {\n    filter?: Maybe<FilterFindManyFeatInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyFeatInput>;\n};\n\nexport type QueryFeatureArgs = {\n    filter?: Maybe<FilterFindOneFeatureInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneFeatureInput>;\n};\n\nexport type QueryFeaturesArgs = {\n    filter?: Maybe<FilterFindManyFeatureInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyFeatureInput>;\n};\n\nexport type QueryLanguageArgs = {\n    filter?: Maybe<FilterFindOneLanguageInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneLanguageInput>;\n};\n\nexport type QueryLanguagesArgs = {\n    filter?: Maybe<FilterFindManyLanguageInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyLanguageInput>;\n};\n\nexport type QueryLevelArgs = {\n    filter?: Maybe<FilterFindOneLevelInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneLevelInput>;\n};\n\nexport type QueryLevelsArgs = {\n    filter?: Maybe<FilterFindManyLevelInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyLevelInput>;\n};\n\nexport type QueryMagicItemArgs = {\n    filter?: Maybe<FilterFindOneMagicItemInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneMagicItemInput>;\n};\n\nexport type QueryMagicItemsArgs = {\n    filter?: Maybe<FilterFindManyMagicItemInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyMagicItemInput>;\n};\n\nexport type QueryMagicSchoolArgs = {\n    filter?: Maybe<FilterFindOneMagicSchoolInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneMagicSchoolInput>;\n};\n\nexport type QueryMagicSchoolsArgs = {\n    filter?: Maybe<FilterFindManyMagicSchoolInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyMagicSchoolInput>;\n};\n\nexport type QueryMonsterArgs = {\n    filter?: Maybe<FilterFindOneMonsterInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneMonsterInput>;\n};\n\nexport type QueryMonstersArgs = {\n    filter?: Maybe<FilterFindManyMonsterInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyMonsterInput>;\n};\n\nexport type QueryProficienciesArgs = {\n    filter?: Maybe<FilterFindManyProficiencyInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyProficiencyInput>;\n};\n\nexport type QueryProficiencyArgs = {\n    filter?: Maybe<FilterFindOneProficiencyInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneProficiencyInput>;\n};\n\nexport type QueryRaceArgs = {\n    filter?: Maybe<FilterFindOneRaceInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneRaceInput>;\n};\n\nexport type QueryRacesArgs = {\n    filter?: Maybe<FilterFindManyRaceInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyRaceInput>;\n};\n\nexport type QueryRuleArgs = {\n    filter?: Maybe<FilterFindOneRuleInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneRuleInput>;\n};\n\nexport type QueryRuleSectionArgs = {\n    filter?: Maybe<FilterFindOneRuleSectionInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneRuleSectionInput>;\n};\n\nexport type QueryRuleSectionsArgs = {\n    filter?: Maybe<FilterFindManyRuleSectionInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyRuleSectionInput>;\n};\n\nexport type QueryRulesArgs = {\n    filter?: Maybe<FilterFindManyRuleInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyRuleInput>;\n};\n\nexport type QuerySkillArgs = {\n    filter?: Maybe<FilterFindOneSkillInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneSkillInput>;\n};\n\nexport type QuerySkillsArgs = {\n    filter?: Maybe<FilterFindManySkillInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySkillInput>;\n};\n\nexport type QuerySpellArgs = {\n    filter?: Maybe<FilterFindOneSpellInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneSpellInput>;\n};\n\nexport type QuerySpellsArgs = {\n    filter?: Maybe<FilterFindManySpellInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySpellInput>;\n};\n\nexport type QuerySubclassArgs = {\n    filter?: Maybe<FilterFindOneSubclassInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneSubclassInput>;\n};\n\nexport type QuerySubclassesArgs = {\n    filter?: Maybe<FilterFindManySubclassInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySubclassInput>;\n};\n\nexport type QuerySubraceArgs = {\n    filter?: Maybe<FilterFindOneSubraceInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneSubraceInput>;\n};\n\nexport type QuerySubracesArgs = {\n    filter?: Maybe<FilterFindManySubraceInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManySubraceInput>;\n};\n\nexport type QueryTraitArgs = {\n    filter?: Maybe<FilterFindOneTraitInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneTraitInput>;\n};\n\nexport type QueryTraitsArgs = {\n    filter?: Maybe<FilterFindManyTraitInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyTraitInput>;\n};\n\nexport type QueryWeaponPropertiesArgs = {\n    filter?: Maybe<FilterFindManyWeaponPropertyInput>;\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyWeaponPropertyInput>;\n};\n\nexport type QueryWeaponPropertyArgs = {\n    filter?: Maybe<FilterFindOneWeaponPropertyInput>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneWeaponPropertyInput>;\n};\n\nexport type Race = {\n    __typename?: 'Race';\n    _id: Scalars['String'];\n    ability_bonus_options?: Maybe<RaceAbility_Bonus_Options>;\n    ability_bonuses?: Maybe<Array<Maybe<RaceAbility_Bonuses>>>;\n    age?: Maybe<Scalars['String']>;\n    alignment?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_desc?: Maybe<Scalars['String']>;\n    language_options?: Maybe<RaceLanguage_Options>;\n    languages?: Maybe<Array<Maybe<RaceLanguages>>>;\n    name?: Maybe<Scalars['String']>;\n    size?: Maybe<Scalars['String']>;\n    size_description?: Maybe<Scalars['String']>;\n    speed?: Maybe<Scalars['Float']>;\n    starting_proficiencies?: Maybe<Array<Maybe<RaceStarting_Proficiencies>>>;\n    starting_proficiency_options?: Maybe<RaceStarting_Proficiency_Options>;\n    subraces?: Maybe<Array<Maybe<RaceSubraces>>>;\n    traits: Array<Trait>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceTraitsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyTraitInput>;\n};\n\nexport type RaceAbility_Bonus_Options = {\n    __typename?: 'RaceAbility_bonus_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<RaceAbility_Bonus_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type RaceAbility_Bonus_OptionsFrom = {\n    __typename?: 'RaceAbility_bonus_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<RaceAbility_Bonus_OptionsFromAbility_Score>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type RaceAbility_Bonus_OptionsFromAbility_Score = {\n    __typename?: 'RaceAbility_bonus_optionsFromAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceAbility_Bonuses = {\n    __typename?: 'RaceAbility_bonuses';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<RaceAbility_BonusesAbility_Score>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type RaceAbility_BonusesAbility_Score = {\n    __typename?: 'RaceAbility_bonusesAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceLanguage_Options = {\n    __typename?: 'RaceLanguage_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<RaceLanguage_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type RaceLanguage_OptionsFrom = {\n    __typename?: 'RaceLanguage_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceLanguages = {\n    __typename?: 'RaceLanguages';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceStarting_Proficiencies = {\n    __typename?: 'RaceStarting_proficiencies';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceStarting_Proficiency_Options = {\n    __typename?: 'RaceStarting_proficiency_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<RaceStarting_Proficiency_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type RaceStarting_Proficiency_OptionsFrom = {\n    __typename?: 'RaceStarting_proficiency_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RaceSubraces = {\n    __typename?: 'RaceSubraces';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Rule = {\n    __typename?: 'Rule';\n    _id: Scalars['String'];\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    subsections: Array<RuleSection>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type RuleSubsectionsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyRuleSectionInput>;\n};\n\nexport type RuleSection = {\n    __typename?: 'RuleSection';\n    _id: Scalars['String'];\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Skill = {\n    __typename?: 'Skill';\n    _id: Scalars['String'];\n    ability_score?: Maybe<SkillAbility_Score>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SkillAbility_Score = {\n    __typename?: 'SkillAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport enum SortFindManyAbilityScoreInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    FullNameAsc = 'FULL_NAME_ASC',\n    FullNameDesc = 'FULL_NAME_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyAlignmentInput {\n    AbbreviationAsc = 'ABBREVIATION_ASC',\n    AbbreviationDesc = 'ABBREVIATION_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyBackgroundInput {\n    BondsChooseAsc = 'BONDS__CHOOSE_ASC',\n    BondsChooseDesc = 'BONDS__CHOOSE_DESC',\n    BondsFromAsc = 'BONDS__FROM_ASC',\n    BondsFromDesc = 'BONDS__FROM_DESC',\n    BondsTypeAsc = 'BONDS__TYPE_ASC',\n    BondsTypeDesc = 'BONDS__TYPE_DESC',\n    FeatureDescAsc = 'FEATURE__DESC_ASC',\n    FeatureDescDesc = 'FEATURE__DESC_DESC',\n    FeatureNameAsc = 'FEATURE__NAME_ASC',\n    FeatureNameDesc = 'FEATURE__NAME_DESC',\n    FlawsChooseAsc = 'FLAWS__CHOOSE_ASC',\n    FlawsChooseDesc = 'FLAWS__CHOOSE_DESC',\n    FlawsFromAsc = 'FLAWS__FROM_ASC',\n    FlawsFromDesc = 'FLAWS__FROM_DESC',\n    FlawsTypeAsc = 'FLAWS__TYPE_ASC',\n    FlawsTypeDesc = 'FLAWS__TYPE_DESC',\n    IdealsChooseAsc = 'IDEALS__CHOOSE_ASC',\n    IdealsChooseDesc = 'IDEALS__CHOOSE_DESC',\n    IdealsTypeAsc = 'IDEALS__TYPE_ASC',\n    IdealsTypeDesc = 'IDEALS__TYPE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    PersonalityTraitsChooseAsc = 'PERSONALITY_TRAITS__CHOOSE_ASC',\n    PersonalityTraitsChooseDesc = 'PERSONALITY_TRAITS__CHOOSE_DESC',\n    PersonalityTraitsFromAsc = 'PERSONALITY_TRAITS__FROM_ASC',\n    PersonalityTraitsFromDesc = 'PERSONALITY_TRAITS__FROM_DESC',\n    PersonalityTraitsTypeAsc = 'PERSONALITY_TRAITS__TYPE_ASC',\n    PersonalityTraitsTypeDesc = 'PERSONALITY_TRAITS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyClassInput {\n    ClassLevelsAsc = 'CLASS_LEVELS_ASC',\n    ClassLevelsDesc = 'CLASS_LEVELS_DESC',\n    HitDieAsc = 'HIT_DIE_ASC',\n    HitDieDesc = 'HIT_DIE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    MultiClassingPrerequisiteOptionsChooseAsc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_ASC',\n    MultiClassingPrerequisiteOptionsChooseDesc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_DESC',\n    MultiClassingPrerequisiteOptionsTypeAsc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_ASC',\n    MultiClassingPrerequisiteOptionsTypeDesc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SpellcastingLevelAsc = 'SPELLCASTING__LEVEL_ASC',\n    SpellcastingLevelDesc = 'SPELLCASTING__LEVEL_DESC',\n    SpellcastingSpellcastingAbilityIndexAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__INDEX_ASC',\n    SpellcastingSpellcastingAbilityIndexDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__INDEX_DESC',\n    SpellcastingSpellcastingAbilityNameAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__NAME_ASC',\n    SpellcastingSpellcastingAbilityNameDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__NAME_DESC',\n    SpellcastingSpellcastingAbilityUrlAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__URL_ASC',\n    SpellcastingSpellcastingAbilityUrlDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__URL_DESC',\n    SpellsAsc = 'SPELLS_ASC',\n    SpellsDesc = 'SPELLS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyConditionInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyDamageTypeInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyEquipmentCategoryInput {\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyEquipmentInput {\n    ArmorCategoryAsc = 'ARMOR_CATEGORY_ASC',\n    ArmorCategoryDesc = 'ARMOR_CATEGORY_DESC',\n    ArmorClassBaseAsc = 'ARMOR_CLASS__BASE_ASC',\n    ArmorClassBaseDesc = 'ARMOR_CLASS__BASE_DESC',\n    ArmorClassDexBonusAsc = 'ARMOR_CLASS__DEX_BONUS_ASC',\n    ArmorClassDexBonusDesc = 'ARMOR_CLASS__DEX_BONUS_DESC',\n    ArmorClassMaxBonusAsc = 'ARMOR_CLASS__MAX_BONUS_ASC',\n    ArmorClassMaxBonusDesc = 'ARMOR_CLASS__MAX_BONUS_DESC',\n    CapacityAsc = 'CAPACITY_ASC',\n    CapacityDesc = 'CAPACITY_DESC',\n    CategoryRangeAsc = 'CATEGORY_RANGE_ASC',\n    CategoryRangeDesc = 'CATEGORY_RANGE_DESC',\n    CostQuantityAsc = 'COST__QUANTITY_ASC',\n    CostQuantityDesc = 'COST__QUANTITY_DESC',\n    CostUnitAsc = 'COST__UNIT_ASC',\n    CostUnitDesc = 'COST__UNIT_DESC',\n    DamageDamageDiceAsc = 'DAMAGE__DAMAGE_DICE_ASC',\n    DamageDamageDiceDesc = 'DAMAGE__DAMAGE_DICE_DESC',\n    DamageDamageTypeIndexAsc = 'DAMAGE__DAMAGE_TYPE__INDEX_ASC',\n    DamageDamageTypeIndexDesc = 'DAMAGE__DAMAGE_TYPE__INDEX_DESC',\n    DamageDamageTypeNameAsc = 'DAMAGE__DAMAGE_TYPE__NAME_ASC',\n    DamageDamageTypeNameDesc = 'DAMAGE__DAMAGE_TYPE__NAME_DESC',\n    DamageDamageTypeUrlAsc = 'DAMAGE__DAMAGE_TYPE__URL_ASC',\n    DamageDamageTypeUrlDesc = 'DAMAGE__DAMAGE_TYPE__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    EquipmentCategoryIndexAsc = 'EQUIPMENT_CATEGORY__INDEX_ASC',\n    EquipmentCategoryIndexDesc = 'EQUIPMENT_CATEGORY__INDEX_DESC',\n    EquipmentCategoryNameAsc = 'EQUIPMENT_CATEGORY__NAME_ASC',\n    EquipmentCategoryNameDesc = 'EQUIPMENT_CATEGORY__NAME_DESC',\n    EquipmentCategoryUrlAsc = 'EQUIPMENT_CATEGORY__URL_ASC',\n    EquipmentCategoryUrlDesc = 'EQUIPMENT_CATEGORY__URL_DESC',\n    GearCategoryIndexAsc = 'GEAR_CATEGORY__INDEX_ASC',\n    GearCategoryIndexDesc = 'GEAR_CATEGORY__INDEX_DESC',\n    GearCategoryNameAsc = 'GEAR_CATEGORY__NAME_ASC',\n    GearCategoryNameDesc = 'GEAR_CATEGORY__NAME_DESC',\n    GearCategoryUrlAsc = 'GEAR_CATEGORY__URL_ASC',\n    GearCategoryUrlDesc = 'GEAR_CATEGORY__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    QuantityAsc = 'QUANTITY_ASC',\n    QuantityDesc = 'QUANTITY_DESC',\n    RangeLongAsc = 'RANGE__LONG_ASC',\n    RangeLongDesc = 'RANGE__LONG_DESC',\n    RangeNormalAsc = 'RANGE__NORMAL_ASC',\n    RangeNormalDesc = 'RANGE__NORMAL_DESC',\n    SpecialAsc = 'SPECIAL_ASC',\n    SpecialDesc = 'SPECIAL_DESC',\n    SpeedQuantityAsc = 'SPEED__QUANTITY_ASC',\n    SpeedQuantityDesc = 'SPEED__QUANTITY_DESC',\n    SpeedUnitAsc = 'SPEED__UNIT_ASC',\n    SpeedUnitDesc = 'SPEED__UNIT_DESC',\n    StealthDisadvantageAsc = 'STEALTH_DISADVANTAGE_ASC',\n    StealthDisadvantageDesc = 'STEALTH_DISADVANTAGE_DESC',\n    StrMinimumAsc = 'STR_MINIMUM_ASC',\n    StrMinimumDesc = 'STR_MINIMUM_DESC',\n    ThrowRangeLongAsc = 'THROW_RANGE__LONG_ASC',\n    ThrowRangeLongDesc = 'THROW_RANGE__LONG_DESC',\n    ThrowRangeNormalAsc = 'THROW_RANGE__NORMAL_ASC',\n    ThrowRangeNormalDesc = 'THROW_RANGE__NORMAL_DESC',\n    ToolCategoryAsc = 'TOOL_CATEGORY_ASC',\n    ToolCategoryDesc = 'TOOL_CATEGORY_DESC',\n    TwoHandedDamageDamageDiceAsc = 'TWO_HANDED_DAMAGE__DAMAGE_DICE_ASC',\n    TwoHandedDamageDamageDiceDesc = 'TWO_HANDED_DAMAGE__DAMAGE_DICE_DESC',\n    TwoHandedDamageDamageTypeIndexAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_ASC',\n    TwoHandedDamageDamageTypeIndexDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_DESC',\n    TwoHandedDamageDamageTypeNameAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_ASC',\n    TwoHandedDamageDamageTypeNameDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_DESC',\n    TwoHandedDamageDamageTypeUrlAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_ASC',\n    TwoHandedDamageDamageTypeUrlDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    VehicleCategoryAsc = 'VEHICLE_CATEGORY_ASC',\n    VehicleCategoryDesc = 'VEHICLE_CATEGORY_DESC',\n    WeaponCategoryAsc = 'WEAPON_CATEGORY_ASC',\n    WeaponCategoryDesc = 'WEAPON_CATEGORY_DESC',\n    WeaponRangeAsc = 'WEAPON_RANGE_ASC',\n    WeaponRangeDesc = 'WEAPON_RANGE_DESC',\n    WeightAsc = 'WEIGHT_ASC',\n    WeightDesc = 'WEIGHT_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyFeatInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyFeatureInput {\n    ChoiceChooseAsc = 'CHOICE__CHOOSE_ASC',\n    ChoiceChooseDesc = 'CHOICE__CHOOSE_DESC',\n    ChoiceTypeAsc = 'CHOICE__TYPE_ASC',\n    ChoiceTypeDesc = 'CHOICE__TYPE_DESC',\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    FeatureSpecificExpertiseOptionsChooseAsc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_ASC',\n    FeatureSpecificExpertiseOptionsChooseDesc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_DESC',\n    FeatureSpecificExpertiseOptionsTypeAsc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_ASC',\n    FeatureSpecificExpertiseOptionsTypeDesc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_DESC',\n    FeatureSpecificSubfeatureOptionsChooseAsc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_ASC',\n    FeatureSpecificSubfeatureOptionsChooseDesc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_DESC',\n    FeatureSpecificSubfeatureOptionsTypeAsc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_ASC',\n    FeatureSpecificSubfeatureOptionsTypeDesc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LevelAsc = 'LEVEL_ASC',\n    LevelDesc = 'LEVEL_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ParentIndexAsc = 'PARENT__INDEX_ASC',\n    ParentIndexDesc = 'PARENT__INDEX_DESC',\n    ParentNameAsc = 'PARENT__NAME_ASC',\n    ParentNameDesc = 'PARENT__NAME_DESC',\n    ParentUrlAsc = 'PARENT__URL_ASC',\n    ParentUrlDesc = 'PARENT__URL_DESC',\n    ReferenceAsc = 'REFERENCE_ASC',\n    ReferenceDesc = 'REFERENCE_DESC',\n    SubclassIndexAsc = 'SUBCLASS__INDEX_ASC',\n    SubclassIndexDesc = 'SUBCLASS__INDEX_DESC',\n    SubclassNameAsc = 'SUBCLASS__NAME_ASC',\n    SubclassNameDesc = 'SUBCLASS__NAME_DESC',\n    SubclassUrlAsc = 'SUBCLASS__URL_ASC',\n    SubclassUrlDesc = 'SUBCLASS__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyLanguageInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ScriptAsc = 'SCRIPT_ASC',\n    ScriptDesc = 'SCRIPT_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    TypicalSpeakersAsc = 'TYPICAL_SPEAKERS_ASC',\n    TypicalSpeakersDesc = 'TYPICAL_SPEAKERS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyLevelInput {\n    AbilityScoreBonusesAsc = 'ABILITY_SCORE_BONUSES_ASC',\n    AbilityScoreBonusesDesc = 'ABILITY_SCORE_BONUSES_DESC',\n    ClassSpecificActionSurgesAsc = 'CLASS_SPECIFIC__ACTION_SURGES_ASC',\n    ClassSpecificActionSurgesDesc = 'CLASS_SPECIFIC__ACTION_SURGES_DESC',\n    ClassSpecificArcaneRecoveryLevelsAsc = 'CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_ASC',\n    ClassSpecificArcaneRecoveryLevelsDesc = 'CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_DESC',\n    ClassSpecificAuraRangeAsc = 'CLASS_SPECIFIC__AURA_RANGE_ASC',\n    ClassSpecificAuraRangeDesc = 'CLASS_SPECIFIC__AURA_RANGE_DESC',\n    ClassSpecificBardicInspirationDieAsc = 'CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_ASC',\n    ClassSpecificBardicInspirationDieDesc = 'CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_DESC',\n    ClassSpecificBrutalCriticalDiceAsc = 'CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_ASC',\n    ClassSpecificBrutalCriticalDiceDesc = 'CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_DESC',\n    ClassSpecificChannelDivinityChargesAsc = 'CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_ASC',\n    ClassSpecificChannelDivinityChargesDesc = 'CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_DESC',\n    ClassSpecificDestroyUndeadCrAsc = 'CLASS_SPECIFIC__DESTROY_UNDEAD_CR_ASC',\n    ClassSpecificDestroyUndeadCrDesc = 'CLASS_SPECIFIC__DESTROY_UNDEAD_CR_DESC',\n    ClassSpecificExtraAttacksAsc = 'CLASS_SPECIFIC__EXTRA_ATTACKS_ASC',\n    ClassSpecificExtraAttacksDesc = 'CLASS_SPECIFIC__EXTRA_ATTACKS_DESC',\n    ClassSpecificFavoredEnemiesAsc = 'CLASS_SPECIFIC__FAVORED_ENEMIES_ASC',\n    ClassSpecificFavoredEnemiesDesc = 'CLASS_SPECIFIC__FAVORED_ENEMIES_DESC',\n    ClassSpecificFavoredTerrainAsc = 'CLASS_SPECIFIC__FAVORED_TERRAIN_ASC',\n    ClassSpecificFavoredTerrainDesc = 'CLASS_SPECIFIC__FAVORED_TERRAIN_DESC',\n    ClassSpecificIndomitableUsesAsc = 'CLASS_SPECIFIC__INDOMITABLE_USES_ASC',\n    ClassSpecificIndomitableUsesDesc = 'CLASS_SPECIFIC__INDOMITABLE_USES_DESC',\n    ClassSpecificInvocationsKnownAsc = 'CLASS_SPECIFIC__INVOCATIONS_KNOWN_ASC',\n    ClassSpecificInvocationsKnownDesc = 'CLASS_SPECIFIC__INVOCATIONS_KNOWN_DESC',\n    ClassSpecificKiPointsAsc = 'CLASS_SPECIFIC__KI_POINTS_ASC',\n    ClassSpecificKiPointsDesc = 'CLASS_SPECIFIC__KI_POINTS_DESC',\n    ClassSpecificMagicalSecretsMax_5Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_ASC',\n    ClassSpecificMagicalSecretsMax_5Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_DESC',\n    ClassSpecificMagicalSecretsMax_7Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_ASC',\n    ClassSpecificMagicalSecretsMax_7Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_DESC',\n    ClassSpecificMagicalSecretsMax_9Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_ASC',\n    ClassSpecificMagicalSecretsMax_9Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_DESC',\n    ClassSpecificMartialArtsDiceCountAsc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_ASC',\n    ClassSpecificMartialArtsDiceCountDesc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_DESC',\n    ClassSpecificMartialArtsDiceValueAsc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_ASC',\n    ClassSpecificMartialArtsDiceValueDesc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_DESC',\n    ClassSpecificMetamagicKnownAsc = 'CLASS_SPECIFIC__METAMAGIC_KNOWN_ASC',\n    ClassSpecificMetamagicKnownDesc = 'CLASS_SPECIFIC__METAMAGIC_KNOWN_DESC',\n    ClassSpecificMysticArcanumLevel_6Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_ASC',\n    ClassSpecificMysticArcanumLevel_6Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_DESC',\n    ClassSpecificMysticArcanumLevel_7Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_ASC',\n    ClassSpecificMysticArcanumLevel_7Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_DESC',\n    ClassSpecificMysticArcanumLevel_8Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_ASC',\n    ClassSpecificMysticArcanumLevel_8Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_DESC',\n    ClassSpecificMysticArcanumLevel_9Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_ASC',\n    ClassSpecificMysticArcanumLevel_9Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_DESC',\n    ClassSpecificRageCountAsc = 'CLASS_SPECIFIC__RAGE_COUNT_ASC',\n    ClassSpecificRageCountDesc = 'CLASS_SPECIFIC__RAGE_COUNT_DESC',\n    ClassSpecificRageDamageBonusAsc = 'CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_ASC',\n    ClassSpecificRageDamageBonusDesc = 'CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_DESC',\n    ClassSpecificSneakAttackDiceCountAsc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_ASC',\n    ClassSpecificSneakAttackDiceCountDesc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_DESC',\n    ClassSpecificSneakAttackDiceValueAsc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_ASC',\n    ClassSpecificSneakAttackDiceValueDesc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_DESC',\n    ClassSpecificSongOfRestDieAsc = 'CLASS_SPECIFIC__SONG_OF_REST_DIE_ASC',\n    ClassSpecificSongOfRestDieDesc = 'CLASS_SPECIFIC__SONG_OF_REST_DIE_DESC',\n    ClassSpecificSorceryPointsAsc = 'CLASS_SPECIFIC__SORCERY_POINTS_ASC',\n    ClassSpecificSorceryPointsDesc = 'CLASS_SPECIFIC__SORCERY_POINTS_DESC',\n    ClassSpecificUnarmoredMovementAsc = 'CLASS_SPECIFIC__UNARMORED_MOVEMENT_ASC',\n    ClassSpecificUnarmoredMovementDesc = 'CLASS_SPECIFIC__UNARMORED_MOVEMENT_DESC',\n    ClassSpecificWildShapeFlyAsc = 'CLASS_SPECIFIC__WILD_SHAPE_FLY_ASC',\n    ClassSpecificWildShapeFlyDesc = 'CLASS_SPECIFIC__WILD_SHAPE_FLY_DESC',\n    ClassSpecificWildShapeMaxCrAsc = 'CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_ASC',\n    ClassSpecificWildShapeMaxCrDesc = 'CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_DESC',\n    ClassSpecificWildShapeSwimAsc = 'CLASS_SPECIFIC__WILD_SHAPE_SWIM_ASC',\n    ClassSpecificWildShapeSwimDesc = 'CLASS_SPECIFIC__WILD_SHAPE_SWIM_DESC',\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LevelAsc = 'LEVEL_ASC',\n    LevelDesc = 'LEVEL_DESC',\n    ProfBonusAsc = 'PROF_BONUS_ASC',\n    ProfBonusDesc = 'PROF_BONUS_DESC',\n    SpellcastingCantripsKnownAsc = 'SPELLCASTING__CANTRIPS_KNOWN_ASC',\n    SpellcastingCantripsKnownDesc = 'SPELLCASTING__CANTRIPS_KNOWN_DESC',\n    SpellcastingSpellsKnownAsc = 'SPELLCASTING__SPELLS_KNOWN_ASC',\n    SpellcastingSpellsKnownDesc = 'SPELLCASTING__SPELLS_KNOWN_DESC',\n    SpellcastingSpellSlotsLevel_1Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_1_ASC',\n    SpellcastingSpellSlotsLevel_1Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_1_DESC',\n    SpellcastingSpellSlotsLevel_2Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_2_ASC',\n    SpellcastingSpellSlotsLevel_2Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_2_DESC',\n    SpellcastingSpellSlotsLevel_3Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_3_ASC',\n    SpellcastingSpellSlotsLevel_3Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_3_DESC',\n    SpellcastingSpellSlotsLevel_4Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_4_ASC',\n    SpellcastingSpellSlotsLevel_4Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_4_DESC',\n    SpellcastingSpellSlotsLevel_5Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_5_ASC',\n    SpellcastingSpellSlotsLevel_5Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_5_DESC',\n    SpellcastingSpellSlotsLevel_6Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_6_ASC',\n    SpellcastingSpellSlotsLevel_6Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_6_DESC',\n    SpellcastingSpellSlotsLevel_7Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_7_ASC',\n    SpellcastingSpellSlotsLevel_7Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_7_DESC',\n    SpellcastingSpellSlotsLevel_8Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_8_ASC',\n    SpellcastingSpellSlotsLevel_8Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_8_DESC',\n    SpellcastingSpellSlotsLevel_9Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_9_ASC',\n    SpellcastingSpellSlotsLevel_9Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_9_DESC',\n    SubclassSpecificAdditionalMagicalSecretsMaxLvlAsc = 'SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_ASC',\n    SubclassSpecificAdditionalMagicalSecretsMaxLvlDesc = 'SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_DESC',\n    SubclassSpecificAuraRangeAsc = 'SUBCLASS_SPECIFIC__AURA_RANGE_ASC',\n    SubclassSpecificAuraRangeDesc = 'SUBCLASS_SPECIFIC__AURA_RANGE_DESC',\n    SubclassIndexAsc = 'SUBCLASS__INDEX_ASC',\n    SubclassIndexDesc = 'SUBCLASS__INDEX_DESC',\n    SubclassNameAsc = 'SUBCLASS__NAME_ASC',\n    SubclassNameDesc = 'SUBCLASS__NAME_DESC',\n    SubclassUrlAsc = 'SUBCLASS__URL_ASC',\n    SubclassUrlDesc = 'SUBCLASS__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyMagicItemInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    EquipmentCategoryIndexAsc = 'EQUIPMENT_CATEGORY__INDEX_ASC',\n    EquipmentCategoryIndexDesc = 'EQUIPMENT_CATEGORY__INDEX_DESC',\n    EquipmentCategoryNameAsc = 'EQUIPMENT_CATEGORY__NAME_ASC',\n    EquipmentCategoryNameDesc = 'EQUIPMENT_CATEGORY__NAME_DESC',\n    EquipmentCategoryUrlAsc = 'EQUIPMENT_CATEGORY__URL_ASC',\n    EquipmentCategoryUrlDesc = 'EQUIPMENT_CATEGORY__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyMagicSchoolInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyMonsterInput {\n    AlignmentAsc = 'ALIGNMENT_ASC',\n    AlignmentDesc = 'ALIGNMENT_DESC',\n    ArmorClassAsc = 'ARMOR_CLASS_ASC',\n    ArmorClassDesc = 'ARMOR_CLASS_DESC',\n    ChallengeRatingAsc = 'CHALLENGE_RATING_ASC',\n    ChallengeRatingDesc = 'CHALLENGE_RATING_DESC',\n    CharismaAsc = 'CHARISMA_ASC',\n    CharismaDesc = 'CHARISMA_DESC',\n    ConstitutionAsc = 'CONSTITUTION_ASC',\n    ConstitutionDesc = 'CONSTITUTION_DESC',\n    DexterityAsc = 'DEXTERITY_ASC',\n    DexterityDesc = 'DEXTERITY_DESC',\n    HitDiceAsc = 'HIT_DICE_ASC',\n    HitDiceDesc = 'HIT_DICE_DESC',\n    HitPointsAsc = 'HIT_POINTS_ASC',\n    HitPointsDesc = 'HIT_POINTS_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    IntelligenceAsc = 'INTELLIGENCE_ASC',\n    IntelligenceDesc = 'INTELLIGENCE_DESC',\n    LanguagesAsc = 'LANGUAGES_ASC',\n    LanguagesDesc = 'LANGUAGES_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SensesBlindsightAsc = 'SENSES__BLINDSIGHT_ASC',\n    SensesBlindsightDesc = 'SENSES__BLINDSIGHT_DESC',\n    SensesDarkvisionAsc = 'SENSES__DARKVISION_ASC',\n    SensesDarkvisionDesc = 'SENSES__DARKVISION_DESC',\n    SensesPassivePerceptionAsc = 'SENSES__PASSIVE_PERCEPTION_ASC',\n    SensesPassivePerceptionDesc = 'SENSES__PASSIVE_PERCEPTION_DESC',\n    SensesTremorsenseAsc = 'SENSES__TREMORSENSE_ASC',\n    SensesTremorsenseDesc = 'SENSES__TREMORSENSE_DESC',\n    SensesTruesightAsc = 'SENSES__TRUESIGHT_ASC',\n    SensesTruesightDesc = 'SENSES__TRUESIGHT_DESC',\n    SizeAsc = 'SIZE_ASC',\n    SizeDesc = 'SIZE_DESC',\n    SpeedBurrowAsc = 'SPEED__BURROW_ASC',\n    SpeedBurrowDesc = 'SPEED__BURROW_DESC',\n    SpeedClimbAsc = 'SPEED__CLIMB_ASC',\n    SpeedClimbDesc = 'SPEED__CLIMB_DESC',\n    SpeedFlyAsc = 'SPEED__FLY_ASC',\n    SpeedFlyDesc = 'SPEED__FLY_DESC',\n    SpeedHoverAsc = 'SPEED__HOVER_ASC',\n    SpeedHoverDesc = 'SPEED__HOVER_DESC',\n    SpeedSwimAsc = 'SPEED__SWIM_ASC',\n    SpeedSwimDesc = 'SPEED__SWIM_DESC',\n    SpeedWalkAsc = 'SPEED__WALK_ASC',\n    SpeedWalkDesc = 'SPEED__WALK_DESC',\n    StrengthAsc = 'STRENGTH_ASC',\n    StrengthDesc = 'STRENGTH_DESC',\n    SubtypeAsc = 'SUBTYPE_ASC',\n    SubtypeDesc = 'SUBTYPE_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    WisdomAsc = 'WISDOM_ASC',\n    WisdomDesc = 'WISDOM_DESC',\n    XpAsc = 'XP_ASC',\n    XpDesc = 'XP_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyProficiencyInput {\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyRaceInput {\n    AbilityBonusOptionsChooseAsc = 'ABILITY_BONUS_OPTIONS__CHOOSE_ASC',\n    AbilityBonusOptionsChooseDesc = 'ABILITY_BONUS_OPTIONS__CHOOSE_DESC',\n    AbilityBonusOptionsTypeAsc = 'ABILITY_BONUS_OPTIONS__TYPE_ASC',\n    AbilityBonusOptionsTypeDesc = 'ABILITY_BONUS_OPTIONS__TYPE_DESC',\n    AgeAsc = 'AGE_ASC',\n    AgeDesc = 'AGE_DESC',\n    AlignmentAsc = 'ALIGNMENT_ASC',\n    AlignmentDesc = 'ALIGNMENT_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageDescAsc = 'LANGUAGE_DESC_ASC',\n    LanguageDescDesc = 'LANGUAGE_DESC_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SizeAsc = 'SIZE_ASC',\n    SizeDesc = 'SIZE_DESC',\n    SizeDescriptionAsc = 'SIZE_DESCRIPTION_ASC',\n    SizeDescriptionDesc = 'SIZE_DESCRIPTION_DESC',\n    SpeedAsc = 'SPEED_ASC',\n    SpeedDesc = 'SPEED_DESC',\n    StartingProficiencyOptionsChooseAsc = 'STARTING_PROFICIENCY_OPTIONS__CHOOSE_ASC',\n    StartingProficiencyOptionsChooseDesc = 'STARTING_PROFICIENCY_OPTIONS__CHOOSE_DESC',\n    StartingProficiencyOptionsTypeAsc = 'STARTING_PROFICIENCY_OPTIONS__TYPE_ASC',\n    StartingProficiencyOptionsTypeDesc = 'STARTING_PROFICIENCY_OPTIONS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyRuleInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyRuleSectionInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManySkillInput {\n    AbilityScoreIndexAsc = 'ABILITY_SCORE__INDEX_ASC',\n    AbilityScoreIndexDesc = 'ABILITY_SCORE__INDEX_DESC',\n    AbilityScoreNameAsc = 'ABILITY_SCORE__NAME_ASC',\n    AbilityScoreNameDesc = 'ABILITY_SCORE__NAME_DESC',\n    AbilityScoreUrlAsc = 'ABILITY_SCORE__URL_ASC',\n    AbilityScoreUrlDesc = 'ABILITY_SCORE__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManySpellInput {\n    SchoolIndexAsc = 'SCHOOL__INDEX_ASC',\n    SchoolIndexDesc = 'SCHOOL__INDEX_DESC',\n    SchoolNameAsc = 'SCHOOL__NAME_ASC',\n    SchoolNameDesc = 'SCHOOL__NAME_DESC',\n    SchoolUrlAsc = 'SCHOOL__URL_ASC',\n    SchoolUrlDesc = 'SCHOOL__URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManySubclassInput {\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SubclassFlavorAsc = 'SUBCLASS_FLAVOR_ASC',\n    SubclassFlavorDesc = 'SUBCLASS_FLAVOR_DESC',\n    SubclassLevelsAsc = 'SUBCLASS_LEVELS_ASC',\n    SubclassLevelsDesc = 'SUBCLASS_LEVELS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManySubraceInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    RaceIndexAsc = 'RACE__INDEX_ASC',\n    RaceIndexDesc = 'RACE__INDEX_DESC',\n    RaceNameAsc = 'RACE__NAME_ASC',\n    RaceNameDesc = 'RACE__NAME_DESC',\n    RaceUrlAsc = 'RACE__URL_ASC',\n    RaceUrlDesc = 'RACE__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyTraitInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ParentIndexAsc = 'PARENT__INDEX_ASC',\n    ParentIndexDesc = 'PARENT__INDEX_DESC',\n    ParentNameAsc = 'PARENT__NAME_ASC',\n    ParentNameDesc = 'PARENT__NAME_DESC',\n    ParentUrlAsc = 'PARENT__URL_ASC',\n    ParentUrlDesc = 'PARENT__URL_DESC',\n    ProficiencyChoicesChooseAsc = 'PROFICIENCY_CHOICES__CHOOSE_ASC',\n    ProficiencyChoicesChooseDesc = 'PROFICIENCY_CHOICES__CHOOSE_DESC',\n    ProficiencyChoicesTypeAsc = 'PROFICIENCY_CHOICES__TYPE_ASC',\n    ProficiencyChoicesTypeDesc = 'PROFICIENCY_CHOICES__TYPE_DESC',\n    TraitSpecificBreathWeaponDcDcTypeIndexAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_ASC',\n    TraitSpecificBreathWeaponDcDcTypeIndexDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_DESC',\n    TraitSpecificBreathWeaponDcDcTypeNameAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_ASC',\n    TraitSpecificBreathWeaponDcDcTypeNameDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_DESC',\n    TraitSpecificBreathWeaponDcDcTypeUrlAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_ASC',\n    TraitSpecificBreathWeaponDcDcTypeUrlDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_DESC',\n    TraitSpecificBreathWeaponDcSuccessTypeAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_ASC',\n    TraitSpecificBreathWeaponDcSuccessTypeDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_DESC',\n    TraitSpecificBreathWeaponDescAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DESC_ASC',\n    TraitSpecificBreathWeaponDescDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DESC_DESC',\n    TraitSpecificBreathWeaponNameAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__NAME_ASC',\n    TraitSpecificBreathWeaponNameDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__NAME_DESC',\n    TraitSpecificBreathWeaponUsageTimesAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_ASC',\n    TraitSpecificBreathWeaponUsageTimesDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_DESC',\n    TraitSpecificBreathWeaponUsageTypeAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_ASC',\n    TraitSpecificBreathWeaponUsageTypeDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_DESC',\n    TraitSpecificDamageTypeIndexAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_ASC',\n    TraitSpecificDamageTypeIndexDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_DESC',\n    TraitSpecificDamageTypeNameAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_ASC',\n    TraitSpecificDamageTypeNameDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_DESC',\n    TraitSpecificDamageTypeUrlAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__URL_ASC',\n    TraitSpecificDamageTypeUrlDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__URL_DESC',\n    TraitSpecificSpellOptionsChooseAsc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_ASC',\n    TraitSpecificSpellOptionsChooseDesc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_DESC',\n    TraitSpecificSpellOptionsTypeAsc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_ASC',\n    TraitSpecificSpellOptionsTypeDesc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_DESC',\n    TraitSpecificSubtraitOptionsChooseAsc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_ASC',\n    TraitSpecificSubtraitOptionsChooseDesc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_DESC',\n    TraitSpecificSubtraitOptionsTypeAsc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_ASC',\n    TraitSpecificSubtraitOptionsTypeDesc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindManyWeaponPropertyInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneAbilityScoreInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    FullNameAsc = 'FULL_NAME_ASC',\n    FullNameDesc = 'FULL_NAME_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneAlignmentInput {\n    AbbreviationAsc = 'ABBREVIATION_ASC',\n    AbbreviationDesc = 'ABBREVIATION_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneBackgroundInput {\n    BondsChooseAsc = 'BONDS__CHOOSE_ASC',\n    BondsChooseDesc = 'BONDS__CHOOSE_DESC',\n    BondsFromAsc = 'BONDS__FROM_ASC',\n    BondsFromDesc = 'BONDS__FROM_DESC',\n    BondsTypeAsc = 'BONDS__TYPE_ASC',\n    BondsTypeDesc = 'BONDS__TYPE_DESC',\n    FeatureDescAsc = 'FEATURE__DESC_ASC',\n    FeatureDescDesc = 'FEATURE__DESC_DESC',\n    FeatureNameAsc = 'FEATURE__NAME_ASC',\n    FeatureNameDesc = 'FEATURE__NAME_DESC',\n    FlawsChooseAsc = 'FLAWS__CHOOSE_ASC',\n    FlawsChooseDesc = 'FLAWS__CHOOSE_DESC',\n    FlawsFromAsc = 'FLAWS__FROM_ASC',\n    FlawsFromDesc = 'FLAWS__FROM_DESC',\n    FlawsTypeAsc = 'FLAWS__TYPE_ASC',\n    FlawsTypeDesc = 'FLAWS__TYPE_DESC',\n    IdealsChooseAsc = 'IDEALS__CHOOSE_ASC',\n    IdealsChooseDesc = 'IDEALS__CHOOSE_DESC',\n    IdealsTypeAsc = 'IDEALS__TYPE_ASC',\n    IdealsTypeDesc = 'IDEALS__TYPE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    PersonalityTraitsChooseAsc = 'PERSONALITY_TRAITS__CHOOSE_ASC',\n    PersonalityTraitsChooseDesc = 'PERSONALITY_TRAITS__CHOOSE_DESC',\n    PersonalityTraitsFromAsc = 'PERSONALITY_TRAITS__FROM_ASC',\n    PersonalityTraitsFromDesc = 'PERSONALITY_TRAITS__FROM_DESC',\n    PersonalityTraitsTypeAsc = 'PERSONALITY_TRAITS__TYPE_ASC',\n    PersonalityTraitsTypeDesc = 'PERSONALITY_TRAITS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneClassInput {\n    ClassLevelsAsc = 'CLASS_LEVELS_ASC',\n    ClassLevelsDesc = 'CLASS_LEVELS_DESC',\n    HitDieAsc = 'HIT_DIE_ASC',\n    HitDieDesc = 'HIT_DIE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    MultiClassingPrerequisiteOptionsChooseAsc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_ASC',\n    MultiClassingPrerequisiteOptionsChooseDesc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__CHOOSE_DESC',\n    MultiClassingPrerequisiteOptionsTypeAsc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_ASC',\n    MultiClassingPrerequisiteOptionsTypeDesc = 'MULTI_CLASSING__PREREQUISITE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SpellcastingLevelAsc = 'SPELLCASTING__LEVEL_ASC',\n    SpellcastingLevelDesc = 'SPELLCASTING__LEVEL_DESC',\n    SpellcastingSpellcastingAbilityIndexAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__INDEX_ASC',\n    SpellcastingSpellcastingAbilityIndexDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__INDEX_DESC',\n    SpellcastingSpellcastingAbilityNameAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__NAME_ASC',\n    SpellcastingSpellcastingAbilityNameDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__NAME_DESC',\n    SpellcastingSpellcastingAbilityUrlAsc = 'SPELLCASTING__SPELLCASTING_ABILITY__URL_ASC',\n    SpellcastingSpellcastingAbilityUrlDesc = 'SPELLCASTING__SPELLCASTING_ABILITY__URL_DESC',\n    SpellsAsc = 'SPELLS_ASC',\n    SpellsDesc = 'SPELLS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneConditionInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneDamageTypeInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneEquipmentCategoryInput {\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneEquipmentInput {\n    ArmorCategoryAsc = 'ARMOR_CATEGORY_ASC',\n    ArmorCategoryDesc = 'ARMOR_CATEGORY_DESC',\n    ArmorClassBaseAsc = 'ARMOR_CLASS__BASE_ASC',\n    ArmorClassBaseDesc = 'ARMOR_CLASS__BASE_DESC',\n    ArmorClassDexBonusAsc = 'ARMOR_CLASS__DEX_BONUS_ASC',\n    ArmorClassDexBonusDesc = 'ARMOR_CLASS__DEX_BONUS_DESC',\n    ArmorClassMaxBonusAsc = 'ARMOR_CLASS__MAX_BONUS_ASC',\n    ArmorClassMaxBonusDesc = 'ARMOR_CLASS__MAX_BONUS_DESC',\n    CapacityAsc = 'CAPACITY_ASC',\n    CapacityDesc = 'CAPACITY_DESC',\n    CategoryRangeAsc = 'CATEGORY_RANGE_ASC',\n    CategoryRangeDesc = 'CATEGORY_RANGE_DESC',\n    CostQuantityAsc = 'COST__QUANTITY_ASC',\n    CostQuantityDesc = 'COST__QUANTITY_DESC',\n    CostUnitAsc = 'COST__UNIT_ASC',\n    CostUnitDesc = 'COST__UNIT_DESC',\n    DamageDamageDiceAsc = 'DAMAGE__DAMAGE_DICE_ASC',\n    DamageDamageDiceDesc = 'DAMAGE__DAMAGE_DICE_DESC',\n    DamageDamageTypeIndexAsc = 'DAMAGE__DAMAGE_TYPE__INDEX_ASC',\n    DamageDamageTypeIndexDesc = 'DAMAGE__DAMAGE_TYPE__INDEX_DESC',\n    DamageDamageTypeNameAsc = 'DAMAGE__DAMAGE_TYPE__NAME_ASC',\n    DamageDamageTypeNameDesc = 'DAMAGE__DAMAGE_TYPE__NAME_DESC',\n    DamageDamageTypeUrlAsc = 'DAMAGE__DAMAGE_TYPE__URL_ASC',\n    DamageDamageTypeUrlDesc = 'DAMAGE__DAMAGE_TYPE__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    EquipmentCategoryIndexAsc = 'EQUIPMENT_CATEGORY__INDEX_ASC',\n    EquipmentCategoryIndexDesc = 'EQUIPMENT_CATEGORY__INDEX_DESC',\n    EquipmentCategoryNameAsc = 'EQUIPMENT_CATEGORY__NAME_ASC',\n    EquipmentCategoryNameDesc = 'EQUIPMENT_CATEGORY__NAME_DESC',\n    EquipmentCategoryUrlAsc = 'EQUIPMENT_CATEGORY__URL_ASC',\n    EquipmentCategoryUrlDesc = 'EQUIPMENT_CATEGORY__URL_DESC',\n    GearCategoryIndexAsc = 'GEAR_CATEGORY__INDEX_ASC',\n    GearCategoryIndexDesc = 'GEAR_CATEGORY__INDEX_DESC',\n    GearCategoryNameAsc = 'GEAR_CATEGORY__NAME_ASC',\n    GearCategoryNameDesc = 'GEAR_CATEGORY__NAME_DESC',\n    GearCategoryUrlAsc = 'GEAR_CATEGORY__URL_ASC',\n    GearCategoryUrlDesc = 'GEAR_CATEGORY__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    QuantityAsc = 'QUANTITY_ASC',\n    QuantityDesc = 'QUANTITY_DESC',\n    RangeLongAsc = 'RANGE__LONG_ASC',\n    RangeLongDesc = 'RANGE__LONG_DESC',\n    RangeNormalAsc = 'RANGE__NORMAL_ASC',\n    RangeNormalDesc = 'RANGE__NORMAL_DESC',\n    SpecialAsc = 'SPECIAL_ASC',\n    SpecialDesc = 'SPECIAL_DESC',\n    SpeedQuantityAsc = 'SPEED__QUANTITY_ASC',\n    SpeedQuantityDesc = 'SPEED__QUANTITY_DESC',\n    SpeedUnitAsc = 'SPEED__UNIT_ASC',\n    SpeedUnitDesc = 'SPEED__UNIT_DESC',\n    StealthDisadvantageAsc = 'STEALTH_DISADVANTAGE_ASC',\n    StealthDisadvantageDesc = 'STEALTH_DISADVANTAGE_DESC',\n    StrMinimumAsc = 'STR_MINIMUM_ASC',\n    StrMinimumDesc = 'STR_MINIMUM_DESC',\n    ThrowRangeLongAsc = 'THROW_RANGE__LONG_ASC',\n    ThrowRangeLongDesc = 'THROW_RANGE__LONG_DESC',\n    ThrowRangeNormalAsc = 'THROW_RANGE__NORMAL_ASC',\n    ThrowRangeNormalDesc = 'THROW_RANGE__NORMAL_DESC',\n    ToolCategoryAsc = 'TOOL_CATEGORY_ASC',\n    ToolCategoryDesc = 'TOOL_CATEGORY_DESC',\n    TwoHandedDamageDamageDiceAsc = 'TWO_HANDED_DAMAGE__DAMAGE_DICE_ASC',\n    TwoHandedDamageDamageDiceDesc = 'TWO_HANDED_DAMAGE__DAMAGE_DICE_DESC',\n    TwoHandedDamageDamageTypeIndexAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_ASC',\n    TwoHandedDamageDamageTypeIndexDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__INDEX_DESC',\n    TwoHandedDamageDamageTypeNameAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_ASC',\n    TwoHandedDamageDamageTypeNameDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__NAME_DESC',\n    TwoHandedDamageDamageTypeUrlAsc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_ASC',\n    TwoHandedDamageDamageTypeUrlDesc = 'TWO_HANDED_DAMAGE__DAMAGE_TYPE__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    VehicleCategoryAsc = 'VEHICLE_CATEGORY_ASC',\n    VehicleCategoryDesc = 'VEHICLE_CATEGORY_DESC',\n    WeaponCategoryAsc = 'WEAPON_CATEGORY_ASC',\n    WeaponCategoryDesc = 'WEAPON_CATEGORY_DESC',\n    WeaponRangeAsc = 'WEAPON_RANGE_ASC',\n    WeaponRangeDesc = 'WEAPON_RANGE_DESC',\n    WeightAsc = 'WEIGHT_ASC',\n    WeightDesc = 'WEIGHT_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneFeatInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneFeatureInput {\n    ChoiceChooseAsc = 'CHOICE__CHOOSE_ASC',\n    ChoiceChooseDesc = 'CHOICE__CHOOSE_DESC',\n    ChoiceTypeAsc = 'CHOICE__TYPE_ASC',\n    ChoiceTypeDesc = 'CHOICE__TYPE_DESC',\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    FeatureSpecificExpertiseOptionsChooseAsc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_ASC',\n    FeatureSpecificExpertiseOptionsChooseDesc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__CHOOSE_DESC',\n    FeatureSpecificExpertiseOptionsTypeAsc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_ASC',\n    FeatureSpecificExpertiseOptionsTypeDesc = 'FEATURE_SPECIFIC__EXPERTISE_OPTIONS__TYPE_DESC',\n    FeatureSpecificSubfeatureOptionsChooseAsc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_ASC',\n    FeatureSpecificSubfeatureOptionsChooseDesc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__CHOOSE_DESC',\n    FeatureSpecificSubfeatureOptionsTypeAsc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_ASC',\n    FeatureSpecificSubfeatureOptionsTypeDesc = 'FEATURE_SPECIFIC__SUBFEATURE_OPTIONS__TYPE_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LevelAsc = 'LEVEL_ASC',\n    LevelDesc = 'LEVEL_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ParentIndexAsc = 'PARENT__INDEX_ASC',\n    ParentIndexDesc = 'PARENT__INDEX_DESC',\n    ParentNameAsc = 'PARENT__NAME_ASC',\n    ParentNameDesc = 'PARENT__NAME_DESC',\n    ParentUrlAsc = 'PARENT__URL_ASC',\n    ParentUrlDesc = 'PARENT__URL_DESC',\n    ReferenceAsc = 'REFERENCE_ASC',\n    ReferenceDesc = 'REFERENCE_DESC',\n    SubclassIndexAsc = 'SUBCLASS__INDEX_ASC',\n    SubclassIndexDesc = 'SUBCLASS__INDEX_DESC',\n    SubclassNameAsc = 'SUBCLASS__NAME_ASC',\n    SubclassNameDesc = 'SUBCLASS__NAME_DESC',\n    SubclassUrlAsc = 'SUBCLASS__URL_ASC',\n    SubclassUrlDesc = 'SUBCLASS__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneLanguageInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ScriptAsc = 'SCRIPT_ASC',\n    ScriptDesc = 'SCRIPT_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    TypicalSpeakersAsc = 'TYPICAL_SPEAKERS_ASC',\n    TypicalSpeakersDesc = 'TYPICAL_SPEAKERS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneLevelInput {\n    AbilityScoreBonusesAsc = 'ABILITY_SCORE_BONUSES_ASC',\n    AbilityScoreBonusesDesc = 'ABILITY_SCORE_BONUSES_DESC',\n    ClassSpecificActionSurgesAsc = 'CLASS_SPECIFIC__ACTION_SURGES_ASC',\n    ClassSpecificActionSurgesDesc = 'CLASS_SPECIFIC__ACTION_SURGES_DESC',\n    ClassSpecificArcaneRecoveryLevelsAsc = 'CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_ASC',\n    ClassSpecificArcaneRecoveryLevelsDesc = 'CLASS_SPECIFIC__ARCANE_RECOVERY_LEVELS_DESC',\n    ClassSpecificAuraRangeAsc = 'CLASS_SPECIFIC__AURA_RANGE_ASC',\n    ClassSpecificAuraRangeDesc = 'CLASS_SPECIFIC__AURA_RANGE_DESC',\n    ClassSpecificBardicInspirationDieAsc = 'CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_ASC',\n    ClassSpecificBardicInspirationDieDesc = 'CLASS_SPECIFIC__BARDIC_INSPIRATION_DIE_DESC',\n    ClassSpecificBrutalCriticalDiceAsc = 'CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_ASC',\n    ClassSpecificBrutalCriticalDiceDesc = 'CLASS_SPECIFIC__BRUTAL_CRITICAL_DICE_DESC',\n    ClassSpecificChannelDivinityChargesAsc = 'CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_ASC',\n    ClassSpecificChannelDivinityChargesDesc = 'CLASS_SPECIFIC__CHANNEL_DIVINITY_CHARGES_DESC',\n    ClassSpecificDestroyUndeadCrAsc = 'CLASS_SPECIFIC__DESTROY_UNDEAD_CR_ASC',\n    ClassSpecificDestroyUndeadCrDesc = 'CLASS_SPECIFIC__DESTROY_UNDEAD_CR_DESC',\n    ClassSpecificExtraAttacksAsc = 'CLASS_SPECIFIC__EXTRA_ATTACKS_ASC',\n    ClassSpecificExtraAttacksDesc = 'CLASS_SPECIFIC__EXTRA_ATTACKS_DESC',\n    ClassSpecificFavoredEnemiesAsc = 'CLASS_SPECIFIC__FAVORED_ENEMIES_ASC',\n    ClassSpecificFavoredEnemiesDesc = 'CLASS_SPECIFIC__FAVORED_ENEMIES_DESC',\n    ClassSpecificFavoredTerrainAsc = 'CLASS_SPECIFIC__FAVORED_TERRAIN_ASC',\n    ClassSpecificFavoredTerrainDesc = 'CLASS_SPECIFIC__FAVORED_TERRAIN_DESC',\n    ClassSpecificIndomitableUsesAsc = 'CLASS_SPECIFIC__INDOMITABLE_USES_ASC',\n    ClassSpecificIndomitableUsesDesc = 'CLASS_SPECIFIC__INDOMITABLE_USES_DESC',\n    ClassSpecificInvocationsKnownAsc = 'CLASS_SPECIFIC__INVOCATIONS_KNOWN_ASC',\n    ClassSpecificInvocationsKnownDesc = 'CLASS_SPECIFIC__INVOCATIONS_KNOWN_DESC',\n    ClassSpecificKiPointsAsc = 'CLASS_SPECIFIC__KI_POINTS_ASC',\n    ClassSpecificKiPointsDesc = 'CLASS_SPECIFIC__KI_POINTS_DESC',\n    ClassSpecificMagicalSecretsMax_5Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_ASC',\n    ClassSpecificMagicalSecretsMax_5Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_5_DESC',\n    ClassSpecificMagicalSecretsMax_7Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_ASC',\n    ClassSpecificMagicalSecretsMax_7Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_7_DESC',\n    ClassSpecificMagicalSecretsMax_9Asc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_ASC',\n    ClassSpecificMagicalSecretsMax_9Desc = 'CLASS_SPECIFIC__MAGICAL_SECRETS_MAX_9_DESC',\n    ClassSpecificMartialArtsDiceCountAsc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_ASC',\n    ClassSpecificMartialArtsDiceCountDesc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_COUNT_DESC',\n    ClassSpecificMartialArtsDiceValueAsc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_ASC',\n    ClassSpecificMartialArtsDiceValueDesc = 'CLASS_SPECIFIC__MARTIAL_ARTS__DICE_VALUE_DESC',\n    ClassSpecificMetamagicKnownAsc = 'CLASS_SPECIFIC__METAMAGIC_KNOWN_ASC',\n    ClassSpecificMetamagicKnownDesc = 'CLASS_SPECIFIC__METAMAGIC_KNOWN_DESC',\n    ClassSpecificMysticArcanumLevel_6Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_ASC',\n    ClassSpecificMysticArcanumLevel_6Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_6_DESC',\n    ClassSpecificMysticArcanumLevel_7Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_ASC',\n    ClassSpecificMysticArcanumLevel_7Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_7_DESC',\n    ClassSpecificMysticArcanumLevel_8Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_ASC',\n    ClassSpecificMysticArcanumLevel_8Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_8_DESC',\n    ClassSpecificMysticArcanumLevel_9Asc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_ASC',\n    ClassSpecificMysticArcanumLevel_9Desc = 'CLASS_SPECIFIC__MYSTIC_ARCANUM_LEVEL_9_DESC',\n    ClassSpecificRageCountAsc = 'CLASS_SPECIFIC__RAGE_COUNT_ASC',\n    ClassSpecificRageCountDesc = 'CLASS_SPECIFIC__RAGE_COUNT_DESC',\n    ClassSpecificRageDamageBonusAsc = 'CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_ASC',\n    ClassSpecificRageDamageBonusDesc = 'CLASS_SPECIFIC__RAGE_DAMAGE_BONUS_DESC',\n    ClassSpecificSneakAttackDiceCountAsc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_ASC',\n    ClassSpecificSneakAttackDiceCountDesc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_COUNT_DESC',\n    ClassSpecificSneakAttackDiceValueAsc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_ASC',\n    ClassSpecificSneakAttackDiceValueDesc = 'CLASS_SPECIFIC__SNEAK_ATTACK__DICE_VALUE_DESC',\n    ClassSpecificSongOfRestDieAsc = 'CLASS_SPECIFIC__SONG_OF_REST_DIE_ASC',\n    ClassSpecificSongOfRestDieDesc = 'CLASS_SPECIFIC__SONG_OF_REST_DIE_DESC',\n    ClassSpecificSorceryPointsAsc = 'CLASS_SPECIFIC__SORCERY_POINTS_ASC',\n    ClassSpecificSorceryPointsDesc = 'CLASS_SPECIFIC__SORCERY_POINTS_DESC',\n    ClassSpecificUnarmoredMovementAsc = 'CLASS_SPECIFIC__UNARMORED_MOVEMENT_ASC',\n    ClassSpecificUnarmoredMovementDesc = 'CLASS_SPECIFIC__UNARMORED_MOVEMENT_DESC',\n    ClassSpecificWildShapeFlyAsc = 'CLASS_SPECIFIC__WILD_SHAPE_FLY_ASC',\n    ClassSpecificWildShapeFlyDesc = 'CLASS_SPECIFIC__WILD_SHAPE_FLY_DESC',\n    ClassSpecificWildShapeMaxCrAsc = 'CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_ASC',\n    ClassSpecificWildShapeMaxCrDesc = 'CLASS_SPECIFIC__WILD_SHAPE_MAX_CR_DESC',\n    ClassSpecificWildShapeSwimAsc = 'CLASS_SPECIFIC__WILD_SHAPE_SWIM_ASC',\n    ClassSpecificWildShapeSwimDesc = 'CLASS_SPECIFIC__WILD_SHAPE_SWIM_DESC',\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LevelAsc = 'LEVEL_ASC',\n    LevelDesc = 'LEVEL_DESC',\n    ProfBonusAsc = 'PROF_BONUS_ASC',\n    ProfBonusDesc = 'PROF_BONUS_DESC',\n    SpellcastingCantripsKnownAsc = 'SPELLCASTING__CANTRIPS_KNOWN_ASC',\n    SpellcastingCantripsKnownDesc = 'SPELLCASTING__CANTRIPS_KNOWN_DESC',\n    SpellcastingSpellsKnownAsc = 'SPELLCASTING__SPELLS_KNOWN_ASC',\n    SpellcastingSpellsKnownDesc = 'SPELLCASTING__SPELLS_KNOWN_DESC',\n    SpellcastingSpellSlotsLevel_1Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_1_ASC',\n    SpellcastingSpellSlotsLevel_1Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_1_DESC',\n    SpellcastingSpellSlotsLevel_2Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_2_ASC',\n    SpellcastingSpellSlotsLevel_2Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_2_DESC',\n    SpellcastingSpellSlotsLevel_3Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_3_ASC',\n    SpellcastingSpellSlotsLevel_3Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_3_DESC',\n    SpellcastingSpellSlotsLevel_4Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_4_ASC',\n    SpellcastingSpellSlotsLevel_4Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_4_DESC',\n    SpellcastingSpellSlotsLevel_5Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_5_ASC',\n    SpellcastingSpellSlotsLevel_5Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_5_DESC',\n    SpellcastingSpellSlotsLevel_6Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_6_ASC',\n    SpellcastingSpellSlotsLevel_6Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_6_DESC',\n    SpellcastingSpellSlotsLevel_7Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_7_ASC',\n    SpellcastingSpellSlotsLevel_7Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_7_DESC',\n    SpellcastingSpellSlotsLevel_8Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_8_ASC',\n    SpellcastingSpellSlotsLevel_8Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_8_DESC',\n    SpellcastingSpellSlotsLevel_9Asc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_9_ASC',\n    SpellcastingSpellSlotsLevel_9Desc = 'SPELLCASTING__SPELL_SLOTS_LEVEL_9_DESC',\n    SubclassSpecificAdditionalMagicalSecretsMaxLvlAsc = 'SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_ASC',\n    SubclassSpecificAdditionalMagicalSecretsMaxLvlDesc = 'SUBCLASS_SPECIFIC__ADDITIONAL_MAGICAL_SECRETS_MAX_LVL_DESC',\n    SubclassSpecificAuraRangeAsc = 'SUBCLASS_SPECIFIC__AURA_RANGE_ASC',\n    SubclassSpecificAuraRangeDesc = 'SUBCLASS_SPECIFIC__AURA_RANGE_DESC',\n    SubclassIndexAsc = 'SUBCLASS__INDEX_ASC',\n    SubclassIndexDesc = 'SUBCLASS__INDEX_DESC',\n    SubclassNameAsc = 'SUBCLASS__NAME_ASC',\n    SubclassNameDesc = 'SUBCLASS__NAME_DESC',\n    SubclassUrlAsc = 'SUBCLASS__URL_ASC',\n    SubclassUrlDesc = 'SUBCLASS__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneMagicItemInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    EquipmentCategoryIndexAsc = 'EQUIPMENT_CATEGORY__INDEX_ASC',\n    EquipmentCategoryIndexDesc = 'EQUIPMENT_CATEGORY__INDEX_DESC',\n    EquipmentCategoryNameAsc = 'EQUIPMENT_CATEGORY__NAME_ASC',\n    EquipmentCategoryNameDesc = 'EQUIPMENT_CATEGORY__NAME_DESC',\n    EquipmentCategoryUrlAsc = 'EQUIPMENT_CATEGORY__URL_ASC',\n    EquipmentCategoryUrlDesc = 'EQUIPMENT_CATEGORY__URL_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneMagicSchoolInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneMonsterInput {\n    AlignmentAsc = 'ALIGNMENT_ASC',\n    AlignmentDesc = 'ALIGNMENT_DESC',\n    ArmorClassAsc = 'ARMOR_CLASS_ASC',\n    ArmorClassDesc = 'ARMOR_CLASS_DESC',\n    ChallengeRatingAsc = 'CHALLENGE_RATING_ASC',\n    ChallengeRatingDesc = 'CHALLENGE_RATING_DESC',\n    CharismaAsc = 'CHARISMA_ASC',\n    CharismaDesc = 'CHARISMA_DESC',\n    ConstitutionAsc = 'CONSTITUTION_ASC',\n    ConstitutionDesc = 'CONSTITUTION_DESC',\n    DexterityAsc = 'DEXTERITY_ASC',\n    DexterityDesc = 'DEXTERITY_DESC',\n    HitDiceAsc = 'HIT_DICE_ASC',\n    HitDiceDesc = 'HIT_DICE_DESC',\n    HitPointsAsc = 'HIT_POINTS_ASC',\n    HitPointsDesc = 'HIT_POINTS_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    IntelligenceAsc = 'INTELLIGENCE_ASC',\n    IntelligenceDesc = 'INTELLIGENCE_DESC',\n    LanguagesAsc = 'LANGUAGES_ASC',\n    LanguagesDesc = 'LANGUAGES_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SensesBlindsightAsc = 'SENSES__BLINDSIGHT_ASC',\n    SensesBlindsightDesc = 'SENSES__BLINDSIGHT_DESC',\n    SensesDarkvisionAsc = 'SENSES__DARKVISION_ASC',\n    SensesDarkvisionDesc = 'SENSES__DARKVISION_DESC',\n    SensesPassivePerceptionAsc = 'SENSES__PASSIVE_PERCEPTION_ASC',\n    SensesPassivePerceptionDesc = 'SENSES__PASSIVE_PERCEPTION_DESC',\n    SensesTremorsenseAsc = 'SENSES__TREMORSENSE_ASC',\n    SensesTremorsenseDesc = 'SENSES__TREMORSENSE_DESC',\n    SensesTruesightAsc = 'SENSES__TRUESIGHT_ASC',\n    SensesTruesightDesc = 'SENSES__TRUESIGHT_DESC',\n    SizeAsc = 'SIZE_ASC',\n    SizeDesc = 'SIZE_DESC',\n    SpeedBurrowAsc = 'SPEED__BURROW_ASC',\n    SpeedBurrowDesc = 'SPEED__BURROW_DESC',\n    SpeedClimbAsc = 'SPEED__CLIMB_ASC',\n    SpeedClimbDesc = 'SPEED__CLIMB_DESC',\n    SpeedFlyAsc = 'SPEED__FLY_ASC',\n    SpeedFlyDesc = 'SPEED__FLY_DESC',\n    SpeedHoverAsc = 'SPEED__HOVER_ASC',\n    SpeedHoverDesc = 'SPEED__HOVER_DESC',\n    SpeedSwimAsc = 'SPEED__SWIM_ASC',\n    SpeedSwimDesc = 'SPEED__SWIM_DESC',\n    SpeedWalkAsc = 'SPEED__WALK_ASC',\n    SpeedWalkDesc = 'SPEED__WALK_DESC',\n    StrengthAsc = 'STRENGTH_ASC',\n    StrengthDesc = 'STRENGTH_DESC',\n    SubtypeAsc = 'SUBTYPE_ASC',\n    SubtypeDesc = 'SUBTYPE_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    WisdomAsc = 'WISDOM_ASC',\n    WisdomDesc = 'WISDOM_DESC',\n    XpAsc = 'XP_ASC',\n    XpDesc = 'XP_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneProficiencyInput {\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    TypeAsc = 'TYPE_ASC',\n    TypeDesc = 'TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneRaceInput {\n    AbilityBonusOptionsChooseAsc = 'ABILITY_BONUS_OPTIONS__CHOOSE_ASC',\n    AbilityBonusOptionsChooseDesc = 'ABILITY_BONUS_OPTIONS__CHOOSE_DESC',\n    AbilityBonusOptionsTypeAsc = 'ABILITY_BONUS_OPTIONS__TYPE_ASC',\n    AbilityBonusOptionsTypeDesc = 'ABILITY_BONUS_OPTIONS__TYPE_DESC',\n    AgeAsc = 'AGE_ASC',\n    AgeDesc = 'AGE_DESC',\n    AlignmentAsc = 'ALIGNMENT_ASC',\n    AlignmentDesc = 'ALIGNMENT_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageDescAsc = 'LANGUAGE_DESC_ASC',\n    LanguageDescDesc = 'LANGUAGE_DESC_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SizeAsc = 'SIZE_ASC',\n    SizeDesc = 'SIZE_DESC',\n    SizeDescriptionAsc = 'SIZE_DESCRIPTION_ASC',\n    SizeDescriptionDesc = 'SIZE_DESCRIPTION_DESC',\n    SpeedAsc = 'SPEED_ASC',\n    SpeedDesc = 'SPEED_DESC',\n    StartingProficiencyOptionsChooseAsc = 'STARTING_PROFICIENCY_OPTIONS__CHOOSE_ASC',\n    StartingProficiencyOptionsChooseDesc = 'STARTING_PROFICIENCY_OPTIONS__CHOOSE_DESC',\n    StartingProficiencyOptionsTypeAsc = 'STARTING_PROFICIENCY_OPTIONS__TYPE_ASC',\n    StartingProficiencyOptionsTypeDesc = 'STARTING_PROFICIENCY_OPTIONS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneRuleInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneRuleSectionInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneSkillInput {\n    AbilityScoreIndexAsc = 'ABILITY_SCORE__INDEX_ASC',\n    AbilityScoreIndexDesc = 'ABILITY_SCORE__INDEX_DESC',\n    AbilityScoreNameAsc = 'ABILITY_SCORE__NAME_ASC',\n    AbilityScoreNameDesc = 'ABILITY_SCORE__NAME_DESC',\n    AbilityScoreUrlAsc = 'ABILITY_SCORE__URL_ASC',\n    AbilityScoreUrlDesc = 'ABILITY_SCORE__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneSpellInput {\n    SchoolIndexAsc = 'SCHOOL__INDEX_ASC',\n    SchoolIndexDesc = 'SCHOOL__INDEX_DESC',\n    SchoolNameAsc = 'SCHOOL__NAME_ASC',\n    SchoolNameDesc = 'SCHOOL__NAME_DESC',\n    SchoolUrlAsc = 'SCHOOL__URL_ASC',\n    SchoolUrlDesc = 'SCHOOL__URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneSubclassInput {\n    ClassIndexAsc = 'CLASS__INDEX_ASC',\n    ClassIndexDesc = 'CLASS__INDEX_DESC',\n    ClassNameAsc = 'CLASS__NAME_ASC',\n    ClassNameDesc = 'CLASS__NAME_DESC',\n    ClassUrlAsc = 'CLASS__URL_ASC',\n    ClassUrlDesc = 'CLASS__URL_DESC',\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    SubclassFlavorAsc = 'SUBCLASS_FLAVOR_ASC',\n    SubclassFlavorDesc = 'SUBCLASS_FLAVOR_DESC',\n    SubclassLevelsAsc = 'SUBCLASS_LEVELS_ASC',\n    SubclassLevelsDesc = 'SUBCLASS_LEVELS_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneSubraceInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    LanguageOptionsChooseAsc = 'LANGUAGE_OPTIONS__CHOOSE_ASC',\n    LanguageOptionsChooseDesc = 'LANGUAGE_OPTIONS__CHOOSE_DESC',\n    LanguageOptionsTypeAsc = 'LANGUAGE_OPTIONS__TYPE_ASC',\n    LanguageOptionsTypeDesc = 'LANGUAGE_OPTIONS__TYPE_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    RaceIndexAsc = 'RACE__INDEX_ASC',\n    RaceIndexDesc = 'RACE__INDEX_DESC',\n    RaceNameAsc = 'RACE__NAME_ASC',\n    RaceNameDesc = 'RACE__NAME_DESC',\n    RaceUrlAsc = 'RACE__URL_ASC',\n    RaceUrlDesc = 'RACE__URL_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneTraitInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    ParentIndexAsc = 'PARENT__INDEX_ASC',\n    ParentIndexDesc = 'PARENT__INDEX_DESC',\n    ParentNameAsc = 'PARENT__NAME_ASC',\n    ParentNameDesc = 'PARENT__NAME_DESC',\n    ParentUrlAsc = 'PARENT__URL_ASC',\n    ParentUrlDesc = 'PARENT__URL_DESC',\n    ProficiencyChoicesChooseAsc = 'PROFICIENCY_CHOICES__CHOOSE_ASC',\n    ProficiencyChoicesChooseDesc = 'PROFICIENCY_CHOICES__CHOOSE_DESC',\n    ProficiencyChoicesTypeAsc = 'PROFICIENCY_CHOICES__TYPE_ASC',\n    ProficiencyChoicesTypeDesc = 'PROFICIENCY_CHOICES__TYPE_DESC',\n    TraitSpecificBreathWeaponDcDcTypeIndexAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_ASC',\n    TraitSpecificBreathWeaponDcDcTypeIndexDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__INDEX_DESC',\n    TraitSpecificBreathWeaponDcDcTypeNameAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_ASC',\n    TraitSpecificBreathWeaponDcDcTypeNameDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__NAME_DESC',\n    TraitSpecificBreathWeaponDcDcTypeUrlAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_ASC',\n    TraitSpecificBreathWeaponDcDcTypeUrlDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__DC_TYPE__URL_DESC',\n    TraitSpecificBreathWeaponDcSuccessTypeAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_ASC',\n    TraitSpecificBreathWeaponDcSuccessTypeDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DC__SUCCESS_TYPE_DESC',\n    TraitSpecificBreathWeaponDescAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DESC_ASC',\n    TraitSpecificBreathWeaponDescDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__DESC_DESC',\n    TraitSpecificBreathWeaponNameAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__NAME_ASC',\n    TraitSpecificBreathWeaponNameDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__NAME_DESC',\n    TraitSpecificBreathWeaponUsageTimesAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_ASC',\n    TraitSpecificBreathWeaponUsageTimesDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TIMES_DESC',\n    TraitSpecificBreathWeaponUsageTypeAsc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_ASC',\n    TraitSpecificBreathWeaponUsageTypeDesc = 'TRAIT_SPECIFIC__BREATH_WEAPON__USAGE__TYPE_DESC',\n    TraitSpecificDamageTypeIndexAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_ASC',\n    TraitSpecificDamageTypeIndexDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__INDEX_DESC',\n    TraitSpecificDamageTypeNameAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_ASC',\n    TraitSpecificDamageTypeNameDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__NAME_DESC',\n    TraitSpecificDamageTypeUrlAsc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__URL_ASC',\n    TraitSpecificDamageTypeUrlDesc = 'TRAIT_SPECIFIC__DAMAGE_TYPE__URL_DESC',\n    TraitSpecificSpellOptionsChooseAsc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_ASC',\n    TraitSpecificSpellOptionsChooseDesc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__CHOOSE_DESC',\n    TraitSpecificSpellOptionsTypeAsc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_ASC',\n    TraitSpecificSpellOptionsTypeDesc = 'TRAIT_SPECIFIC__SPELL_OPTIONS__TYPE_DESC',\n    TraitSpecificSubtraitOptionsChooseAsc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_ASC',\n    TraitSpecificSubtraitOptionsChooseDesc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__CHOOSE_DESC',\n    TraitSpecificSubtraitOptionsTypeAsc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_ASC',\n    TraitSpecificSubtraitOptionsTypeDesc = 'TRAIT_SPECIFIC__SUBTRAIT_OPTIONS__TYPE_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport enum SortFindOneWeaponPropertyInput {\n    DescAsc = 'DESC_ASC',\n    DescDesc = 'DESC_DESC',\n    IndexAsc = 'INDEX_ASC',\n    IndexDesc = 'INDEX_DESC',\n    NameAsc = 'NAME_ASC',\n    NameDesc = 'NAME_DESC',\n    UrlAsc = 'URL_ASC',\n    UrlDesc = 'URL_DESC',\n    IdAsc = '_ID_ASC',\n    IdDesc = '_ID_DESC',\n}\n\nexport type Spell = {\n    __typename?: 'Spell';\n    _id: Scalars['String'];\n    area_of_effect?: Maybe<SpellArea_Of_Effect>;\n    attack_type?: Maybe<Scalars['String']>;\n    casting_time?: Maybe<Scalars['String']>;\n    classes?: Maybe<Array<Maybe<SpellClasses>>>;\n    components?: Maybe<Array<Maybe<Scalars['String']>>>;\n    concentration?: Maybe<Scalars['Boolean']>;\n    damage?: Maybe<SpellDamage>;\n    dc?: Maybe<SpellDc>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    duration?: Maybe<Scalars['String']>;\n    heal_at_slot_level?: Maybe<Scalars['JSON']>;\n    higher_level?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    level?: Maybe<Scalars['Float']>;\n    material?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    range?: Maybe<Scalars['String']>;\n    ritual?: Maybe<Scalars['Boolean']>;\n    school?: Maybe<MagicSchool>;\n    subclasses?: Maybe<Array<Maybe<SpellSubclasses>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SpellSchoolArgs = {\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindOneMagicSchoolInput>;\n};\n\nexport type SpellArea_Of_Effect = {\n    __typename?: 'SpellArea_of_effect';\n    size?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type SpellClasses = {\n    __typename?: 'SpellClasses';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SpellDamage = {\n    __typename?: 'SpellDamage';\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_at_slot_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<SpellDamageDamage_Type>;\n};\n\nexport type SpellDamageDamage_Type = {\n    __typename?: 'SpellDamageDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SpellDc = {\n    __typename?: 'SpellDc';\n    dc_success?: Maybe<Scalars['String']>;\n    dc_type?: Maybe<SpellDcDc_Type>;\n    desc?: Maybe<Scalars['String']>;\n};\n\nexport type SpellDcDc_Type = {\n    __typename?: 'SpellDcDc_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SpellSubclasses = {\n    __typename?: 'SpellSubclasses';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Subclass = {\n    __typename?: 'Subclass';\n    _id: Scalars['String'];\n    class?: Maybe<SubclassClass>;\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    spells?: Maybe<Array<Maybe<SubclassSpells>>>;\n    subclass_flavor?: Maybe<Scalars['String']>;\n    subclass_levels: Array<Level>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubclassSubclass_LevelsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyLevelInput>;\n};\n\nexport type SubclassClass = {\n    __typename?: 'SubclassClass';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubclassSpells = {\n    __typename?: 'SubclassSpells';\n    _id?: Maybe<Scalars['MongoID']>;\n    prerequisites?: Maybe<Array<Maybe<SubclassSpellsPrerequisites>>>;\n    spell?: Maybe<SubclassSpellsSpell>;\n};\n\nexport type SubclassSpellsPrerequisites = {\n    __typename?: 'SubclassSpellsPrerequisites';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    type?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubclassSpellsSpell = {\n    __typename?: 'SubclassSpellsSpell';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Subrace = {\n    __typename?: 'Subrace';\n    _id: Scalars['String'];\n    ability_bonuses?: Maybe<Array<Maybe<SubraceAbility_Bonuses>>>;\n    desc?: Maybe<Scalars['String']>;\n    index?: Maybe<Scalars['String']>;\n    language_options?: Maybe<SubraceLanguage_Options>;\n    name?: Maybe<Scalars['String']>;\n    race?: Maybe<SubraceRace>;\n    racial_traits: Array<Trait>;\n    starting_proficiencies?: Maybe<Array<Maybe<SubraceStarting_Proficiencies>>>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubraceRacial_TraitsArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyTraitInput>;\n};\n\nexport type SubraceAbility_Bonuses = {\n    __typename?: 'SubraceAbility_bonuses';\n    _id?: Maybe<Scalars['MongoID']>;\n    ability_score?: Maybe<SubraceAbility_BonusesAbility_Score>;\n    bonus?: Maybe<Scalars['Float']>;\n};\n\nexport type SubraceAbility_BonusesAbility_Score = {\n    __typename?: 'SubraceAbility_bonusesAbility_score';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubraceLanguage_Options = {\n    __typename?: 'SubraceLanguage_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<SubraceLanguage_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type SubraceLanguage_OptionsFrom = {\n    __typename?: 'SubraceLanguage_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubraceRace = {\n    __typename?: 'SubraceRace';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type SubraceStarting_Proficiencies = {\n    __typename?: 'SubraceStarting_proficiencies';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type Trait = {\n    __typename?: 'Trait';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    parent?: Maybe<TraitParent>;\n    proficiencies: Array<Proficiency>;\n    proficiency_choices?: Maybe<TraitProficiency_Choices>;\n    races?: Maybe<Array<Maybe<TraitRaces>>>;\n    subraces?: Maybe<Array<Maybe<TraitSubraces>>>;\n    trait_specific?: Maybe<TraitTrait_Specific>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitProficienciesArgs = {\n    limit?: Maybe<Scalars['Int']>;\n    skip?: Maybe<Scalars['Int']>;\n    sort?: Maybe<SortFindManyProficiencyInput>;\n};\n\nexport type TraitParent = {\n    __typename?: 'TraitParent';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitProficiency_Choices = {\n    __typename?: 'TraitProficiency_choices';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<TraitProficiency_ChoicesFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type TraitProficiency_ChoicesFrom = {\n    __typename?: 'TraitProficiency_choicesFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitRaces = {\n    __typename?: 'TraitRaces';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitSubraces = {\n    __typename?: 'TraitSubraces';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_Specific = {\n    __typename?: 'TraitTrait_specific';\n    breath_weapon?: Maybe<TraitTrait_SpecificBreath_Weapon>;\n    damage_type?: Maybe<TraitTrait_SpecificDamage_Type>;\n    spell_options?: Maybe<TraitTrait_SpecificSpell_Options>;\n    subtrait_options?: Maybe<TraitTrait_SpecificSubtrait_Options>;\n};\n\nexport type TraitTrait_SpecificBreath_Weapon = {\n    __typename?: 'TraitTrait_specificBreath_weapon';\n    damage?: Maybe<Array<Maybe<TraitTrait_SpecificBreath_WeaponDamage>>>;\n    dc?: Maybe<TraitTrait_SpecificBreath_WeaponDc>;\n    desc?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    usage?: Maybe<TraitTrait_SpecificBreath_WeaponUsage>;\n};\n\nexport type TraitTrait_SpecificBreath_WeaponDamage = {\n    __typename?: 'TraitTrait_specificBreath_weaponDamage';\n    _id?: Maybe<Scalars['MongoID']>;\n    damage_at_character_level?: Maybe<Scalars['JSON']>;\n    damage_type?: Maybe<TraitTrait_SpecificBreath_WeaponDamageDamage_Type>;\n};\n\nexport type TraitTrait_SpecificBreath_WeaponDamageDamage_Type = {\n    __typename?: 'TraitTrait_specificBreath_weaponDamageDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificBreath_WeaponDc = {\n    __typename?: 'TraitTrait_specificBreath_weaponDc';\n    dc_type?: Maybe<TraitTrait_SpecificBreath_WeaponDcDc_Type>;\n    success_type?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificBreath_WeaponDcDc_Type = {\n    __typename?: 'TraitTrait_specificBreath_weaponDcDc_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificBreath_WeaponUsage = {\n    __typename?: 'TraitTrait_specificBreath_weaponUsage';\n    times?: Maybe<Scalars['Float']>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificDamage_Type = {\n    __typename?: 'TraitTrait_specificDamage_type';\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificSpell_Options = {\n    __typename?: 'TraitTrait_specificSpell_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<TraitTrait_SpecificSpell_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificSpell_OptionsFrom = {\n    __typename?: 'TraitTrait_specificSpell_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificSubtrait_Options = {\n    __typename?: 'TraitTrait_specificSubtrait_options';\n    choose?: Maybe<Scalars['Float']>;\n    from?: Maybe<Array<Maybe<TraitTrait_SpecificSubtrait_OptionsFrom>>>;\n    type?: Maybe<Scalars['String']>;\n};\n\nexport type TraitTrait_SpecificSubtrait_OptionsFrom = {\n    __typename?: 'TraitTrait_specificSubtrait_optionsFrom';\n    _id?: Maybe<Scalars['MongoID']>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type WeaponProperty = {\n    __typename?: 'WeaponProperty';\n    _id: Scalars['String'];\n    desc?: Maybe<Array<Maybe<Scalars['String']>>>;\n    index?: Maybe<Scalars['String']>;\n    name?: Maybe<Scalars['String']>;\n    url?: Maybe<Scalars['String']>;\n};\n\nexport type GetSpellsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetSpellsQuery = {\n    __typename?: 'Query';\n    spells: Array<{\n        __typename?: 'Spell';\n        name?: Maybe<string>;\n        level?: Maybe<number>;\n        concentration?: Maybe<boolean>;\n        desc?: Maybe<Array<Maybe<string>>>;\n        attack_type?: Maybe<string>;\n        material?: Maybe<string>;\n        casting_time?: Maybe<string>;\n        classes?: Maybe<\n            Array<Maybe<{ __typename?: 'SpellClasses'; name?: Maybe<string> }>>\n        >;\n    }>;\n};\n\nexport type GetSpellByNameQueryVariables = Exact<{\n    name?: Maybe<Scalars['String']>;\n}>;\n\nexport type GetSpellByNameQuery = {\n    __typename?: 'Query';\n    spell?: Maybe<{\n        __typename?: 'Spell';\n        name?: Maybe<string>;\n        level?: Maybe<number>;\n        concentration?: Maybe<boolean>;\n        desc?: Maybe<Array<Maybe<string>>>;\n        attack_type?: Maybe<string>;\n        material?: Maybe<string>;\n        casting_time?: Maybe<string>;\n        components?: Maybe<Array<Maybe<string>>>;\n        ritual?: Maybe<boolean>;\n        higher_level?: Maybe<Array<Maybe<string>>>;\n        range?: Maybe<string>;\n        classes?: Maybe<\n            Array<Maybe<{ __typename?: 'SpellClasses'; name?: Maybe<string> }>>\n        >;\n        school?: Maybe<{\n            __typename?: 'MagicSchool';\n            name?: Maybe<string>;\n            desc?: Maybe<string>;\n        }>;\n        area_of_effect?: Maybe<{\n            __typename?: 'SpellArea_of_effect';\n            type?: Maybe<string>;\n            size?: Maybe<number>;\n        }>;\n    }>;\n};\n\nexport const GetSpellsDocument = gql`\n    query getSpells {\n        spells(limit: 500) {\n            name\n            level\n            concentration\n            desc\n            attack_type\n            material\n            casting_time\n            classes {\n                name\n            }\n        }\n    }\n`;\n\n/**\n * __useGetSpellsQuery__\n *\n * To run a query within a React component, call `useGetSpellsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpellsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpellsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSpellsQuery(\n    baseOptions?: Apollo.QueryHookOptions<\n        GetSpellsQuery,\n        GetSpellsQueryVariables\n    >\n) {\n    const options = { ...defaultOptions, ...baseOptions };\n    return Apollo.useQuery<GetSpellsQuery, GetSpellsQueryVariables>(\n        GetSpellsDocument,\n        options\n    );\n}\nexport function useGetSpellsLazyQuery(\n    baseOptions?: Apollo.LazyQueryHookOptions<\n        GetSpellsQuery,\n        GetSpellsQueryVariables\n    >\n) {\n    const options = { ...defaultOptions, ...baseOptions };\n    return Apollo.useLazyQuery<GetSpellsQuery, GetSpellsQueryVariables>(\n        GetSpellsDocument,\n        options\n    );\n}\nexport type GetSpellsQueryHookResult = ReturnType<typeof useGetSpellsQuery>;\nexport type GetSpellsLazyQueryHookResult = ReturnType<\n    typeof useGetSpellsLazyQuery\n>;\nexport type GetSpellsQueryResult = Apollo.QueryResult<\n    GetSpellsQuery,\n    GetSpellsQueryVariables\n>;\nexport const GetSpellByNameDocument = gql`\n    query getSpellByName($name: String) {\n        spell(filter: { name: $name }) {\n            name\n            level\n            concentration\n            desc\n            attack_type\n            material\n            casting_time\n            classes {\n                name\n            }\n            school {\n                name\n                desc\n            }\n            components\n            ritual\n            higher_level\n            range\n            area_of_effect {\n                type\n                size\n            }\n        }\n    }\n`;\n\n/**\n * __useGetSpellByNameQuery__\n *\n * To run a query within a React component, call `useGetSpellByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpellByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpellByNameQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useGetSpellByNameQuery(\n    baseOptions?: Apollo.QueryHookOptions<\n        GetSpellByNameQuery,\n        GetSpellByNameQueryVariables\n    >\n) {\n    const options = { ...defaultOptions, ...baseOptions };\n    return Apollo.useQuery<GetSpellByNameQuery, GetSpellByNameQueryVariables>(\n        GetSpellByNameDocument,\n        options\n    );\n}\nexport function useGetSpellByNameLazyQuery(\n    baseOptions?: Apollo.LazyQueryHookOptions<\n        GetSpellByNameQuery,\n        GetSpellByNameQueryVariables\n    >\n) {\n    const options = { ...defaultOptions, ...baseOptions };\n    return Apollo.useLazyQuery<\n        GetSpellByNameQuery,\n        GetSpellByNameQueryVariables\n    >(GetSpellByNameDocument, options);\n}\nexport type GetSpellByNameQueryHookResult = ReturnType<\n    typeof useGetSpellByNameQuery\n>;\nexport type GetSpellByNameLazyQueryHookResult = ReturnType<\n    typeof useGetSpellByNameLazyQuery\n>;\nexport type GetSpellByNameQueryResult = Apollo.QueryResult<\n    GetSpellByNameQuery,\n    GetSpellByNameQueryVariables\n>;\n","import { Box } from '@primer/components';\nimport { StackIcon } from '@primer/octicons-react';\nimport { PageHeader } from '../../layout/PageHeader';\n\nexport const SpellbooksPage = () => {\n    return (\n        <>\n            <PageHeader>\n                <PageHeader.Title icon={StackIcon} title=\"Spellbooks\" />\n            </PageHeader>\n            <Box display=\"flex\" flexDirection=\"column\"></Box>\n        </>\n    );\n};\n","import { Box, Heading, Spinner } from '@primer/components';\n\nexport const PageLoading = () => (\n    <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        m={8}\n    >\n        <Box m={3}>\n            <Heading fontSize={3}>Loading…</Heading>\n        </Box>\n        <Spinner />\n    </Box>\n);\n","import { ApolloError } from '@apollo/client';\nimport {\n    Spell as ApolloSpell,\n    useGetSpellByNameQuery,\n    useGetSpellsQuery,\n} from '../generated/graphql';\nimport { Spell } from '../Models/Spell';\n\ninterface QueryResult<Type> {\n    error?: ApolloError;\n    isLoading: boolean;\n    data?: Type;\n}\n\nconst mapApolloSpell = (apolloSpell: Partial<ApolloSpell>): Spell => ({\n    castingTime: apolloSpell.casting_time?.toString(),\n    classes: apolloSpell.classes?.map((c) => c!.name!.toString()) ?? [],\n    components: apolloSpell.components?.map((c) => c!.toString()) ?? [],\n    concentration: apolloSpell.concentration ?? false,\n    desc: apolloSpell.desc?.map((d) => d!.toString()) ?? [],\n    duration: apolloSpell.duration?.toString(),\n    level: apolloSpell.level!,\n    higherLevelDesc: apolloSpell.higher_level?.map((d) => d!.toString()) ?? [],\n    material: apolloSpell.material?.toString(),\n    name: apolloSpell.name!,\n    ritual: apolloSpell.ritual ?? false,\n    school: apolloSpell.school?.name?.toString(),\n    range: apolloSpell.range?.toString(),\n    uriSafeName: encodeURIComponent(apolloSpell.name!),\n});\n\nexport const useGetSpells = (): QueryResult<Spell[]> => {\n    const { data, error, loading: isLoading } = useGetSpellsQuery();\n\n    if (error || isLoading) {\n        return {\n            error,\n            isLoading,\n            data: [],\n        };\n    }\n\n    return {\n        error,\n        isLoading,\n        data: data!.spells.map((s) => mapApolloSpell(s)),\n    };\n};\n\nexport const useGetSpellByName = (name: string): QueryResult<Spell> => {\n    const {\n        data,\n        error,\n        loading: isLoading,\n    } = useGetSpellByNameQuery({\n        variables: {\n            name,\n        },\n    });\n\n    if (error || isLoading) {\n        return {\n            error,\n            isLoading,\n            data: undefined,\n        };\n    }\n\n    return {\n        error,\n        isLoading,\n        data: mapApolloSpell(data!.spell! as ApolloSpell),\n    };\n};\n","import { Box, Flash, Heading, StyledOcticon, Text } from '@primer/components';\nimport { AlertIcon, BookmarkFillIcon } from '@primer/octicons-react';\nimport { PageHeader } from '../../layout/PageHeader';\nimport { useEffect } from 'react';\nimport { PageLoading } from '../../layout/PageLoading';\nimport { useParams } from 'react-router';\nimport { useGetSpellByName } from '../../gql/SpellRepository';\n\ninterface SpellPageParams {\n    spellName: string;\n}\n\nconst renderPart = (label?: string, value?: string) => {\n    if (!value) {\n        return;\n    }\n\n    return (\n        <Box>\n            <Text fontWeight=\"bold\" display=\"inline\">\n                {label}:\n            </Text>\n            <Text display=\"inline\"> {value}</Text>\n        </Box>\n    );\n};\n\nexport const SpellPage = () => {\n    const { spellName: encodedSpellName } = useParams<SpellPageParams>();\n    const spellName = decodeURIComponent(encodedSpellName);\n\n    const { data, error, isLoading } = useGetSpellByName(spellName);\n\n    useEffect(() => {\n        error && console.error(error);\n    }, [error]);\n\n    const notFound = !isLoading && !data;\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\">\n            <PageHeader>\n                <PageHeader.Title icon={BookmarkFillIcon} title={spellName} />\n            </PageHeader>\n            {isLoading ? (\n                <PageLoading />\n            ) : (\n                <Box\n                    display=\"flex\"\n                    flexDirection=\"column\"\n                    mt={3}\n                    ml={4}\n                    mr={4}\n                    mb={4}\n                >\n                    {notFound ? (\n                        <Flash variant=\"warning\">\n                            <StyledOcticon icon={AlertIcon} />\n                            <Text fontWeight={400}>Spell not found</Text>\n                        </Flash>\n                    ) : (\n                        <>\n                            <Heading fontSize={3} mb={3}>\n                                Level {data?.level}{' '}\n                                {data?.school?.toLowerCase()}\n                            </Heading>\n                            {renderPart('Casting time', data?.castingTime)}\n                            {renderPart('Range', data?.range)}\n                            {renderPart(\n                                'Components',\n                                data?.components?.join(', ')\n                            )}\n                            {renderPart(\n                                'Concentration',\n                                data?.concentration ? 'yes' : 'no'\n                            )}\n                            {renderPart('Ritual', data?.ritual ? 'yes' : 'no')}\n                            {renderPart('Classes', data?.classes.join(', '))}\n\n                            <Box\n                                display=\"flex\"\n                                flexDirection=\"column\"\n                                mt={4}\n                                mb={4}\n                            >\n                                {data?.desc?.map((desc, idx) => (\n                                    <Text mb={2} key={idx}>\n                                        {desc}\n                                    </Text>\n                                ))}\n                            </Box>\n\n                            {data?.higherLevelDesc?.length! > 0 && (\n                                <>\n                                    <Text fontWeight=\"bold\" display=\"inline\">\n                                        Higher level:\n                                    </Text>\n                                    <Box\n                                        display=\"flex\"\n                                        flexDirection=\"column\"\n                                        mt={2}\n                                        mb={4}\n                                    >\n                                        {data?.higherLevelDesc?.map(\n                                            (desc, idx) => (\n                                                <Text mb={2} key={idx}>\n                                                    {desc}\n                                                </Text>\n                                            )\n                                        )}\n                                    </Box>\n                                </>\n                            )}\n                        </>\n                    )}\n                </Box>\n            )}\n        </Box>\n    );\n};\n","import { Box, Text, themeGet } from '@primer/components';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FixedSizeList } from 'react-window';\nimport styled from 'styled-components';\nimport { Spell } from '../../Models/Spell';\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst Card = styled(Box)`\n    display: block;\n    color: inherit;\n    text-decoration: inherit;\n\n    &:active,\n    &:hover {\n        background-color: ${themeGet('colors.border.muted')};\n    }\n`;\n\ninterface RowProps {\n    index: number;\n    style: any;\n    data: Spell[];\n}\n\nconst Row = ({ index, style, data }: RowProps) => {\n    const spell = data[index];\n\n    return (\n        <div style={style}>\n            <Card\n                p={4}\n                pt={3}\n                pb={3}\n                display=\"block\"\n                as={Link}\n                to={`/spell/${spell.uriSafeName}`}\n            >\n                <Text fontSize={2} fontWeight={600}>\n                    [{spell.level}] {spell.name}\n                </Text>\n            </Card>\n        </div>\n    );\n};\n\ninterface InfiniteSpellListProps {\n    spells: Spell[];\n}\n\nconst SpellListContainer = styled.div`\n    height: 100%;\n`;\n\nexport const InfiniteSpellList = ({ spells }: InfiniteSpellListProps) => {\n    const containerRef = useRef() as React.MutableRefObject<HTMLInputElement>;\n    const { width, height } = useResizeDetector({ targetRef: containerRef });\n\n    return (\n        <SpellListContainer ref={containerRef}>\n            <FixedSizeList\n                width={width ?? 320}\n                height={height ?? 300}\n                itemCount={spells.length}\n                itemData={spells}\n                itemSize={56}\n            >\n                {Row}\n            </FixedSizeList>\n        </SpellListContainer>\n    );\n};\n","import { themeGet } from '@primer/components';\nimport styled from 'styled-components';\n\nconst DrawerContent = styled.div<{ isOpen: boolean }>`\n    background-color: ${themeGet('colors.canvas.inset')};\n    color: white;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    height: 100%;\n    max-width: 320px;\n    width: 90%;\n    box-shadow: rgb(23 26 29) 0px 8px 24px;\n\n    transition: right 0.15s ease;\n\n    right: ${({ isOpen }) => (isOpen ? '0' : '-100%')};\n`;\n\nconst Screen = styled.div<{ isOpen: boolean }>`\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    transition: background-color 0.5s ease;\n\n    background-color: ${({ isOpen }) => (isOpen ? '#00000066' : '00000000')};\n    pointer-events: ${({ isOpen }) => (isOpen ? 'all' : 'none')};\n`;\n\ninterface DrawerProps {\n    children?: React.ReactNode;\n    isOpen: boolean;\n    handleClose: () => void;\n}\n\nexport const Drawer = ({ children, isOpen, handleClose }: DrawerProps) => (\n    <>\n        <Screen isOpen={isOpen} onClick={handleClose} />\n        <DrawerContent isOpen={isOpen}>{children}</DrawerContent>\n    </>\n);\n","import {\n    Box,\n    Heading,\n    StyledOcticon,\n    Text,\n    themeGet,\n} from '@primer/components';\nimport { XIcon } from '@primer/octicons-react';\nimport styled from 'styled-components';\nimport { UnstyledButton } from '../../components/buttons/UnstyledButton';\n\nconst TitleBar = styled(Heading)`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst CloseButton = styled(UnstyledButton)`\n    padding: 8px;\n\n    &:active {\n        background-color: ${themeGet('colors.canvas.subtle')};\n    }\n`;\n\n\nconst ClassGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-column-gap: 8px;\n    height: 260px;\n    grid-row-gap: 8px;\n    margin-bottom: 16px;\n`;\n\nconst SpellLevelGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-column-gap: 8px;\n    height: 200px;\n    grid-row-gap: 8px;\n`;\n\nconst ClassCell = styled(UnstyledButton)`\n    background-color: ${themeGet('colors.canvas.subtle')};\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: .25rem;\n`;\n\nconst SpellLevelCell = styled(UnstyledButton)`\n    background-color: ${themeGet('colors.canvas.subtle')};\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: .25rem;\n`;\n\ninterface SpellsListFilterProps {\n    handleClose: () => void;\n}\n\nexport const SpellsListFilter = ({ handleClose }: SpellsListFilterProps) => {\n    return (\n        <Box overflow=\"auto\" height=\"100%\">\n            <TitleBar  p={2} as=\"h3\" fontSize={2}>\n                <Text p={2}>Filter</Text>\n                <CloseButton onClick={handleClose}>\n                    <StyledOcticon icon={XIcon} size={32} />\n                </CloseButton>\n            </TitleBar>\n            <Box p={3}>\n                <Text pb={2} display=\"block\">Class</Text>\n                <ClassGrid>\n                    <ClassCell>Bard</ClassCell>\n                    <ClassCell>Cleric</ClassCell>\n                    <ClassCell>Druid</ClassCell>\n                    <ClassCell>Paladin</ClassCell>\n                    <ClassCell>Ranger</ClassCell>\n                    <ClassCell>Sorcerer</ClassCell>\n                    <ClassCell>Warlock</ClassCell>\n                    <ClassCell>Wizard</ClassCell>\n                </ClassGrid>\n                <Text pb={2} display=\"block\">Spell level</Text>\n                <SpellLevelGrid>\n                    <SpellLevelCell>0</SpellLevelCell>\n                    <SpellLevelCell>1</SpellLevelCell>\n                    <SpellLevelCell>2</SpellLevelCell>\n                    <SpellLevelCell>3</SpellLevelCell>\n                    <SpellLevelCell>4</SpellLevelCell>\n                    <SpellLevelCell>5</SpellLevelCell>\n                    <SpellLevelCell>6</SpellLevelCell>\n                    <SpellLevelCell>7</SpellLevelCell>\n                    <SpellLevelCell>8</SpellLevelCell>\n                    <SpellLevelCell>9</SpellLevelCell>\n                </SpellLevelGrid>\n            </Box>\n        </Box>\n    );\n};\n","import { Box, TextInput } from '@primer/components';\nimport { PageHeader } from '../../layout/PageHeader';\nimport { useEffect, useState } from 'react';\nimport { PageLoading } from '../../layout/PageLoading';\nimport { RepoIcon, SearchIcon } from '@primer/octicons-react';\nimport { useGetSpells } from '../../gql/SpellRepository';\nimport { InfiniteSpellList } from './InfiniteSpellList';\nimport { Drawer } from '../../components/Drawer';\nimport { SpellsListFilter } from './SpellsListFilter';\n\nexport const SpellsPage = () => {\n    const { data, error, isLoading } = useGetSpells();\n    const [nameFilter, setNameFilter] = useState('');\n    const [isFilterDrawerOpen, setIsFilterDrawerOpen] = useState(false);\n\n    const handleChange = (e: any) => {\n        setNameFilter(e.target.value);\n    };\n\n    const lowerFilter = nameFilter.toLowerCase();\n    const spells =\n        data?.filter((s) => s.name.toLowerCase().includes(lowerFilter)) || [];\n\n    useEffect(() => {\n        error && console.error(error);\n    }, [error]);\n\n    const showFilter = () => {\n        setIsFilterDrawerOpen(true);\n    };\n\n    const hideDrawer = () => {\n        setIsFilterDrawerOpen(false);\n    };\n\n    return (\n        <>\n            <PageHeader>\n                <PageHeader.Title icon={RepoIcon} title=\"Spells\" />\n                <PageHeader.Action\n                    icon={SearchIcon}\n                    label=\"search\"\n                    onClick={showFilter}\n                />\n            </PageHeader>\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                flex=\"1 1 auto\"\n                height=\"100%\"\n            >\n                {isLoading ? (\n                    <PageLoading />\n                ) : (\n                    <>\n                        <TextInput\n                            sx={{ m: 4 }}\n                            icon={SearchIcon}\n                            aria-label=\"Spell name\"\n                            name=\"spell-name\"\n                            placeholder=\"Filter spells\"\n                            value={nameFilter}\n                            onChange={handleChange}\n                        />\n                        <InfiniteSpellList spells={spells} />\n                        <Drawer\n                            isOpen={isFilterDrawerOpen}\n                            handleClose={hideDrawer}\n                        >\n                            <SpellsListFilter handleClose={hideDrawer} />\n                        </Drawer>\n                    </>\n                )}\n            </Box>\n        </>\n    );\n};\n","import { Box } from '@primer/components';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { AppHeader } from '../layout/AppHeader';\nimport { HomePage } from './home/HomePage';\nimport { SpellbooksPage } from './spellbooks/SpellbooksPage';\nimport { SpellPage } from './spells/SpellPage';\nimport { SpellsPage } from './spells/SpellsPage';\n\nexport const Routes = () => (\n    <BrowserRouter>\n        <AppHeader />\n        <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            overflowY=\"auto\"\n            height=\"100%\"\n        >\n            <Switch>\n                <Route path=\"/spells\">\n                    <SpellsPage />\n                </Route>\n                <Route path=\"/spell/:spellName\">\n                    <SpellPage />\n                </Route>\n                <Route path=\"/spellbooks\">\n                    <SpellbooksPage />\n                </Route>\n                <Route>\n                    <HomePage />\n                </Route>\n            </Switch>\n        </Box>\n    </BrowserRouter>\n);\n","import React from 'react';\nimport { ThemeProvider } from '@primer/components';\n\ninterface AppThemeProviderProps {\n    children?: React.ReactNode;\n}\n\nexport const AppThemeProvider = ({ children }: AppThemeProviderProps) => (\n    <ThemeProvider colorMode=\"night\" nightScheme=\"dark_dimmed\">\n        {children}\n    </ThemeProvider>\n);\n","import React from 'react';\nimport { BaseStyles, Box } from '@primer/components';\nimport { GraphProvider } from './gql/GraphProvider';\nimport { Routes } from './pages/Routes';\nimport { AppThemeProvider } from './layout/AppThemeProvider';\nimport styled from 'styled-components';\n\nconst Base = styled(BaseStyles)`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const App = () => (\n    <AppThemeProvider>\n        <GraphProvider>\n            <Box height=\"100%\" bg=\"bg.primary\" overflowY=\"auto\">\n                <Base>\n                    <Routes />\n                </Base>\n            </Box>\n        </GraphProvider>\n    </AppThemeProvider>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}